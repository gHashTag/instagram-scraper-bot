/**
 * üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∫—Ä–∞–ø–µ—Ä–∞ –Ω–∞ 1 —Ö—ç—à—Ç–µ–≥–µ
 */

import { neon } from '@neondatabase/serverless';
import dotenv from 'dotenv';
dotenv.config();

async function quickScraperTest() {
  console.log('üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ö–†–ê–ü–ï–†–ê');
  console.log('========================\n');

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.log(`DATABASE_URL: ${process.env.DATABASE_URL ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}`);
  console.log(`APIFY_TOKEN: ${process.env.APIFY_TOKEN ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}`);

  if (!process.env.DATABASE_URL || !process.env.APIFY_TOKEN) {
    console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ');
    return;
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  console.log('\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
  const sql = neon(process.env.DATABASE_URL);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö—ç—à—Ç–µ–≥–∏
    const hashtags = await sql`
      SELECT id, tag_name, is_active 
      FROM hashtags 
      WHERE is_active = true 
      LIMIT 3
    `;

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–æ–≤: ${hashtags.length}`);
    hashtags.forEach(tag => {
      console.log(`   - #${tag.tag_name} (ID: ${tag.id})`);
    });

    if (hashtags.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞');
      return;
    }

    // 3. –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Apify
    console.log('\nüï∑Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Apify:');
    const testHashtag = hashtags[0];
    
    try {
      const response = await fetch(`https://api.apify.com/v2/acts/apify~instagram-scraper/run-sync-get-dataset-items?token=${process.env.APIFY_TOKEN}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          hashtags: [testHashtag.tag_name],
          resultsLimit: 3, // –¢–æ–ª—å–∫–æ 3 –¥–ª—è —Ç–µ—Å—Ç–∞
          proxy: {
            useApifyProxy: true,
            apifyProxyGroups: ["RESIDENTIAL"]
          }
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      if (Array.isArray(data) && data.length > 0) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${data.length} reels –æ—Ç Apify`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const firstReel = data[0];
        console.log(`   –ü—Ä–∏–º–µ—Ä: @${firstReel.ownerUsername} - ${firstReel.videoViewCount?.toLocaleString() || 'N/A'} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`);
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤:');
        
        const recentReels = data.filter(reel => {
          if (!reel.timestamp) return false;
          const publishedDate = new Date(reel.timestamp);
          const daysAgo = (new Date().getTime() - publishedDate.getTime()) / (1000 * 60 * 60 * 24);
          return daysAgo <= 14; // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π
        });
        
        const viralReels = data.filter(reel => {
          const views = reel.videoViewCount || 0;
          return views >= 50000; // 50K+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        });
        
        console.log(`   –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π: ${recentReels.length} –∏–∑ ${data.length}`);
        console.log(`   –° 50K+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${viralReels.length} –∏–∑ ${data.length}`);
        
        // 5. –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        console.log('\nüíæ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î:');
        
        if (viralReels.length > 0) {
          const testReel = viralReels[0];
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
          const existing = await sql`
            SELECT id FROM reels WHERE reel_url = ${testReel.url}
          `;
          
          if (existing.length > 0) {
            console.log(`‚ö†Ô∏è Reel —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î (ID: ${existing[0].id})`);
          } else {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π reel
            const saved = await sql`
              INSERT INTO reels (
                reel_url, project_id, source_type, source_identifier,
                author_username, views_count, likes_count, comments_count,
                published_at, description, created_at
              ) VALUES (
                ${testReel.url}, 1, 'hashtag', ${testHashtag.id.toString()},
                ${testReel.ownerUsername}, ${testReel.videoViewCount || 0}, 
                ${testReel.likesCount || 0}, ${testReel.commentsCount || 0},
                ${testReel.timestamp ? new Date(testReel.timestamp) : null},
                ${testReel.caption || null}, NOW()
              ) RETURNING id
            `;
            
            console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π reel —Å–æ—Ö—Ä–∞–Ω–µ–Ω (ID: ${saved[0].id})`);
          }
        } else {
          console.log(`‚ö†Ô∏è –ù–µ—Ç –≤–∏—Ä—É—Å–Ω—ã—Ö reels –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è`);
        }
        
        // 6. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        console.log('\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:');
        
        if (recentReels.length > 0 && viralReels.length > 0) {
          console.log('‚úÖ –°–ö–†–ê–ü–ï–† –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!');
          console.log('   - Apify API –¥–æ—Å—Ç—É–ø–µ–Ω');
          console.log('   - –§–∏–ª—å—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç');
          console.log('   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞');
          console.log('   - –ï—Å—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
          
          console.log('\nüöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥:');
          console.log(`npx tsx src/scripts/bulk-scrape-hashtags.ts 1 $APIFY_TOKEN 14 50000 50`);
          
        } else if (data.length > 0) {
          console.log('üü° –°–ö–†–ê–ü–ï–† –†–ê–ë–û–¢–ê–ï–¢, –ù–û –ú–ê–õ–û –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –î–ê–ù–ù–´–•');
          console.log('   - Apify API –¥–æ—Å—Ç—É–ø–µ–Ω');
          console.log('   - –ù—É–∂–Ω–æ —Å–Ω–∏–∑–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç');
          
        } else {
          console.log('üî¥ –ü–†–û–ë–õ–ï–ú–´ –°–û –°–ö–†–ê–ü–ï–†–û–ú');
          console.log('   - Apify –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ');
          console.log('   - –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ö—ç—à—Ç–µ–≥–æ–º –∏–ª–∏ –ª–∏–º–∏—Ç–∞–º–∏');
        }
        
      } else {
        console.log('‚ùå Apify –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ');
        console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('   - –•—ç—à—Ç–µ–≥ –Ω–µ –ø–æ–ø—É–ª—è—Ä–µ–Ω');
        console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∫—Å–∏');
        console.log('   - –õ–∏–º–∏—Ç—ã Instagram');
      }

    } catch (apifyError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ Apify API: ${apifyError.message}`);
    }

  } catch (dbError) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${dbError.message}`);
  }
}

quickScraperTest().catch(console.error);
