/**
 * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ
 */

require('dotenv').config();

async function checkCompetitorData() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –ö–û–ù–ö–£–†–ï–ù–¢–û–í');
  console.log('==============================\n');

  if (!process.env.DATABASE_URL) {
    console.log('‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const { neon } = require('@neondatabase/serverless');
  const sql = neon(process.env.DATABASE_URL);

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ
    console.log('üë• –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –≤ –±–∞–∑–µ:');
    const competitors = await sql`
      SELECT id, username, is_active, last_scraped_at 
      FROM competitors 
      WHERE project_id = 1
      ORDER BY id
    `;

    competitors.forEach(comp => {
      const lastScraped = comp.last_scraped_at ? 
        new Date(comp.last_scraped_at).toLocaleDateString() : 
        '–ù–∏–∫–æ–≥–¥–∞';
      console.log(`   ${comp.id}. @${comp.username} - ${comp.is_active ? '‚úÖ' : '‚ùå'} - –°–∫—Ä–∞–ø–∏–Ω–≥: ${lastScraped}`);
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º source_type –≤ reels
    console.log('\nüìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ reels:');
    const sources = await sql`
      SELECT 
        source_type, 
        source_identifier,
        COUNT(*) as count,
        MAX(views_count) as max_views,
        MAX(created_at) as last_added
      FROM reels 
      WHERE project_id = 1
      GROUP BY source_type, source_identifier 
      ORDER BY count DESC
    `;

    sources.forEach(source => {
      const lastAdded = source.last_added ? 
        new Date(source.last_added).toLocaleDateString() : 
        '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      console.log(`   ${source.source_type || 'NULL'}:${source.source_identifier || 'NULL'} - ${source.count} reels - ${source.max_views?.toLocaleString() || 'N/A'} –º–∞–∫—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ - ${lastAdded}`);
    });

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º
    console.log('\nüîó Reels –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º:');
    for (const comp of competitors) {
      // –ò—â–µ–º –ø–æ source_identifier = competitor.id
      const reelsByCompetitorId = await sql`
        SELECT COUNT(*) as count, MAX(views_count) as max_views
        FROM reels 
        WHERE project_id = 1 
        AND source_type = 'competitor' 
        AND source_identifier = ${comp.id.toString()}
      `;

      // –ò—â–µ–º –ø–æ author_username = competitor.username
      const reelsByUsername = await sql`
        SELECT COUNT(*) as count, MAX(views_count) as max_views
        FROM reels 
        WHERE project_id = 1 
        AND author_username = ${comp.username}
      `;

      console.log(`   @${comp.username}:`);
      console.log(`     –ü–æ source_identifier: ${reelsByCompetitorId[0].count} reels`);
      console.log(`     –ü–æ author_username: ${reelsByUsername[0].count} reels`);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø –∞–≤—Ç–æ—Ä–æ–≤
    console.log('\nüèÜ –¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ:');
    const topAuthors = await sql`
      SELECT 
        author_username, 
        COUNT(*) as count,
        MAX(views_count) as max_views,
        AVG(views_count) as avg_views
      FROM reels 
      WHERE project_id = 1 
      AND author_username IS NOT NULL
      GROUP BY author_username 
      ORDER BY count DESC 
      LIMIT 10
    `;

    topAuthors.forEach((author, index) => {
      const avgViews = Math.round(author.avg_views || 0).toLocaleString();
      const maxViews = (author.max_views || 0).toLocaleString();
      console.log(`   ${index + 1}. @${author.author_username} - ${author.count} reels - ${avgViews} —Å—Ä–µ–¥–Ω. - ${maxViews} –º–∞–∫—Å.`);
    });

    // 5. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
    console.log('\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:');
    
    const competitorReels = await sql`
      SELECT COUNT(*) as count 
      FROM reels 
      WHERE project_id = 1 
      AND source_type = 'competitor'
    `;

    const hashtagReels = await sql`
      SELECT COUNT(*) as count 
      FROM reels 
      WHERE project_id = 1 
      AND source_type = 'hashtag'
    `;

    const unknownReels = await sql`
      SELECT COUNT(*) as count 
      FROM reels 
      WHERE project_id = 1 
      AND (source_type IS NULL OR source_type NOT IN ('competitor', 'hashtag'))
    `;

    console.log(`   Reels –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${competitorReels[0].count}`);
    console.log(`   Reels –æ—Ç —Ö—ç—à—Ç–µ–≥–æ–≤: ${hashtagReels[0].count}`);
    console.log(`   Reels –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${unknownReels[0].count}`);

    // 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    
    if (competitorReels[0].count === 0) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç reels —Å source_type = "competitor"');
      console.log('   –†–µ—à–µ–Ω–∏–µ: –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤');
      console.log('   –ö–æ–º–∞–Ω–¥–∞: npx tsx src/scripts/bulk-scrape-competitors.ts 1 $APIFY_TOKEN 1 20');
    }

    if (unknownReels[0].count > 0) {
      console.log('‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ï—Å—Ç—å reels –±–µ–∑ source_type');
      console.log('   –†–µ—à–µ–Ω–∏–µ: –û–±–Ω–æ–≤–∏—Ç—å source_type –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö reels');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ reels –æ—Ç –Ω–∞—à–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø–æ username
    let foundCompetitorReels = 0;
    for (const comp of competitors) {
      const reels = await sql`
        SELECT COUNT(*) as count 
        FROM reels 
        WHERE project_id = 1 
        AND author_username = ${comp.username}
      `;
      foundCompetitorReels += reels[0].count;
    }

    if (foundCompetitorReels > 0) {
      console.log(`‚úÖ –•–û–†–û–®–û: –ù–∞–π–¥–µ–Ω–æ ${foundCompetitorReels} reels –æ—Ç –Ω–∞—à–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø–æ username`);
      console.log('   –†–µ—à–µ–Ω–∏–µ: –û–±–Ω–æ–≤–∏—Ç—å source_type –¥–ª—è —ç—Ç–∏—Ö reels');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

checkCompetitorData().catch(console.error);
