#!/usr/bin/env bun

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ action handlers –≤ wizard —Å—Ü–µ–Ω–∞—Ö
 */

import { Telegraf, Scenes } from "telegraf";
import type { ScraperBotContext } from "../src/types";
import { projectWizardScene } from "../src/scenes/project-wizard-scene";

function debugWizardScene() {
  console.log("üîç –û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã projectWizardScene...");

  const scene = projectWizardScene as any;

  console.log("üìã –í—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ü–µ–Ω—ã:");
  for (const key of Object.keys(scene)) {
    console.log(`  - ${key}: ${typeof scene[key]}`);
  }

  console.log("\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º handler
  if (scene.handler) {
    console.log("üîç scene.handler:");
    console.log("  - –¢–∏–ø:", typeof scene.handler);
    console.log("  - –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:", scene.handler.constructor.name);
    console.log("  - –°–≤–æ–π—Å—Ç–≤–∞:", Object.keys(scene.handler));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è handlers
    if (scene.handler.handlers) {
      console.log("  - scene.handler.handlers:", scene.handler.handlers.length);
    }

    if (scene.handler._handlers) {
      console.log(
        "  - scene.handler._handlers:",
        scene.handler._handlers.length
      );
    }

    if (scene.handler.middleware) {
      console.log(
        "  - scene.handler.middleware:",
        typeof scene.handler.middleware
      );
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º enterHandler
  if (scene.enterHandler) {
    console.log("üîç scene.enterHandler:");
    console.log("  - –¢–∏–ø:", typeof scene.enterHandler);
    console.log("  - –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:", scene.enterHandler.constructor.name);
    console.log("  - –°–≤–æ–π—Å—Ç–≤–∞:", Object.keys(scene.enterHandler));
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º leaveHandler
  if (scene.leaveHandler) {
    console.log("üîç scene.leaveHandler:");
    console.log("  - –¢–∏–ø:", typeof scene.leaveHandler);
    console.log("  - –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:", scene.leaveHandler.constructor.name);
    console.log("  - –°–≤–æ–π—Å—Ç–≤–∞:", Object.keys(scene.leaveHandler));
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º steps
  if (scene.steps) {
    console.log("üîç scene.steps:");
    console.log("  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤:", scene.steps.length);
    for (let i = 0; i < scene.steps.length; i++) {
      console.log(`  - –®–∞–≥ ${i}: ${typeof scene.steps[i]}`);
    }
  }

  // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ action handlers —á–µ—Ä–µ–∑ –ø—Ä–æ—Ç–æ—Ç–∏–ø
  console.log("\nüîç –ü–æ–∏—Å–∫ action handlers —á–µ—Ä–µ–∑ –ø—Ä–æ—Ç–æ—Ç–∏–ø:");
  let proto = Object.getPrototypeOf(scene);
  let level = 0;
  while (proto && level < 5) {
    console.log(`  –£—Ä–æ–≤–µ–Ω—å ${level}: ${proto.constructor.name}`);
    const protoKeys = Object.getOwnPropertyNames(proto);
    for (const key of protoKeys) {
      if (
        key.includes("action") ||
        key.includes("handler") ||
        key.includes("middleware")
      ) {
        console.log(`    - ${key}: ${typeof proto[key]}`);
      }
    }
    proto = Object.getPrototypeOf(proto);
    level++;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∫—Ä—ã—Ç—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  console.log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä—ã—Ç—ã—Ö —Å–≤–æ–π—Å—Ç–≤:");
  const descriptors = Object.getOwnPropertyDescriptors(scene);
  for (const [key, descriptor] of Object.entries(descriptors)) {
    if (!descriptor.enumerable) {
      console.log(`  - ${key} (—Å–∫—Ä—ã—Ç–æ–µ): ${typeof scene[key]}`);
    }
  }

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∏ stage –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  console.log("\nü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∏ stage...");
  const bot = new Telegraf<ScraperBotContext>("test-token");
  const stage = new Scenes.Stage<ScraperBotContext>([projectWizardScene]);

  bot.use(stage.middleware());

  console.log("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ stage:");
  console.log("  - –¢–∏–ø:", typeof stage);
  console.log("  - –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:", stage.constructor.name);
  console.log("  - –°–≤–æ–π—Å—Ç–≤–∞:", Object.keys(stage));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º scenes –≤ stage
  if ((stage as any).scenes) {
    console.log("üìã stage.scenes:");
    const scenes = (stage as any).scenes;
    console.log("  - –¢–∏–ø:", typeof scenes);
    console.log("  - –†–∞–∑–º–µ—Ä:", scenes.size || Object.keys(scenes).length);

    if (scenes.get) {
      const projectScene = scenes.get("project_wizard");
      if (projectScene) {
        console.log("üìã –ù–∞–π–¥–µ–Ω–∞ —Å—Ü–µ–Ω–∞ project_wizard –≤ stage:");
        console.log("  - –¢–∏–ø:", typeof projectScene);
        console.log("  - –°–≤–æ–π—Å—Ç–≤–∞:", Object.keys(projectScene));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º handler –≤ —Å—Ü–µ–Ω–µ –∏–∑ stage
        if (projectScene.handler) {
          console.log("üìã projectScene.handler –∏–∑ stage:");
          console.log("  - –¢–∏–ø:", typeof projectScene.handler);
          console.log("  - –°–≤–æ–π—Å—Ç–≤–∞:", Object.keys(projectScene.handler));

          if (projectScene.handler.handlers) {
            console.log(
              "  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ handlers:",
              projectScene.handler.handlers.length
            );
            for (const handler of projectScene.handler.handlers) {
              console.log(
                `    - Handler: ${handler.trigger || handler.predicate?.toString()}`
              );
            }
          }
        }
      }
    }
  }

  console.log("‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
debugWizardScene();
