import dotenv from "dotenv";
import path from "path";
import { fileURLToPath } from "url";
import fs from "fs";
import {
  initializeDBConnection,
  closeDBConnection,
  getDB,
} from "../src/db/neonDB";
import { reelsTable, hashtagsTable, projectsTable } from "../src/db/schema";
import { eq, and, desc, sql, like } from "drizzle-orm";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const devEnvPath = path.join(__dirname, "../.env.development");
const prodEnvPath = path.join(__dirname, "../.env");

const dev = fs.existsSync(devEnvPath);
const envPath = dev ? devEnvPath : prodEnvPath;
dotenv.config({ path: envPath });

const vaultPath = process.env.OBSIDIAN_VAULT_PATH;
if (!vaultPath) {
  console.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å OBSIDIAN_VAULT_PATH –≤ .env");
  process.exit(1);
}

const obsidianPath: string = vaultPath;

function formatNumber(num: number): string {
  return new Intl.NumberFormat("ru-RU").format(num);
}

function formatPercent(num: number): string {
  return `${num.toFixed(2)}%`;
}

async function main() {
  const projectIdArg = process.argv[2];

  if (!projectIdArg) {
    console.error("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç");
    console.error("–ü—Ä–∏–º–µ—Ä: bun run export:hashtags 1");
    process.exit(1);
  }

  const projectId = parseInt(projectIdArg, 10);

  console.log(`üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}...`);

  await initializeDBConnection();
  const db = getDB();

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
  const project = await db
    .select()
    .from(projectsTable)
    .where(eq(projectsTable.id, projectId))
    .limit(1);

  if (project.length === 0) {
    console.error(`‚ùå –ü—Ä–æ–µ–∫—Ç —Å ID ${projectId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    await closeDBConnection();
    return;
  }

  const projectInfo = project[0];
  console.log(`üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—ç—à—Ç–µ–≥–∏ –ø—Ä–æ–µ–∫—Ç–∞: ${projectInfo.name}`);

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º
  const hashtagStats = await db
    .select({
      hashtagId: hashtagsTable.id,
      hashtag: hashtagsTable.tag_name,
      reelsCount: sql<number>`count(${reelsTable.id})`,
      totalViews: sql<number>`sum(${reelsTable.views_count})`,
      totalLikes: sql<number>`sum(${reelsTable.likes_count})`,
      avgViews: sql<number>`avg(${reelsTable.views_count})`,
      maxViews: sql<number>`max(${reelsTable.views_count})`,
    })
    .from(hashtagsTable)
    .leftJoin(
      reelsTable,
      and(
        eq(reelsTable.project_id, hashtagsTable.project_id),
        eq(reelsTable.source_type, "hashtag"),
        eq(reelsTable.source_identifier, sql`${hashtagsTable.id}::text`)
      )
    )
    .where(eq(hashtagsTable.project_id, projectId))
    .groupBy(hashtagsTable.id, hashtagsTable.tag_name)
    .orderBy(desc(sql<number>`sum(${reelsTable.views_count})`));

  // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º
  const totalHashtagStats = await db
    .select({
      totalReels: sql<number>`count(${reelsTable.id})`,
      totalViews: sql<number>`sum(${reelsTable.views_count})`,
      totalLikes: sql<number>`sum(${reelsTable.likes_count})`,
      avgViews: sql<number>`avg(${reelsTable.views_count})`,
    })
    .from(reelsTable)
    .where(
      and(
        eq(reelsTable.project_id, projectId),
        eq(reelsTable.source_type, "hashtag")
      )
    );

  const stats = totalHashtagStats[0];
  const totalEngagementRate =
    Number(stats.totalViews) > 0
      ? (Number(stats.totalLikes) / Number(stats.totalViews)) * 100
      : 0;

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 reels –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º
  const topHashtagReels = await db
    .select({
      authorUsername: reelsTable.author_username,
      viewsCount: reelsTable.views_count,
      likesCount: reelsTable.likes_count,
      audioTitle: reelsTable.audio_title,
      description: reelsTable.description,
      reelUrl: reelsTable.reel_url,
      sourceIdentifier: reelsTable.source_identifier,
    })
    .from(reelsTable)
    .where(
      and(
        eq(reelsTable.project_id, projectId),
        eq(reelsTable.source_type, "hashtag")
      )
    )
    .orderBy(desc(reelsTable.views_count))
    .limit(10);

  // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º
  const reportContent = `# üè∑Ô∏è –û–¢–ß–ï–¢ –ü–û –•–≠–®–¢–ï–ì–ê–ú

## üéØ –ü–†–û–ï–ö–¢: ${projectInfo.name}

**–î–∞—Ç–∞:** ${new Date().toLocaleDateString("ru-RU")}  
**–ò–Ω–¥—É—Å—Ç—Ä–∏—è:** ${projectInfo.industry || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}  
**–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞:** –•—ç—à—Ç–µ–≥–∏ –∏ —Ç—Ä–µ–Ω–¥—ã

---

## üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –•–≠–®–¢–ï–ì–ê–ú

- üè∑Ô∏è **–í—Å–µ–≥–æ —Ö—ç—à—Ç–µ–≥–æ–≤:** ${hashtagStats.length}
- üé¨ **–í—Å–µ–≥–æ Reels:** ${formatNumber(Number(stats.totalReels || 0))}
- üëÄ **–í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:** ${formatNumber(Number(stats.totalViews || 0))}
- ‚ù§Ô∏è **–í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤:** ${formatNumber(Number(stats.totalLikes || 0))}
- üìä **–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã:** ${formatNumber(Math.round(Number(stats.avgViews || 0)))}
- üí´ **Engagement Rate:** ${formatPercent(totalEngagementRate)}

---

## üèÜ –¢–û–ü –•–≠–®–¢–ï–ì–û–í (–ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º)

${hashtagStats
  .filter((hashtag) => Number(hashtag.totalViews || 0) > 0)
  .map((hashtag, index) => {
    const reelsCount = Number(hashtag.reelsCount || 0);
    const totalViews = Number(hashtag.totalViews || 0);
    const totalLikes = Number(hashtag.totalLikes || 0);
    const avgViews = Math.round(Number(hashtag.avgViews || 0));
    const maxViews = Number(hashtag.maxViews || 0);
    const engagementRate = totalViews > 0 ? (totalLikes / totalViews) * 100 : 0;

    return `### ${index + 1}. #${hashtag.hashtag || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"}

- üé¨ **Reels:** ${formatNumber(reelsCount)}
- üëÄ **–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:** ${formatNumber(totalViews)}
- ‚ù§Ô∏è **–õ–∞–π–∫–∏:** ${formatNumber(totalLikes)}
- üìä **–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã:** ${formatNumber(avgViews)}
- üî• **–ú–∞–∫—Å–∏–º—É–º:** ${formatNumber(maxViews)}
- üí´ **ER:** ${formatPercent(engagementRate)}`;
  })
  .join("\n\n")}

---

## üî• –¢–û–ü-10 –õ–£–ß–®–ò–• REELS –ü–û –•–≠–®–¢–ï–ì–ê–ú

${topHashtagReels
  .filter((reel) => reel.reelUrl && !reel.reelUrl.includes("test_reel"))
  .slice(0, 10)
  .map((reel, index) => {
    const views = Number(reel.viewsCount || 0);
    const likes = Number(reel.likesCount || 0);
    const engagementRate = views > 0 ? (likes / views) * 100 : 0;

    // –ù–∞—Ö–æ–¥–∏–º —Ö—ç—à—Ç–µ–≥ –ø–æ source_identifier
    const hashtagInfo = hashtagStats.find(
      (h) => h.hashtagId?.toString() === reel.sourceIdentifier
    );
    const hashtagName = hashtagInfo?.hashtag || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";

    return `### ${index + 1}. @${reel.authorUsername || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"} (#${hashtagName})

- üëÄ **–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:** ${formatNumber(views)}
- ‚ù§Ô∏è **–õ–∞–π–∫–∏:** ${formatNumber(likes)}
- üí´ **ER:** ${formatPercent(engagementRate)}
- üéµ **–ú—É–∑—ã–∫–∞:** ${reel.audioTitle || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}
- üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** ${reel.description ? reel.description.substring(0, 100) + "..." : "–ù–µ—Ç"}
- üîó **–°—Å—ã–ª–∫–∞:** [–û—Ç–∫—Ä—ã—Ç—å](${reel.reelUrl})`;
  })
  .join("\n\n")}

---

## üí° –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í

### üéØ –°–∞–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ö—ç—à—Ç–µ–≥:
**#${hashtagStats[0]?.hashtag || "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"}** - ${formatNumber(Number(hashtagStats[0]?.totalViews || 0))} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤

### üìä –°—Ä–µ–¥–Ω–∏–π ER –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º:
${formatPercent(totalEngagementRate)}

### üî• –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:
${formatNumber(Number(topHashtagReels[0]?.viewsCount || 0))} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤

### üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º:

#### üèÜ –í—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ (ER > ${formatPercent(totalEngagementRate * 1.5)}):
${hashtagStats
  .filter((h) => {
    const totalViews = Number(h.totalViews || 0);
    const totalLikes = Number(h.totalLikes || 0);
    const er = totalViews > 0 ? (totalLikes / totalViews) * 100 : 0;
    return er > totalEngagementRate * 1.5 && totalViews > 0;
  })
  .slice(0, 5)
  .map(
    (h) =>
      `- **#${h.hashtag}** (ER: ${formatPercent(Number(h.totalViews) > 0 ? (Number(h.totalLikes) / Number(h.totalViews)) * 100 : 0)})`
  )
  .join("\n")}

#### üìä –°—Ç–∞–±–∏–ª—å–Ω—ã–µ (—Å—Ä–µ–¥–Ω–∏–π ER):
${hashtagStats
  .filter((h) => {
    const totalViews = Number(h.totalViews || 0);
    const totalLikes = Number(h.totalLikes || 0);
    const er = totalViews > 0 ? (totalLikes / totalViews) * 100 : 0;
    return (
      er >= totalEngagementRate * 0.7 &&
      er <= totalEngagementRate * 1.5 &&
      totalViews > 0
    );
  })
  .slice(0, 5)
  .map(
    (h) =>
      `- **#${h.hashtag}** (ER: ${formatPercent(Number(h.totalViews) > 0 ? (Number(h.totalLikes) / Number(h.totalViews)) * 100 : 0)})`
  )
  .join("\n")}

---

## üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –°–¢–†–ê–¢–ï–ì–ò–ò

### üéØ –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞:
1. **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ø-—Ö—ç—à—Ç–µ–≥–∏:** #${hashtagStats
    .slice(0, 3)
    .map((h) => h.hashtag)
    .join(", #")}
2. **–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏ –Ω–∏—à–µ–≤—ã–µ** —Ö—ç—à—Ç–µ–≥–∏
3. **–°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç—Ä–µ–Ω–¥–∞–º–∏** –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

### üìà –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è:
1. **–§–æ–∫—É—Å –Ω–∞ –≤—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–∞—Ö**
2. **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏**
3. **–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–æ–ø-–ø–æ—Å—Ç–æ–≤**

### üîÑ –î–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
1. **–°–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥–æ–≤—ã–µ —Ö—ç—à—Ç–µ–≥–∏**
2. **–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö**
3. **–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤**

---

*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${new Date().toLocaleString("ru-RU")}*`;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
  const hashtagsDir = path.join(obsidianPath, "content-factory", "hashtags");
  fs.mkdirSync(hashtagsDir, { recursive: true });

  const reportFileName = `hashtags-analysis-${projectInfo.name.replace(/[^a-zA-Z0-9]/g, "_")}-${new Date().toISOString().split("T")[0]}.md`;
  const reportFilePath = path.join(hashtagsDir, reportFileName);

  fs.writeFileSync(reportFilePath, reportContent, "utf8");

  console.log(`‚úÖ –û—Ç—á–µ—Ç –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º —Å–æ–∑–¥–∞–Ω: ${reportFileName}`);
  console.log(`üìÅ –ü—É—Ç—å: ${reportFilePath}`);
  console.log(`üè∑Ô∏è –•—ç—à—Ç–µ–≥–æ–≤: ${hashtagStats.length}`);
  console.log(`üé¨ Reels: ${formatNumber(Number(stats.totalReels || 0))}`);

  await closeDBConnection();
}

main().catch(async (err) => {
  console.error("‚ùå –û—à–∏–±–∫–∞:", err);
  await closeDBConnection();
});
