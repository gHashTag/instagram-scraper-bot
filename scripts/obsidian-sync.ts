import dotenv from "dotenv";
import path from "path";
import { fileURLToPath } from "url";
import fs from "fs";
import {
  initializeDBConnection,
  closeDBConnection,
  getDB,
} from "../src/db/neonDB";
import {
  reelsTable,
  competitorsTable,
  projectsTable,
  hashtagsTable,
} from "../src/db/schema";
import { eq, and, desc, sql } from "drizzle-orm";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const devEnvPath = path.join(__dirname, "../.env.development");
const prodEnvPath = path.join(__dirname, "../.env");

const dev = fs.existsSync(devEnvPath);
const envPath = dev ? devEnvPath : prodEnvPath;
dotenv.config({ path: envPath });

const vaultPath = process.env.OBSIDIAN_VAULT_PATH;
if (!vaultPath) {
  console.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å OBSIDIAN_VAULT_PATH –≤ .env");
  process.exit(1);
}

const obsidianPath: string = vaultPath;

interface EditableData {
  competitors: Array<{
    id: number;
    username: string;
    full_name: string | null;
    notes: string | null;
    is_active: boolean;
  }>;
  hashtags: Array<{
    id: number;
    tag_name: string;
    notes: string | null;
    is_active: boolean;
  }>;
  project: {
    id: number;
    name: string;
    description: string | null;
    industry: string | null;
  };
}

function formatNumber(num: number): string {
  return new Intl.NumberFormat("ru-RU").format(num);
}

function parseEditableSection(content: string, sectionName: string): any[] {
  const sectionRegex = new RegExp(
    `<!-- EDITABLE_${sectionName}_START -->([\\s\\S]*?)<!-- EDITABLE_${sectionName}_END -->`,
    "i"
  );
  const match = content.match(sectionRegex);

  if (!match) return [];

  const sectionContent = match[1];
  const items: any[] = [];

  // –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const lines = sectionContent.split("\n").filter((line) => line.trim());

  for (const line of lines) {
    if (line.includes("|") && !line.includes("---")) {
      // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
      const cells = line
        .split("|")
        .map((cell) => cell.trim())
        .filter((cell) => cell);
      if (cells.length >= 3) {
        if (sectionName === "COMPETITORS") {
          items.push({
            id: parseInt(cells[0]) || 0,
            username: cells[1] || "",
            full_name: cells[2] || null,
            notes: cells[3] || null,
            is_active: cells[4] === "‚úÖ" || cells[4] === "true",
          });
        } else if (sectionName === "HASHTAGS") {
          items.push({
            id: parseInt(cells[0]) || 0,
            tag_name: cells[1] || "",
            notes: cells[2] || null,
            is_active: cells[3] === "‚úÖ" || cells[3] === "true",
          });
        }
      }
    }
  }

  return items;
}

function slugify(name: string, projectId: number): string {
  const map: Record<string, string> = {
    –∞: "a",
    –±: "b",
    –≤: "v",
    –≥: "g",
    –¥: "d",
    –µ: "e",
    —ë: "e",
    –∂: "zh",
    –∑: "z",
    –∏: "i",
    –π: "y",
    –∫: "k",
    –ª: "l",
    –º: "m",
    –Ω: "n",
    –æ: "o",
    –ø: "p",
    —Ä: "r",
    —Å: "s",
    —Ç: "t",
    —É: "u",
    —Ñ: "f",
    —Ö: "h",
    —Ü: "c",
    —á: "ch",
    —à: "sh",
    —â: "shch",
    —ä: "",
    —ã: "y",
    —å: "",
    —ç: "e",
    —é: "yu",
    —è: "ya",
  };
  const transliterated = name
    .split("")
    .map((ch) => {
      const lower = ch.toLowerCase();
      if (map[lower]) return map[lower];
      if (/[a-z0-9]/i.test(ch)) return ch;
      return "-";
    })
    .join("");
  let slug = transliterated
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/^-+|-+$/g, "")
    .replace(/-+/g, "-");
  if (!slug) slug = String(projectId);
  return slug;
}

async function syncFromObsidianToDB(projectId: number): Promise<void> {
  console.log(
    `üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ Obsidian –≤ –ë–î –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}...`
  );

  await initializeDBConnection();
  const db = getDB();

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
  const projectInfo = await db
    .select()
    .from(projectsTable)
    .where(eq(projectsTable.id, projectId))
    .limit(1);

  if (!projectInfo.length) {
    console.error(`‚ùå –ü—Ä–æ–µ–∫—Ç —Å ID ${projectId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return;
  }

  const project = projectInfo[0];
  const projectSlug = slugify(project.name, projectId);

  // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –¥–∞—à–±–æ—Ä–¥–∞
  const dashboardPath = path.join(
    obsidianPath,
    "content-factory",
    `project-${projectSlug}`,
    "dashboard.md"
  );

  if (!fs.existsSync(dashboardPath)) {
    console.error(`‚ùå –§–∞–π–ª –¥–∞—à–±–æ—Ä–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${dashboardPath}`);
    return;
  }

  const dashboardContent = fs.readFileSync(dashboardPath, "utf8");

  // –ü–∞—Ä—Å–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ —Å–µ–∫—Ü–∏–∏
  const editableCompetitors = parseEditableSection(
    dashboardContent,
    "COMPETITORS"
  );
  const editableHashtags = parseEditableSection(dashboardContent, "HASHTAGS");

  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
  for (const competitor of editableCompetitors) {
    if (competitor.id > 0) {
      await db
        .update(competitorsTable)
        .set({
          username: competitor.username,
          full_name: competitor.full_name,
          notes: competitor.notes,
          is_active: competitor.is_active,
          updated_at: new Date(),
        })
        .where(eq(competitorsTable.id, competitor.id));

      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç: ${competitor.username}`);
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ö—ç—à—Ç–µ–≥–∏
  for (const hashtag of editableHashtags) {
    if (hashtag.id > 0) {
      await db
        .update(hashtagsTable)
        .set({
          tag_name: hashtag.tag_name,
          notes: hashtag.notes,
          is_active: hashtag.is_active,
          updated_at: new Date(),
        })
        .where(eq(hashtagsTable.id, hashtag.id));

      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ö—ç—à—Ç–µ–≥: #${hashtag.tag_name}`);
    }
  }

  await closeDBConnection();
  console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}`);
}

async function createEditableDashboard(projectId: number): Promise<void> {
  console.log(
    `üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}...`
  );

  await initializeDBConnection();
  const db = getDB();

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
  const projectInfo = await db
    .select()
    .from(projectsTable)
    .where(eq(projectsTable.id, projectId))
    .limit(1);

  if (!projectInfo.length) {
    console.error(`‚ùå –ü—Ä–æ–µ–∫—Ç —Å ID ${projectId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return;
  }

  const project = projectInfo[0];

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
  const competitors = await db
    .select()
    .from(competitorsTable)
    .where(eq(competitorsTable.project_id, projectId))
    .orderBy(competitorsTable.username);

  // –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à—Ç–µ–≥–∏
  const hashtags = await db
    .select()
    .from(hashtagsTable)
    .where(eq(hashtagsTable.project_id, projectId))
    .orderBy(hashtagsTable.tag_name);

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const stats = await db
    .select({
      totalReels: sql<number>`count(${reelsTable.id})`,
      totalViews: sql<number>`sum(${reelsTable.views_count})`,
      totalLikes: sql<number>`sum(${reelsTable.likes_count})`,
      avgViews: sql<number>`avg(${reelsTable.views_count})`,
    })
    .from(reelsTable)
    .where(eq(reelsTable.project_id, projectId));

  const projectSlug = slugify(project.name, projectId);

  const projectDir = path.join(
    obsidianPath,
    "content-factory",
    `project-${projectSlug}`
  );

  fs.mkdirSync(projectDir, { recursive: true });

  // –°–æ–∑–¥–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –¥–∞—à–±–æ—Ä–¥
  const editableDashboard = `# üè≠ –†–ï–î–ê–ö–¢–ò–†–£–ï–ú–´–ô –î–ê–®–ë–û–†–î: ${project.name}

> **‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï:** –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ —Å–µ–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.  
> –ü–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ: \`bun run sync:from-obsidian ${projectId}\`

---

## üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)

| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ |
|---------|----------|
| üé¨ **–í—Å–µ–≥–æ Reels** | ${formatNumber(Number(stats[0]?.totalReels || 0))} |
| üëÄ **–û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã** | ${formatNumber(Number(stats[0]?.totalViews || 0))} |
| ‚ù§Ô∏è **–û–±—â–∏–µ –ª–∞–π–∫–∏** | ${formatNumber(Number(stats[0]?.totalLikes || 0))} |
| üìä **–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã** | ${formatNumber(Math.round(Number(stats[0]?.avgViews || 0)))} |

---

## üë• –ö–û–ù–ö–£–†–ï–ù–¢–´ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Å–µ–∫—Ü–∏—è)

> **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:** –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–∏–∂–µ. –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.

<!-- EDITABLE_COMPETITORS_START -->
| ID | Username | –ü–æ–ª–Ω–æ–µ –∏–º—è | –ó–∞–º–µ—Ç–∫–∏ | –ê–∫—Ç–∏–≤–µ–Ω |
|----|----------|------------|---------|---------|
${competitors
  .map(
    (comp) =>
      `| ${comp.id} | ${comp.username} | ${comp.full_name || ""} | ${comp.notes || ""} | ${comp.is_active ? "‚úÖ" : "‚ùå"} |`
  )
  .join("\n")}
<!-- EDITABLE_COMPETITORS_END -->

**–ö–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:**
- ‚úÖ = –∞–∫—Ç–∏–≤–µ–Ω, ‚ùå = –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
- –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ –∑–∞–º–µ—Ç–∫–∏
- –ù–ï –∏–∑–º–µ–Ω—è–π—Ç–µ ID –∏ Username –±–µ–∑ –∫—Ä–∞–π–Ω–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

---

## üè∑Ô∏è –•–≠–®–¢–ï–ì–ò (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Å–µ–∫—Ü–∏—è)

> **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:** –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–∏–∂–µ. –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.

<!-- EDITABLE_HASHTAGS_START -->
| ID | –•—ç—à—Ç–µ–≥ | –ó–∞–º–µ—Ç–∫–∏ | –ê–∫—Ç–∏–≤–µ–Ω |
|----|--------|---------|---------|
${hashtags
  .map(
    (tag) =>
      `| ${tag.id} | ${tag.tag_name} | ${tag.notes || ""} | ${tag.is_active ? "‚úÖ" : "‚ùå"} |`
  )
  .join("\n")}
<!-- EDITABLE_HASHTAGS_END -->

**–ö–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:**
- ‚úÖ = –∞–∫—Ç–∏–≤–µ–Ω, ‚ùå = –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
- –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –∑–∞–º–µ—Ç–∫–∏
- –ù–ï –∏–∑–º–µ–Ω—è–π—Ç–µ ID –±–µ–∑ –∫—Ä–∞–π–Ω–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
- –•—ç—à—Ç–µ–≥–∏ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ #

---

## üîÑ –ö–û–ú–ê–ù–î–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò

### –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
\`\`\`bash
# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ Obsidian –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
bun run sync:from-obsidian ${projectId}
\`\`\`

### –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
\`\`\`bash
# –û–±–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bun run sync:to-obsidian ${projectId}
\`\`\`

### –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
\`\`\`bash
# –î–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
bun run sync:bidirectional ${projectId}
\`\`\`

---

## üìù –ñ–£–†–ù–ê–õ –ò–ó–ú–ï–ù–ï–ù–ò–ô

**–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:** ${new Date().toLocaleString("ru-RU")}

**–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:**
- –°–æ–∑–¥–∞–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –¥–∞—à–±–æ—Ä–¥
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
- –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é

---

## ‚ö†Ô∏è –í–ê–ñ–ù–´–ï –ó–ê–ú–ï–ß–ê–ù–ò–Ø

1. **–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ:** –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Git
2. **–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã:** –ü—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–º–µ—é—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
3. **–í–∞–ª–∏–¥–∞—Ü–∏—è:** –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã
4. **–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:** –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –ª–æ–≥

---

*–§–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${new Date().toLocaleString("ru-RU")}*  
*–ü—Ä–æ–µ–∫—Ç ID: ${projectId} | –°—Ç–∞—Ç—É—Å: üü¢ –ì–æ—Ç–æ–≤ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é*`;

  const editablePath = path.join(projectDir, "editable-dashboard.md");
  fs.writeFileSync(editablePath, editableDashboard, "utf8");

  console.log(`‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –¥–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω: ${editablePath}`);
  console.log(`üë• –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${competitors.length}`);
  console.log(`üè∑Ô∏è –•—ç—à—Ç–µ–≥–æ–≤: ${hashtags.length}`);

  await closeDBConnection();
}

async function main() {
  const command = process.argv[2];
  const projectIdArg = process.argv[3];

  if (!projectIdArg) {
    console.error("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø—Ä–æ–µ–∫—Ç–∞");
    console.log("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:");
    console.log(
      "  bun run sync:from-obsidian <PROJECT_ID>  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ Obsidian –≤ –ë–î"
    );
    console.log(
      "  bun run sync:to-obsidian <PROJECT_ID>    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"
    );
    console.log(
      "  bun run sync:bidirectional <PROJECT_ID>  # –î–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"
    );
    process.exit(1);
  }

  const projectId = parseInt(projectIdArg);
  if (isNaN(projectId)) {
    console.error("‚ùå ID –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º");
    process.exit(1);
  }

  try {
    switch (command) {
      case "from-obsidian":
        await syncFromObsidianToDB(projectId);
        break;
      case "to-obsidian":
        await createEditableDashboard(projectId);
        break;
      case "bidirectional":
        await createEditableDashboard(projectId);
        await syncFromObsidianToDB(projectId);
        break;
      default:
        console.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:", command);
        process.exit(1);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
    process.exit(1);
  }
}

if (import.meta.main) {
  main();
}
