#!/usr/bin/env bun

/**
 * üîÑ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 * 
 * –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä—ã—Ö –ª–æ–∫–∞—Ü–∏–π –≤ /Users/playra/vaults/999
 * –∏ —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ —Å—Ç–∞—Ä—ã—Ö –º–µ—Å—Ç
 */

import fs from "fs";
import path from "path";

const OLD_PATHS = [
  "/Users/playra/Library/Mobile Documents/iCloud~md~obsidian/Documents/999",
  "/Users/playra/instagram-scraper-bot/content-factory"
];

const NEW_VAULT_PATH = "/Users/playra/vaults/999";

function ensureDirectoryExists(dirPath: string): void {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dirPath}`);
  }
}

function copyDirectory(source: string, destination: string): void {
  if (!fs.existsSync(source)) {
    console.log(`‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${source}`);
    return;
  }

  ensureDirectoryExists(destination);

  const items = fs.readdirSync(source);
  
  for (const item of items) {
    const sourcePath = path.join(source, item);
    const destPath = path.join(destination, item);
    
    const stat = fs.statSync(sourcePath);
    
    if (stat.isDirectory()) {
      copyDirectory(sourcePath, destPath);
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
      if (fs.existsSync(destPath)) {
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const sourceStats = fs.statSync(sourcePath);
        const destStats = fs.statSync(destPath);
        
        if (sourceStats.mtime > destStats.mtime) {
          fs.copyFileSync(sourcePath, destPath);
          console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: ${item}`);
        } else {
          console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω (–∞–∫—Ç—É–∞–ª—å–Ω—ã–π): ${item}`);
        }
      } else {
        fs.copyFileSync(sourcePath, destPath);
        console.log(`üìÅ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${item}`);
      }
    }
  }
}

function removeDirectory(dirPath: string): void {
  if (fs.existsSync(dirPath)) {
    fs.rmSync(dirPath, { recursive: true, force: true });
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dirPath}`);
  }
}

function migrateData(): void {
  console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...");
  console.log(`üìç –¶–µ–ª–µ–≤–æ–π –ø—É—Ç—å: ${NEW_VAULT_PATH}`);

  // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ
  ensureDirectoryExists(NEW_VAULT_PATH);
  ensureDirectoryExists(path.join(NEW_VAULT_PATH, "content-factory"));

  // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö –ª–æ–∫–∞—Ü–∏–π
  for (const oldPath of OLD_PATHS) {
    console.log(`\nüì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${oldPath}`);
    
    if (fs.existsSync(oldPath)) {
      // –ï—Å–ª–∏ —ç—Ç–æ content-factory –≤ –ø—Ä–æ–µ–∫—Ç–µ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      if (oldPath.includes("instagram-scraper-bot")) {
        const contentFactorySource = oldPath;
        const contentFactoryDest = path.join(NEW_VAULT_PATH, "content-factory");
        copyDirectory(contentFactorySource, contentFactoryDest);
      } else {
        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ä—ã–π vault, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        copyDirectory(oldPath, NEW_VAULT_PATH);
      }
    }
  }

  console.log("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
}

function cleanupOldData(): void {
  console.log("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");

  // –£–¥–∞–ª—è–µ–º content-factory –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ vault)
  const projectContentFactory = "/Users/playra/instagram-scraper-bot/content-factory";
  if (fs.existsSync(projectContentFactory)) {
    removeDirectory(projectContentFactory);
  }

  // –ù–ï —É–¥–∞–ª—è–µ–º iCloud vault, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
  // –¢–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
  const iCloudPath = "/Users/playra/Library/Mobile Documents/iCloud~md~obsidian/Documents/999";
  if (fs.existsSync(iCloudPath)) {
    console.log(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°—Ç–∞—Ä—ã–π iCloud vault –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${iCloudPath}`);
    console.log(`   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏`);
  }

  console.log("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
}

function createVaultStructure(): void {
  console.log("\nüèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã vault...");

  const vaultStructure = [
    "content-factory",
    "content-factory/üè≠-Content-Factory",
    "content-factory/ü••-coco-age-analytics", 
    "content-factory/Coco-Age-Analytics",
    "content-factory/üìä-DataEdit-Tables",
  ];

  for (const dir of vaultStructure) {
    const fullPath = path.join(NEW_VAULT_PATH, dir);
    ensureDirectoryExists(fullPath);
  }

  console.log("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ vault —Å–æ–∑–¥–∞–Ω–∞!");
}

function verifyMigration(): void {
  console.log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏...");

  const expectedFiles = [
    "content-factory/ü••‚ú® COCO AGE - –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ.md",
    "content-factory/ü••‚ú® COCO AGE - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.md",
    "content-factory/üè≠-Content-Factory/üè≠ –ö–æ–Ω—Ç–µ–Ω—Ç-–∑–∞–≤–æ–¥ - –ì–ª–∞–≤–Ω–∞—è.md",
    "content-factory/üìä-DataEdit-Tables/Top-Content-Analysis.md",
  ];

  let allFilesExist = true;

  for (const file of expectedFiles) {
    const fullPath = path.join(NEW_VAULT_PATH, file);
    if (fs.existsSync(fullPath)) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω: ${file}`);
    } else {
      console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${file}`);
      allFilesExist = false;
    }
  }

  if (allFilesExist) {
    console.log("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ.");
  } else {
    console.log("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é.");
  }
}

function updateConfigFiles(): void {
  console.log("\n‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ .env —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω
  const envPath = "/Users/playra/instagram-scraper-bot/.env";
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, "utf8");
    if (envContent.includes("/Users/playra/vaults/999")) {
      console.log("‚úÖ .env —Ñ–∞–π–ª —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω");
    } else {
      console.log("‚ö†Ô∏è .env —Ñ–∞–π–ª —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
    }
  }

  console.log("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞!");
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main(): void {
  console.log("üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• COCO AGE –í –ü–†–ê–í–ò–õ–¨–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï");
  console.log("=" .repeat(60));

  try {
    createVaultStructure();
    migrateData();
    cleanupOldData();
    updateConfigFiles();
    verifyMigration();

    console.log("\n" + "=" .repeat(60));
    console.log("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!");
    console.log(`üìç –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å –≤: ${NEW_VAULT_PATH}`);
    console.log("üîÑ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º –ø—É—Ç–µ–º");
    console.log("=" .repeat(60));

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main();
