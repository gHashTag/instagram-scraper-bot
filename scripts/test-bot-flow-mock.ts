/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram –±–æ—Ç–æ–º
 * —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–∫–æ–≤ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Telegram API
 */

import { Telegraf } from "telegraf";
import { ScraperBotContext } from "../src/types";
import { NeonAdapter } from "../src/adapters/neon-adapter";
import * as dotenv from "dotenv";

dotenv.config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN || "";

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if (!BOT_TOKEN) {
  console.error("–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ");
  process.exit(1);
}

// –¢–∏–ø—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —à–∞–≥–æ–≤
interface TestStepCommand {
  action: "command";
  command: string;
}

interface TestStepText {
  action: "text";
  text: string;
}

interface TestStepButton {
  action: "button";
  data: string;
}

type TestStep = TestStepCommand | TestStepText | TestStepButton;

interface TestScenario {
  name: string;
  steps: TestStep[];
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
const testScenarios: TestScenario[] = [
  {
    name: '–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã"',
    steps: [
      { action: "command", command: "/start" },
      { action: "text", text: "üîç –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã" },
      { action: "button", data: "exit_scene" },
    ],
  },
  {
    name: "–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞",
    steps: [
      { action: "text", text: "üîç –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã" },
      { action: "button", data: "add_competitor_3" },
      { action: "text", text: "https://www.instagram.com/example" },
      { action: "button", data: "back_to_projects" },
    ],
  },
];

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–∫–æ–≤...");

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
  const bot = new Telegraf<ScraperBotContext>(BOT_TOKEN);

  // –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  const storageAdapter = new NeonAdapter();

  // –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
  bot.use((ctx, next) => {
    console.log("[DEBUG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –≤ middleware");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ctx.session, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!ctx.session) {
      console.log("[DEBUG] ctx.session –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º");
      (ctx as any).session = {
        user: null,
        __scenes: {},
      };
    }

    // –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    console.log("[DEBUG] –¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", ctx.updateType);
    if (
      ctx.updateType === "callback_query" &&
      "callbackQuery" in ctx &&
      ctx.callbackQuery
    ) {
      console.log(
        "[DEBUG] Callback query data:",
        (ctx.callbackQuery as any).data
      );
    }

    return next();
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–µ—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
  bot.use((ctx, next) => {
    ctx.storage = storageAdapter;
    return next();
  });

  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
  const { setupInstagramScraperBot } = await import("../index.js");

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
  setupInstagramScraperBot(bot, storageAdapter, {
    telegramBotToken: BOT_TOKEN,
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  await storageAdapter.initialize();

  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
  for (const scenario of testScenarios) {
    console.log(`\n=== –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenario.name} ===`);

    for (const step of scenario.steps) {
      switch (step.action) {
        case "command":
          console.log(`[USER] –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${step.command}`);
          await bot.handleUpdate({
            update_id: Math.floor(Math.random() * 1000000),
            message: {
              message_id: Math.floor(Math.random() * 1000000),
              date: Math.floor(Date.now() / 1000),
              text: step.command,
              entities: [
                { offset: 0, length: step.command.length, type: "bot_command" },
              ],
              chat: {
                id: 144022504,
                type: "private",
                first_name: "Dmitrii",
                last_name: "Neuro–°oder",
                username: "neuro_sage",
              },
              from: {
                id: 144022504,
                is_bot: false,
                first_name: "Dmitrii",
                last_name: "Neuro–°oder",
                username: "neuro_sage",
                language_code: "ru",
              },
            },
          });
          break;
        case "text":
          console.log(`[USER] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞: ${step.text}`);
          await bot.handleUpdate({
            update_id: Math.floor(Math.random() * 1000000),
            message: {
              message_id: Math.floor(Math.random() * 1000000),
              date: Math.floor(Date.now() / 1000),
              text: step.text,
              chat: {
                id: 144022504,
                type: "private",
                first_name: "Dmitrii",
                last_name: "Neuro–°oder",
                username: "neuro_sage",
              },
              from: {
                id: 144022504,
                is_bot: false,
                first_name: "Dmitrii",
                last_name: "Neuro–°oder",
                username: "neuro_sage",
                language_code: "ru",
              },
            },
          });
          break;
        case "button":
          console.log(`[USER] –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏: ${step.data}`);
          try {
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è callback_query
            const update = {
              update_id: Math.floor(Math.random() * 1000000),
              callback_query: {
                id: Math.random().toString(36).substring(2, 15),
                from: {
                  id: 144022504,
                  is_bot: false,
                  first_name: "Dmitrii",
                  last_name: "Neuro–°oder",
                  username: "neuro_sage",
                  language_code: "ru",
                },
                message: {
                  message_id: Math.floor(Math.random() * 1000000),
                  date: Math.floor(Date.now() / 1000),
                  chat: {
                    id: 144022504,
                    type: "private",
                    first_name: "Dmitrii",
                    last_name: "Neuro–°oder",
                    username: "neuro_sage",
                  },
                  text: "–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞",
                },
                chat_instance: Math.random().toString(36).substring(2, 15),
                data: step.data,
              },
            };

            console.log(
              `[DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ callback_query —Å –¥–∞–Ω–Ω—ã–º–∏: ${step.data}`
            );
            console.log(
              `[DEBUG] –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`,
              JSON.stringify(update, null, 2)
            );

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            await bot.handleUpdate(update as any);
            console.log(
              `[DEBUG] –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: ${step.data}`
            );
          } catch (error) {
            console.error(
              `[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É ${step.data}:`,
              error
            );
          }
          break;
        default:
          console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${(step as any).action}`);
      }

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
      await new Promise((resolve) => setTimeout(resolve, 1000));
    }

    console.log(`=== –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω: ${scenario.name} ===`);
  }

  console.log("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  await storageAdapter.close();

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
  bot.stop();

  process.exit(0);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch((error) => {
  console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
  process.exit(1);
});
