#!/usr/bin/env tsx

/**
 * üöÄ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ GitHub Action –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç workflow –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Obsidian vault –≤—Ä—É—á–Ω—É—é
 */

import dotenv from "dotenv";
import path from "path";
import { fileURLToPath } from "url";
import fs from "fs";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const devEnvPath = path.join(__dirname, "../.env.development");
const prodEnvPath = path.join(__dirname, "../.env");

const dev = fs.existsSync(devEnvPath);
const envPath = dev ? devEnvPath : prodEnvPath;
dotenv.config({ path: envPath });

async function triggerGitHubAction(): Promise<void> {
  console.log("üöÄ –ó–∞–ø—É—Å–∫ GitHub Action –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...");
  
  const githubToken = process.env.GITHUB_TOKEN;
  
  if (!githubToken) {
    console.error("‚ùå GITHUB_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
    console.log("üí° –°–æ–∑–¥–∞–π—Ç–µ Personal Access Token:");
    console.log("   1. GitHub ‚Üí Settings ‚Üí Developer settings ‚Üí Personal access tokens");
    console.log("   2. Generate new token (classic)");
    console.log("   3. –í—ã–±–µ—Ä–∏—Ç–µ scopes: repo, workflow");
    console.log("   4. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env.development");
    return;
  }
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ workflow
    const workflowResponse = await fetch(
      'https://api.github.com/repos/gHashTag/instagram-scraper/actions/workflows',
      {
        headers: {
          'Authorization': `Bearer ${githubToken}`,
          'Accept': 'application/vnd.github.v3+json',
          'User-Agent': 'Coco-Age-Test-Script'
        }
      }
    );
    
    if (!workflowResponse.ok) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è workflows:", await workflowResponse.text());
      return;
    }
    
    const workflows = await workflowResponse.json();
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ workflows: ${workflows.total_count}`);
    
    // –ò—â–µ–º –Ω–∞—à workflow
    const obsidianWorkflow = workflows.workflows.find((w: any) => 
      w.name === 'üîÑ Update Obsidian Vault Daily'
    );
    
    if (!obsidianWorkflow) {
      console.log("‚ö†Ô∏è Workflow 'üîÑ Update Obsidian Vault Daily' –Ω–µ –Ω–∞–π–¥–µ–Ω");
      console.log("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ workflows:");
      workflows.workflows.forEach((w: any) => {
        console.log(`   ‚Ä¢ ${w.name} (${w.state})`);
      });
      
      console.log("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
      console.log("   ‚Ä¢ Workflow —Ñ–∞–π–ª –µ—â–µ –Ω–µ –∑–∞–∫–æ–º–º–∏—á–µ–Ω");
      console.log("   ‚Ä¢ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏");
      console.log("   ‚Ä¢ –ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å push –≤ main –≤–µ—Ç–∫—É");
      return;
    }
    
    console.log(`‚úÖ Workflow –Ω–∞–π–¥–µ–Ω: ${obsidianWorkflow.name}`);
    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${obsidianWorkflow.state}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º workflow
    const dispatchResponse = await fetch(
      `https://api.github.com/repos/gHashTag/instagram-scraper/actions/workflows/${obsidianWorkflow.id}/dispatches`,
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${githubToken}`,
          'Accept': 'application/vnd.github.v3+json',
          'Content-Type': 'application/json',
          'User-Agent': 'Coco-Age-Test-Script'
        },
        body: JSON.stringify({
          ref: 'main',
          inputs: {
            project_id: '1'
          }
        })
      }
    );
    
    if (dispatchResponse.ok) {
      console.log("üéâ GitHub Action —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");
      console.log("üì± –û–∂–∏–¥–∞–π—Ç–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã");
      console.log("üîó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: https://github.com/gHashTag/instagram-scraper/actions");
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏
      console.log("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ workflow...");
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      await checkRecentRuns(githubToken, obsidianWorkflow.id);
      
    } else {
      const errorText = await dispatchResponse.text();
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ workflow:", errorText);
      
      if (dispatchResponse.status === 422) {
        console.log("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
        console.log("   ‚Ä¢ Workflow –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç workflow_dispatch");
        console.log("   ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã");
        console.log("   ‚Ä¢ Workflow –æ—Ç–∫–ª—é—á–µ–Ω");
      }
    }
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å GitHub API:", error);
  }
}

async function checkRecentRuns(githubToken: string, workflowId: number): Promise<void> {
  try {
    const runsResponse = await fetch(
      `https://api.github.com/repos/gHashTag/instagram-scraper/actions/workflows/${workflowId}/runs?per_page=5`,
      {
        headers: {
          'Authorization': `Bearer ${githubToken}`,
          'Accept': 'application/vnd.github.v3+json',
          'User-Agent': 'Coco-Age-Test-Script'
        }
      }
    );
    
    if (runsResponse.ok) {
      const runs = await runsResponse.json();
      console.log(`\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏ (${runs.total_count} –≤—Å–µ–≥–æ):`);
      
      runs.workflow_runs.slice(0, 3).forEach((run: any, index: number) => {
        const status = run.status === 'completed' ? 
          (run.conclusion === 'success' ? '‚úÖ' : '‚ùå') : 'üîÑ';
        
        console.log(`   ${status} ${run.created_at.split('T')[0]} - ${run.status} (${run.conclusion || 'running'})`);
        
        if (index === 0) {
          console.log(`      üîó ${run.html_url}`);
        }
      });
    }
  } catch (error) {
    console.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–∞—Ö");
  }
}

async function createCommitToTriggerWorkflow(): Promise<void> {
  console.log("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–∏—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ workflow...");
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    const testFilePath = path.join(__dirname, "../vaults/coco-age/test-trigger.md");
    const testContent = `# üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä

**–í—Ä–µ–º—è:** ${new Date().toISOString()}

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ GitHub Actions.

## üéØ –¶–µ–ª—å
–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

---

*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*
`;
    
    fs.writeFileSync(testFilePath, testContent, 'utf8');
    console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω");
    
    console.log("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:");
    console.log("1. git add .");
    console.log("2. git commit -m 'üß™ Test GitHub Actions trigger'");
    console.log("3. git push");
    console.log("4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: https://github.com/gHashTag/instagram-scraper/actions");
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:", error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
if (import.meta.url === `file://${process.argv[1]}`) {
  console.log("üß™ GitHub Actions Test Trigger");
  console.log("=" .repeat(50));
  
  const args = process.argv.slice(2);
  
  if (args.includes('--commit')) {
    createCommitToTriggerWorkflow();
  } else {
    triggerGitHubAction().catch((error) => {
      console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
      process.exit(1);
    });
  }
}
