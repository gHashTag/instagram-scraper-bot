#!/usr/bin/env tsx

/**
 * üß™ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã Coco Age
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ vault, Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, GitHub Pages
 */

import dotenv from "dotenv";
import path from "path";
import { fileURLToPath } from "url";
import fs from "fs";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const devEnvPath = path.join(__dirname, "../.env.development");
const prodEnvPath = path.join(__dirname, "../.env");

const dev = fs.existsSync(devEnvPath);
const envPath = dev ? devEnvPath : prodEnvPath;
dotenv.config({ path: envPath });

interface TestResult {
  name: string;
  status: 'success' | 'error' | 'warning';
  message: string;
  details?: string;
}

async function testFullSystem(): Promise<void> {
  console.log("üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã Coco Age");
  console.log("=" .repeat(60));
  
  const results: TestResult[] = [];
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  console.log("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...");
  results.push(await testEnvironmentVariables());
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã vault
  console.log("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Obsidian vault...");
  results.push(await testVaultStructure());
  
  // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  console.log("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...");
  results.push(await testTelegramNotifications());
  
  // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  console.log("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...");
  results.push(await testDataUpdate());
  
  // 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
  console.log("\n5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...");
  results.push(await createTestUpdate());
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log("\n" + "=" .repeat(60));
  console.log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø");
  console.log("=" .repeat(60));
  
  let successCount = 0;
  let errorCount = 0;
  let warningCount = 0;
  
  results.forEach((result, index) => {
    const emoji = result.status === 'success' ? '‚úÖ' : 
                  result.status === 'error' ? '‚ùå' : '‚ö†Ô∏è';
    
    console.log(`${emoji} ${index + 1}. ${result.name}: ${result.message}`);
    
    if (result.details) {
      console.log(`   ${result.details}`);
    }
    
    if (result.status === 'success') successCount++;
    else if (result.status === 'error') errorCount++;
    else warningCount++;
  });
  
  console.log("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
  console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${warningCount}`);
  console.log(`‚ùå –û—à–∏–±–∫–∏: ${errorCount}`);
  
  if (errorCount === 0) {
    console.log("\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!");
    console.log("üì± –û–∂–∏–¥–∞–π—Ç–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏");
  } else {
    console.log("\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤");
  }
}

async function testEnvironmentVariables(): Promise<TestResult> {
  const requiredVars = ['DATABASE_URL', 'OPENAI_API_KEY', 'TELEGRAM_BOT_TOKEN'];
  const missing: string[] = [];
  
  requiredVars.forEach(varName => {
    if (!process.env[varName]) {
      missing.push(varName);
    }
  });
  
  if (missing.length === 0) {
    return {
      name: "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è",
      status: "success",
      message: "–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    };
  } else {
    return {
      name: "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è",
      status: "error",
      message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missing.join(', ')}`,
      details: "–î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ .env.development –∏–ª–∏ GitHub Secrets"
    };
  }
}

async function testVaultStructure(): Promise<TestResult> {
  const vaultPath = path.join(__dirname, "../vaults/coco-age");
  const requiredFiles = [
    "ü••‚ú® Coco Age - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞.md",
    "üìä –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.md",
    "üë• –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã.md",
    "üè∑Ô∏è –•—ç—à—Ç–µ–≥–∏.md",
    "TEAM_GUIDE.md"
  ];
  
  if (!fs.existsSync(vaultPath)) {
    return {
      name: "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ vault",
      status: "error",
      message: "–ü–∞–ø–∫–∞ vault –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
      details: `–û–∂–∏–¥–∞–µ—Ç—Å—è: ${vaultPath}`
    };
  }
  
  const missing: string[] = [];
  requiredFiles.forEach(file => {
    if (!fs.existsSync(path.join(vaultPath, file))) {
      missing.push(file);
    }
  });
  
  if (missing.length === 0) {
    const fileCount = fs.readdirSync(vaultPath).filter(f => f.endsWith('.md')).length;
    return {
      name: "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ vault",
      status: "success",
      message: `–í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ (${fileCount} —Ñ–∞–π–ª–æ–≤)`
    };
  } else {
    return {
      name: "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ vault",
      status: "warning",
      message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: ${missing.length}`,
      details: missing.join(', ')
    };
  }
}

async function testTelegramNotifications(): Promise<TestResult> {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  
  if (!botToken) {
    return {
      name: "Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
      status: "error",
      message: "TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    };
  }
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞
    const response = await fetch(`https://api.telegram.org/bot${botToken}/getMe`);
    const result = await response.json();
    
    if (!response.ok) {
      return {
        name: "Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        status: "error",
        message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞",
        details: result.description
      };
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const testMessage = {
      chat_id: "144022504",
      text: `üß™ *–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã Coco Age*

üìÖ *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}
üéØ *–°—Ç–∞—Ç—É—Å:* –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
ü§ñ *–ë–æ—Ç:* ${result.result.first_name} (@${result.result.username})

‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!

üîÑ –û–∂–∏–¥–∞–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –ú–°–ö`,
      parse_mode: "Markdown"
    };
    
    const sendResponse = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testMessage)
    });
    
    if (sendResponse.ok) {
      return {
        name: "Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        status: "success",
        message: `–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`,
        details: `–ë–æ—Ç: @${result.result.username}`
      };
    } else {
      return {
        name: "Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        status: "error",
        message: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"
      };
    }
  } catch (error) {
    return {
      name: "Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API",
      details: String(error)
    };
  }
}

async function testDataUpdate(): Promise<TestResult> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∫—Ä–∏–ø—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const syncScriptPath = path.join(__dirname, "sync-obsidian-system.ts");
    
    if (!fs.existsSync(syncScriptPath)) {
      return {
        name: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
        status: "error",
        message: "–°–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (!process.env.DATABASE_URL) {
      return {
        name: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
        status: "error",
        message: "DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
      };
    }
    
    return {
      name: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
      status: "success",
      message: "–°–∫—Ä–∏–ø—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ"
    };
  } catch (error) {
    return {
      name: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
      details: String(error)
    };
  }
}

async function createTestUpdate(): Promise<TestResult> {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ vault
    const vaultPath = path.join(__dirname, "../vaults/coco-age");
    const testFilePath = path.join(vaultPath, "test-update.md");
    
    const testContent = `# üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

**–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:** ${new Date().toLocaleString('ru-RU')}

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.

## üìä –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- ‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: –†–∞–±–æ—Ç–∞–µ—Ç
- ‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã
- ‚úÖ GitHub Actions: –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É

---

*–°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã*
`;
    
    fs.writeFileSync(testFilePath, testContent, 'utf8');
    
    return {
      name: "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
      status: "success",
      message: "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω",
      details: "–ì–æ—Ç–æ–≤ –∫ –∫–æ–º–º–∏—Ç—É –∏ push"
    };
  } catch (error) {
    return {
      name: "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
      status: "error",
      message: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞",
      details: String(error)
    };
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if (import.meta.url === `file://${process.argv[1]}`) {
  testFullSystem().catch((error) => {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
    process.exit(1);
  });
}
