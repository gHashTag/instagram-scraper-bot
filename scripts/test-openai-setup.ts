/**
 * üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê OPENAI –ê–ö–ö–ê–£–ù–¢–ê –ò API
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏ "billing_hard_limit_reached"
 * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —Ñ–æ—Ä—É–º–æ–≤ OpenAI 2024-2025
 */

import OpenAI from "openai";
import dotenv from "dotenv";

dotenv.config();

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

async function diagnoseOpenAISetup() {
  console.log("üîß –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê OPENAI –ê–ö–ö–ê–£–ù–¢–ê");
  console.log("=====================================");
  console.log("");

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
  const apiKey = process.env.OPENAI_API_KEY;
  console.log("üìã –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ê:");
  console.log(`‚úÖ API Key –Ω–∞–π–¥–µ–Ω: ${apiKey ? "–î–ê" : "–ù–ï–¢"}`);

  if (apiKey) {
    console.log(
      `üìù –¢–∏–ø –∫–ª—é—á–∞: ${apiKey.startsWith("sk-proj-") ? "PROJECT KEY (sk-proj-)" : "ORGANIZATION KEY (sk-)"}`
    );
    console.log(`üîë –ü–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã: ${apiKey.substring(0, 20)}...`);
    console.log(`üìè –î–ª–∏–Ω–∞ –∫–ª—é—á–∞: ${apiKey.length} —Å–∏–º–≤–æ–ª–æ–≤`);
  }
  console.log("");

  // 2. –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API
  try {
    console.log("üß™ –¢–ï–°–¢ –ë–ê–ó–û–í–û–ì–û –î–û–°–¢–£–ü–ê –ö API:");

    // –ü—Ä–æ–±—É–µ–º —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    const models = await openai.models.list();
    console.log("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç - –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã");
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: ${models.data.length}`);

    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ Whisper
    const whisperModels = models.data.filter((m) => m.id.includes("whisper"));
    console.log(
      `üé§ Whisper –º–æ–¥–µ–ª–∏: ${whisperModels.length > 0 ? whisperModels.map((m) => m.id).join(", ") : "–ù–ï –ù–ê–ô–î–ï–ù–´"}`
    );
  } catch (error: any) {
    console.log("‚ùå –û–®–ò–ë–ö–ê API:", error.message);

    if (error.message.includes("billing_hard_limit_reached")) {
      console.log("üö® –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: billing_hard_limit_reached");
      console.log("");
      console.log("üìã –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:");
      console.log("1. ‚ùå API –∫–ª—é—á –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏");
      console.log("2. ‚ùå –õ–∏–º–∏—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ");
      console.log("3. ‚ùå –õ–∏–º–∏—Ç –ø—Ä–æ–µ–∫—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ");
      console.log("4. ‚ùå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–π (user) –∫–ª—é—á –≤–º–µ—Å—Ç–æ project –∫–ª—é—á–∞");
      console.log("5. ‚ùå –ë—é–¥–∂–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ != —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞");
      console.log("6. ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞");
      console.log("");
    }

    if (error.message.includes("insufficient_quota")) {
      console.log("üö® –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: insufficient_quota");
      console.log("");
      console.log("üìã –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:");
      console.log("1. ‚ùå –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã ($9.39 –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)");
      console.log("2. ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏");
      console.log("3. ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –ø—Ä–æ–µ–∫—Ç–∞");
      console.log("4. ‚ùå –ö—Ä–µ–¥–∏—Ç—ã –∏—Å—Ç–µ–∫–ª–∏ (free credits expire after 3 months)");
      console.log("");
    }
  }

  // 3. –¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ (—Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π)
  try {
    console.log("üé§ –¢–ï–°–¢ –î–û–°–¢–£–ü–ê –ö WHISPER API:");

    // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testBlob = new Blob(["test"], { type: "audio/mpeg" });
    const testFile = new File([testBlob], "test.mp3", { type: "audio/mpeg" });

    await openai.audio.transcriptions.create({
      file: testFile,
      model: "whisper-1",
    });

    console.log("‚úÖ Whisper API –¥–æ—Å—Ç—É–ø–µ–Ω!");
  } catch (error: any) {
    console.log("‚ùå Whisper API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:", error.message);

    if (error.message.includes("billing")) {
      console.log("üö® –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê –° –ë–ò–õ–õ–ò–ù–ì–û–ú");
    }
  }

  console.log("");
  console.log("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –†–ï–®–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´:");
  console.log("=====================================");
  console.log("");
  console.log("1. üåê –ü–†–û–í–ï–†–¨–¢–ï –í –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°–ï:");
  console.log(
    "   ‚Üí https://platform.openai.com/settings/organization/billing/overview"
  );
  console.log("   ‚Üí –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–ª–∞–Ω—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ $9.39");
  console.log("   ‚Üí –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫—Ä–µ–¥–∏—Ç—ã –Ω–µ –∏—Å—Ç–µ–∫–ª–∏");
  console.log("");
  console.log("2. üè¢ –ü–†–û–í–ï–†–¨–¢–ï –õ–ò–ú–ò–¢–´ –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò:");
  console.log("   ‚Üí https://platform.openai.com/settings/organization/limits");
  console.log("   ‚Üí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–∏–º–∏—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ >= $20");
  console.log("");
  console.log("3. üìÅ –ü–†–û–í–ï–†–¨–¢–ï –õ–ò–ú–ò–¢–´ –ü–†–û–ï–ö–¢–ê:");
  console.log("   ‚Üí –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç ‚Üí Settings ‚Üí Limits");
  console.log("   ‚Üí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–∏–º–∏—Ç –ø—Ä–æ–µ–∫—Ç–∞ >= $10");
  console.log("   ‚Üí –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Whisper –º–æ–¥–µ–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã");
  console.log("");
  console.log("4. üîë –°–û–ó–î–ê–ô–¢–ï –ù–û–í–´–ô API –ö–õ–Æ–ß:");
  console.log("   ‚Üí –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –∫–ª—é—á");
  console.log("   ‚Üí –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π PROJECT –∫–ª—é—á (sk-proj-)");
  console.log("   ‚Üí –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è");
  console.log("");
  console.log("5. üí≥ –ï–°–õ–ò –ù–ò–ß–ï–ì–û –ù–ï –ü–û–ú–û–ì–ê–ï–¢:");
  console.log("   ‚Üí –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ $5-10 –∫—Ä–µ–¥–∏—Ç–æ–≤");
  console.log("   ‚Üí –í–∫–ª—é—á–∏—Ç–µ Auto-recharge");
  console.log("   ‚Üí –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É OpenAI");

  console.log("");
  console.log("üìû –ö–û–ù–¢–ê–ö–¢ –ü–û–î–î–ï–†–ñ–ö–ò:");
  console.log("   ‚Üí https://help.openai.com/");
  console.log('   ‚Üí –í–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞: –∫–Ω–æ–ø–∫–∞ "Help" –¥–ª—è —á–∞—Ç–∞');
  console.log("");
}

diagnoseOpenAISetup().catch(console.error);
