import dotenv from "dotenv";
import path from "path";
import { fileURLToPath } from "url";
import fs from "fs";
import { execSync } from "child_process";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const devEnvPath = path.join(__dirname, "../.env.development");
const prodEnvPath = path.join(__dirname, "../.env");

const dev = fs.existsSync(devEnvPath);
const envPath = dev ? devEnvPath : prodEnvPath;
dotenv.config({ path: envPath });

console.log(
  `ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö - ${new Date().toLocaleString("ru-RU")}`
);

async function runCommand(
  command: string,
  description: string
): Promise<boolean> {
  try {
    console.log(`\nüîÑ ${description}...`);
    const output = execSync(command, {
      encoding: "utf8",
      cwd: path.join(__dirname, ".."),
      stdio: "pipe",
    });
    console.log(`‚úÖ ${description} - –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
    if (output.trim()) {
      console.log(
        `üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: ${output.trim().split("\n").slice(-3).join("\n")}`
      );
    }
    return true;
  } catch (error: any) {
    console.error(`‚ùå ${description} - –æ—à–∏–±–∫–∞:`, error.message);
    return false;
  }
}

async function main() {
  const projectId = process.argv[2] || process.env.DEFAULT_PROJECT_ID || "1";

  console.log(`üìä –ü—Ä–æ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${projectId}`);

  // 1. –°–∫—Ä–∞–ø–∏–Ω–≥ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const scrapingSuccess = await runCommand(
    `bun run scrape:bulk ${projectId}`,
    "–°–∫—Ä–∞–ø–∏–Ω–≥ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"
  );

  if (!scrapingSuccess) {
    console.log("‚ö†Ô∏è –°–∫—Ä–∞–ø–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏");
  }

  // 2. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
  const reportSuccess = await runCommand(
    `bun run export:report ${projectId}`,
    "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º"
  );

  const hashtagsSuccess = await runCommand(
    `bun run export:hashtags ${projectId}`,
    "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º"
  );

  const overviewSuccess = await runCommand(
    `bun run create:overview ${projectId}`,
    "–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –æ–±–∑–æ—Ä–∞"
  );

  if (!reportSuccess && !hashtagsSuccess) {
    console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç—ã");
    process.exit(1);
  }

  // 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
  const publicPath = process.env.PUBLIC_REPORTS_PATH;
  if (publicPath && fs.existsSync(publicPath)) {
    const publicSuccess = await runCommand(
      `bun run export:public ${projectId}`,
      "–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –æ—Ç—á–µ—Ç–∞"
    );

    if (publicSuccess) {
      console.log(`üì¢ –ü—É–±–ª–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –≤: ${publicPath}`);
    }
  }

  console.log(
    `\nüéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - ${new Date().toLocaleString("ru-RU")}`
  );
  console.log(
    `üìä –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(Date.now() + 24 * 60 * 60 * 1000).toLocaleString("ru-RU")}`
  );
}

main().catch((err) => {
  console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", err);
  process.exit(1);
});
