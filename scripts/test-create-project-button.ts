#!/usr/bin/env bun

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç" –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ
 */

import { Telegraf, Scenes } from "telegraf";
import type { ScraperBotContext } from "../src/types";
import { NeonAdapter } from "../src/adapters/neon-adapter";
import { projectWizardScene } from "../src/scenes/project-wizard-scene";
// import { logger } from "../src/utils/logger"; // Unused

async function testCreateProjectButton() {
  console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç'...");

  // –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
  const storageAdapter = new NeonAdapter();
  await storageAdapter.initialize();
  console.log("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const testTelegramId = 999999999;
  let testUser;

  try {
    testUser = await storageAdapter.getUserByTelegramId(testTelegramId);
    if (!testUser) {
      testUser = await storageAdapter.createUser(
        testTelegramId,
        "test_create_project"
      );
      console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω");
    } else {
      console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω");
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    return;
  }

  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const bot = new Telegraf<ScraperBotContext>("test-token");

  // –°–æ–∑–¥–∞–µ–º stage —Å project wizard
  const stage = new Scenes.Stage<ScraperBotContext>([projectWizardScene]);

  // –î–æ–±–∞–≤–ª—è–µ–º middleware
  bot.use((ctx, next) => {
    ctx.storage = storageAdapter;
    ctx.scraperConfig = { telegramBotToken: "test-token" };
    return next();
  });

  bot.use(stage.middleware());

  try {
    console.log("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É projectWizardScene...");

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ü–µ–Ω—É
    const scene = projectWizardScene as any;

    console.log("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ü–µ–Ω—ã:", Object.keys(scene));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º action handlers
    if (scene.handler && scene.handler.handlers) {
      console.log(
        "üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ action handlers:",
        scene.handler.handlers.length
      );

      // –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ create_project
      let createProjectHandler = null;
      for (const handler of scene.handler.handlers) {
        console.log(
          "üîç Action handler:",
          handler.trigger || handler.predicate?.toString()
        );
        if (handler.trigger === "create_project") {
          createProjectHandler = handler.middleware;
          console.log("‚úÖ –ù–∞–π–¥–µ–Ω action handler create_project");
          break;
        }
      }

      if (createProjectHandler) {
        console.log("\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º action handler create_project...");

        // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ callback query
        const mockContext = {
          from: { id: testTelegramId, username: "test_create_project" },
          callbackQuery: {
            id: "test-callback-123",
            data: "create_project",
            from: { id: testTelegramId, username: "test_create_project" },
          },
          storage: storageAdapter,
          scraperConfig: { telegramBotToken: "test-token" },
          scene: {
            enter: () => console.log("üîÑ scene.enter() –≤—ã–∑–≤–∞–Ω"),
            leave: () => console.log("üîÑ scene.leave() –≤—ã–∑–≤–∞–Ω"),
            reenter: () => console.log("üîÑ scene.reenter() –≤—ã–∑–≤–∞–Ω"),
            session: {},
          },
          wizard: {
            state: {},
            next: () => {
              console.log("üîÑ wizard.next() –≤—ã–∑–≤–∞–Ω");
              return Promise.resolve();
            },
            selectStep: (step: number) => {
              console.log(`üîÑ wizard.selectStep(${step}) –≤—ã–∑–≤–∞–Ω`);
              return Promise.resolve();
            },
          },
          answerCbQuery: () => {
            console.log("üîÑ answerCbQuery() –≤—ã–∑–≤–∞–Ω");
            return Promise.resolve();
          },
          reply: (text: string, extra?: any) => {
            console.log("üîÑ reply() –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º:", text);
            if (extra) {
              console.log("üîÑ reply() extra:", JSON.stringify(extra, null, 2));
            }
            return Promise.resolve();
          },
          match: null,
        } as unknown as ScraperBotContext;

        await createProjectHandler(mockContext);
        console.log("‚úÖ Action handler –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
      } else {
        console.log("‚ùå Action handler create_project –ù–ï –ù–ê–ô–î–ï–ù!");
        console.log("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ action handlers:");
        for (const handler of scene.handler.handlers) {
          console.log(
            `  - ${handler.trigger || handler.predicate?.toString()}`
          );
        }
      }
    } else {
      console.log("‚ùå scene.handler.handlers –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      console.log(
        "üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ scene.handler:",
        scene.handler ? Object.keys(scene.handler) : "–Ω–µ –Ω–∞–π–¥–µ–Ω"
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–≥–∏ wizard'–∞
    if (scene.steps) {
      console.log("\nüìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ wizard'–∞:", scene.steps.length);

      if (scene.steps[1]) {
        console.log("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–π —à–∞–≥ (—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞)...");

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        const textContext = {
          from: { id: testTelegramId, username: "test_create_project" },
          message: { text: "Test Project Name" },
          storage: storageAdapter,
          scraperConfig: { telegramBotToken: "test-token" },
          scene: {
            enter: () => console.log("üîÑ scene.enter() –≤—ã–∑–≤–∞–Ω"),
            leave: () => console.log("üîÑ scene.leave() –≤—ã–∑–≤–∞–Ω"),
            reenter: () => console.log("üîÑ scene.reenter() –≤—ã–∑–≤–∞–Ω"),
            session: {},
          },
          wizard: {
            state: {},
            next: () => {
              console.log("üîÑ wizard.next() –≤—ã–∑–≤–∞–Ω");
              return Promise.resolve();
            },
            selectStep: (step: number) => {
              console.log(`üîÑ wizard.selectStep(${step}) –≤—ã–∑–≤–∞–Ω`);
              return Promise.resolve();
            },
          },
          reply: (text: string, _extra?: any) => {
            console.log("üîÑ reply() –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º:", text);
            return Promise.resolve();
          },
          match: null,
        } as unknown as ScraperBotContext;

        console.log("üöÄ –í—ã–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —à–∞–≥...");
        await scene.steps[1](textContext);
        console.log("‚úÖ –í—Ç–æ—Ä–æ–π —à–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ –ø—Ä–æ–µ–∫—Ç
        const projects = await storageAdapter.getProjectsByUserId(testUser.id);
        console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${projects.length}`);

        if (projects.length > 0) {
          console.log("‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω:", projects[projects.length - 1].name);

          // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
          await storageAdapter.deleteProject(projects[projects.length - 1].id);
          console.log("üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω");
        }
      }
    } else {
      console.log("‚ùå scene.steps –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    console.log("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ –±–æ—Ç–∞...");

    // –°–æ–∑–¥–∞–µ–º Update –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ callback query
    const callbackUpdate = {
      update_id: 123456,
      callback_query: {
        id: "test-callback-456",
        from: {
          id: testTelegramId,
          is_bot: false,
          first_name: "Test",
          username: "test_create_project",
        },
        message: {
          message_id: 1,
          date: Math.floor(Date.now() / 1000),
          chat: {
            id: testTelegramId,
            type: "private" as const,
            first_name: "Test",
            username: "test_create_project",
          },
          text: "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
          entities: [],
        },
        chat_instance: "test-instance",
        data: "create_project",
      },
    };

    console.log("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º callback query —á–µ—Ä–µ–∑ –±–æ—Ç–∞...");

    // –ú–æ–∫–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const originalSendMessage = bot.telegram.sendMessage;
    const originalAnswerCbQuery = bot.telegram.answerCbQuery;

    bot.telegram.sendMessage = async (...args) => {
      console.log("üîÑ bot.telegram.sendMessage –≤—ã–∑–≤–∞–Ω —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏:", args);
      return Promise.resolve({} as any);
    };

    bot.telegram.answerCbQuery = async (...args) => {
      console.log("üîÑ bot.telegram.answerCbQuery –≤—ã–∑–≤–∞–Ω —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏:", args);
      return Promise.resolve(true);
    };

    try {
      await bot.handleUpdate(callbackUpdate);
      console.log("‚úÖ Callback query –æ–±—Ä–∞–±–æ—Ç–∞–Ω –±–æ—Ç–æ–º");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query:", error);
    } finally {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
      bot.telegram.sendMessage = originalSendMessage;
      bot.telegram.answerCbQuery = originalAnswerCbQuery;
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
  } finally {
    // –û—á–∏—Å—Ç–∫–∞
    try {
      const projects = await storageAdapter.getProjectsByUserId(testUser.id);
      for (const project of projects) {
        if (project.name.includes("Test")) {
          await storageAdapter.deleteProject(project.id);
          console.log("üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç:", project.name);
        }
      }
    } catch (error) {
      console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:", error);
    }

    await storageAdapter.close();
    console.log("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCreateProjectButton().catch(console.error);
