#!/usr/bin/env tsx

/**
 * üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Obsidian vault
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
 * –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ Obsidian vault –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
 */

import dotenv from "dotenv";
import path from "path";
import { fileURLToPath } from "url";
import fs from "fs";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const devEnvPath = path.join(__dirname, "../.env.development");
const prodEnvPath = path.join(__dirname, "../.env");

const dev = fs.existsSync(devEnvPath);
const envPath = dev ? devEnvPath : prodEnvPath;
dotenv.config({ path: envPath });

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
import { syncObsidianSystem } from "./sync-obsidian-system.js";

interface ProjectConfig {
  id: number;
  name: string;
  enabled: boolean;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
const PROJECTS: ProjectConfig[] = [
  {
    id: 1,
    name: "Coco Age",
    enabled: true
  }
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ –±—É–¥—É—â–µ–º
];

async function dailySync(): Promise<void> {
  console.log("üîÑ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Obsidian vault...");
  console.log(`üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString("ru-RU")}`);
  
  const startTime = Date.now();
  let successCount = 0;
  let errorCount = 0;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!process.env.OBSIDIAN_VAULT_PATH) {
    console.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å OBSIDIAN_VAULT_PATH –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
    process.exit(1);
  }

  console.log(`üìÅ Vault path: ${process.env.OBSIDIAN_VAULT_PATH}`);
  console.log(`üóÉÔ∏è –ü—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${PROJECTS.filter(p => p.enabled).length}`);
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
  for (const project of PROJECTS) {
    if (!project.enabled) {
      console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–µ–∫—Ç ${project.name} (–æ—Ç–∫–ª—é—á–µ–Ω)`);
      continue;
    }

    try {
      console.log(`\nüîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${project.name} (ID: ${project.id})`);
      
      await syncObsidianSystem(project.id);
      
      successCount++;
      console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç ${project.name} —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω`);
      
    } catch (error) {
      errorCount++;
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}:`, error);
      
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –æ—à–∏–±–∫–µ
      continue;
    }
  }

  const endTime = Date.now();
  const duration = Math.round((endTime - startTime) / 1000);

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log("\n" + "=".repeat(50));
  console.log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò");
  console.log("=".repeat(50));
  console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${successCount} –ø—Ä–æ–µ–∫—Ç–æ–≤`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
  console.log(`üìÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${new Date().toLocaleString("ru-RU")}`);
  
  if (errorCount > 0) {
    console.log(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${errorCount} –ø—Ä–æ–µ–∫—Ç–æ–≤`);
    console.log("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º");
  }

  // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  await createSyncStatusFile(successCount, errorCount, duration);

  console.log("\nüéâ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
  
  // –í—ã—Ö–æ–¥–∏–º —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
  if (errorCount > 0) {
    process.exit(1);
  }
}

async function createSyncStatusFile(successCount: number, errorCount: number, duration: number): Promise<void> {
  const statusPath = path.join(process.env.OBSIDIAN_VAULT_PATH || "", "sync-status.json");
  
  const status = {
    lastSync: new Date().toISOString(),
    lastSyncFormatted: new Date().toLocaleString("ru-RU"),
    successCount,
    errorCount,
    duration,
    status: errorCount === 0 ? "success" : "partial_failure",
    projects: PROJECTS.filter(p => p.enabled).map(p => ({
      id: p.id,
      name: p.name,
      status: "synced" // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    }))
  };

  try {
    fs.writeFileSync(statusPath, JSON.stringify(status, null, 2), "utf8");
    console.log(`üìÑ –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${statusPath}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
if (import.meta.url === `file://${process.argv[1]}`) {
  dailySync().catch((error) => {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", error);
    process.exit(1);
  });
}
