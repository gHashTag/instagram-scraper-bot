/**
 * üóìÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç reels –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * 
 * –¢–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–≥–¥–∞ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã reels
 */

const { Pool } = require('pg');
require('dotenv').config();

async function checkReelsDates() {
  console.log('üóìÔ∏è –ü–†–û–í–ï–†–ö–ê –î–ê–¢ REELS –í –ë–ê–ó–ï –î–ê–ù–ù–´–•');
  console.log('=====================================\n');

  if (!process.env.DATABASE_URL) {
    console.log('‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
  });

  try {
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ\n');

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalResult = await client.query('SELECT COUNT(*) FROM reels');
    const totalReels = totalResult.rows[0].count;
    console.log(`üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê: ${totalReels} reels –≤ –±–∞–∑–µ\n`);

    if (totalReels === 0) {
      console.log('‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ù–ï–¢ REELS!');
      console.log('üîÑ –ù—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥');
      client.release();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è (–∫–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É)
    console.log('üìÖ –î–ê–¢–´ –°–û–ó–î–ê–ù–ò–Ø –í –ë–ê–ó–ï (created_at):');
    const createdDates = await client.query(`
      SELECT 
        DATE(created_at) as date,
        COUNT(*) as count
      FROM reels 
      GROUP BY DATE(created_at) 
      ORDER BY date DESC 
      LIMIT 10
    `);

    createdDates.rows.forEach(row => {
      const date = new Date(row.date);
      const isToday = date.toDateString() === new Date().toDateString();
      const isRecent = (new Date() - date) / (1000 * 60 * 60 * 24) <= 7; // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      
      console.log(`${isToday ? 'üü¢' : isRecent ? 'üü°' : 'üî¥'} ${row.date}: ${row.count} reels ${isToday ? '(–°–ï–ì–û–î–ù–Ø!)' : ''}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ (published_at)
    console.log('\nüìÖ –î–ê–¢–´ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –ü–û–°–¢–û–í (published_at):');
    const publishedDates = await client.query(`
      SELECT 
        DATE(published_at) as date,
        COUNT(*) as count
      FROM reels 
      WHERE published_at IS NOT NULL
      GROUP BY DATE(published_at) 
      ORDER BY date DESC 
      LIMIT 10
    `);

    if (publishedDates.rows.length === 0) {
      console.log('‚ùå –ù–ï–¢ –î–ê–ù–ù–´–• –û –î–ê–¢–ê–• –ü–£–ë–õ–ò–ö–ê–¶–ò–ò!');
    } else {
      publishedDates.rows.forEach(row => {
        const date = new Date(row.date);
        const daysAgo = Math.floor((new Date() - date) / (1000 * 60 * 60 * 24));
        const isRecent = daysAgo <= 30;
        
        console.log(`${isRecent ? '‚úÖ' : '‚ùå'} ${row.date}: ${row.count} reels (${daysAgo} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞ 2025 –≥–æ–¥
    console.log('\nüìÖ REELS –ó–ê 2025 –ì–û–î:');
    const year2025 = await client.query(`
      SELECT COUNT(*) as count
      FROM reels 
      WHERE published_at >= '2025-01-01'
    `);
    console.log(`‚úÖ –ó–∞ 2025 –≥–æ–¥: ${year2025.rows[0].count} reels`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    console.log('\nüìÖ REELS –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 30 –î–ù–ï–ô:');
    const last30Days = await client.query(`
      SELECT COUNT(*) as count
      FROM reels 
      WHERE published_at >= (NOW() - INTERVAL '30 days')
    `);
    console.log(`‚úÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: ${last30Days.rows[0].count} reels`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π
    const last14Days = await client.query(`
      SELECT COUNT(*) as count
      FROM reels 
      WHERE published_at >= (NOW() - INTERVAL '14 days')
    `);
    console.log(`‚úÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π: ${last14Days.rows[0].count} reels`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const today = await client.query(`
      SELECT COUNT(*) as count
      FROM reels 
      WHERE DATE(published_at) = CURRENT_DATE
    `);
    console.log(`‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è: ${today.rows[0].count} reels`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫—Ä–∞–ø–∏–Ω–≥
    console.log('\nüîÑ –ü–û–°–õ–ï–î–ù–ò–ô –°–ö–†–ê–ü–ò–ù–ì:');
    const lastScraped = await client.query(`
      SELECT 
        MAX(created_at) as last_scraped,
        COUNT(*) as count
      FROM reels 
      WHERE DATE(created_at) = CURRENT_DATE
    `);

    if (lastScraped.rows[0].count > 0) {
      console.log(`‚úÖ –°–µ–≥–æ–¥–Ω—è –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${lastScraped.rows[0].count} reels`);
      console.log(`‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫—Ä–∞–ø–∏–Ω–≥: ${lastScraped.rows[0].last_scraped}`);
    } else {
      console.log(`‚ùå –°–µ–≥–æ–¥–Ω—è —Å–∫—Ä–∞–ø–∏–Ω–≥ –ù–ï –í–´–ü–û–õ–ù–Ø–õ–°–Ø`);
    }

    // –¢–æ–ø-5 —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö reels
    console.log('\nüî• –¢–û–ü-5 –°–ê–ú–´–• –°–í–ï–ñ–ò–• REELS:');
    const freshReels = await client.query(`
      SELECT 
        author_username,
        views_count,
        published_at,
        created_at,
        source_type
      FROM reels 
      ORDER BY published_at DESC 
      LIMIT 5
    `);

    freshReels.rows.forEach((reel, index) => {
      const publishedDate = new Date(reel.published_at);
      const createdDate = new Date(reel.created_at);
      const daysAgo = Math.floor((new Date() - publishedDate) / (1000 * 60 * 60 * 24));
      
      console.log(`${index + 1}. @${reel.author_username}`);
      console.log(`   üìä ${reel.views_count?.toLocaleString() || 'N/A'} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`);
      console.log(`   üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: ${publishedDate.toLocaleDateString()} (${daysAgo} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)`);
      console.log(`   üíæ –î–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É: ${createdDate.toLocaleDateString()}`);
      console.log(`   üîó –ò—Å—Ç–æ—á–Ω–∏–∫: ${reel.source_type}`);
      console.log('');
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (2024 –≥–æ–¥)
    console.log('üóëÔ∏è –ü–†–û–í–ï–†–ö–ê –°–¢–ê–†–´–• –î–ê–ù–ù–´–•:');
    const old2024 = await client.query(`
      SELECT COUNT(*) as count
      FROM reels 
      WHERE published_at < '2025-01-01'
    `);
    
    if (old2024.rows[0].count > 0) {
      console.log(`‚ùå –ù–ê–ô–î–ï–ù–´ –°–¢–ê–†–´–ï –î–ê–ù–ù–´–ï: ${old2024.rows[0].count} reels –∏–∑ 2024 –≥–æ–¥–∞`);
      console.log(`üßπ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ`);
    } else {
      console.log(`‚úÖ –°—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - —Ç–æ–ª—å–∫–æ 2025 –≥–æ–¥`);
    }

    client.release();

    // –ò–¢–û–ì–û–í–´–ô –í–ï–†–î–ò–ö–¢
    console.log('\nüéØ –ò–¢–û–ì–û–í–´–ô –í–ï–†–î–ò–ö–¢:');
    console.log('==================');
    
    const recentCount = last30Days.rows[0].count;
    const todayCount = lastScraped.rows[0].count;
    const year2025Count = year2025.rows[0].count;
    
    if (todayCount > 0) {
      console.log('‚úÖ –°–ö–†–ê–ü–ò–ù–ì –°–ï–ì–û–î–ù–Ø –í–´–ü–û–õ–ù–Ø–õ–°–Ø');
    } else {
      console.log('‚ùå –°–ö–†–ê–ü–ò–ù–ì –°–ï–ì–û–î–ù–Ø –ù–ï –í–´–ü–û–õ–ù–Ø–õ–°–Ø');
    }
    
    if (recentCount >= 50) {
      console.log('‚úÖ –î–û–°–¢–ê–¢–û–ß–ù–û –°–í–ï–ñ–ò–• –î–ê–ù–ù–´–• (30 –¥–Ω–µ–π)');
    } else if (recentCount > 0) {
      console.log('‚ö†Ô∏è –ú–ê–õ–û –°–í–ï–ñ–ò–• –î–ê–ù–ù–´–• - –Ω—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥');
    } else {
      console.log('‚ùå –ù–ï–¢ –°–í–ï–ñ–ò–• –î–ê–ù–ù–´–• - —Å—Ä–æ—á–Ω–æ –Ω—É–∂–µ–Ω —Å–∫—Ä–∞–ø–∏–Ω–≥');
    }
    
    if (year2025Count === totalReels) {
      console.log('‚úÖ –í–°–ï –î–ê–ù–ù–´–ï –ó–ê 2025 –ì–û–î - —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç');
    } else {
      console.log('‚ö†Ô∏è –ï–°–¢–¨ –°–¢–ê–†–´–ï –î–ê–ù–ù–´–ï - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç:', error.message);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkReelsDates().catch(console.error);
