/**
 * üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
 */

require('dotenv').config();

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(level, message, data = null) {
  const timestamp = new Date().toLocaleTimeString();
  let color = colors.reset;
  let emoji = '';
  
  switch(level) {
    case 'info': color = colors.blue; emoji = '‚ÑπÔ∏è'; break;
    case 'success': color = colors.green; emoji = '‚úÖ'; break;
    case 'warning': color = colors.yellow; emoji = '‚ö†Ô∏è'; break;
    case 'error': color = colors.red; emoji = '‚ùå'; break;
    case 'debug': color = colors.cyan; emoji = 'üîç'; break;
  }
  
  console.log(`${color}[${timestamp}] ${emoji} ${message}${colors.reset}`);
  if (data) {
    console.log(`${colors.cyan}   Data:${colors.reset}`, data);
  }
}

async function runDiagnostic() {
  console.log(`${colors.bright}üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê INSTAGRAM SCRAPER${colors.reset}`);
  console.log('='.repeat(50));
  
  log('info', '–ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...');

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  log('info', '–®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  
  const requiredEnvs = ['DATABASE_URL', 'APIFY_TOKEN', 'OPENAI_API_KEY'];
  const envStatus = {};
  
  requiredEnvs.forEach(env => {
    if (process.env[env]) {
      envStatus[env] = '‚úÖ –ù–∞–π–¥–µ–Ω';
      log('success', `${env}: –ù–∞–π–¥–µ–Ω`);
    } else {
      envStatus[env] = '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
      log('error', `${env}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
    }
  });

  if (!process.env.DATABASE_URL) {
    log('error', 'DATABASE_URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.');
    return;
  }

  // 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  log('info', '–®–∞–≥ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  
  let sql;
  try {
    const { neon } = require('@neondatabase/serverless');
    sql = neon(process.env.DATABASE_URL);
    log('success', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon Database —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  } catch (error) {
    log('error', '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', error.message);
    return;
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
  log('info', '–®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  
  const tables = ['projects', 'competitors', 'hashtags', 'reels'];
  const tableStatus = {};
  
  for (const table of tables) {
    try {
      const result = await sql`SELECT COUNT(*) as count FROM ${sql(table)}`;
      const count = result[0].count;
      tableStatus[table] = count;
      log('success', `–¢–∞–±–ª–∏—Ü–∞ ${table}: ${count} –∑–∞–ø–∏—Å–µ–π`);
    } catch (error) {
      tableStatus[table] = 'ERROR';
      log('error', `–¢–∞–±–ª–∏—Ü–∞ ${table}: –û—à–∏–±–∫–∞`, error.message);
    }
  }

  // 4. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
  log('info', '–®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ ID=1');
  
  try {
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalReels = await sql`SELECT COUNT(*) as count FROM reels WHERE project_id = 1`;
    const viralReels = await sql`SELECT COUNT(*) as count FROM reels WHERE project_id = 1 AND views_count >= 50000`;
    const withTranscripts = await sql`SELECT COUNT(*) as count FROM reels WHERE project_id = 1 AND transcript IS NOT NULL AND transcript != ''`;
    
    const stats = {
      total: totalReels[0].count,
      viral: viralReels[0].count,
      transcripts: withTranscripts[0].count,
      viralPercent: totalReels[0].count > 0 ? Math.round((viralReels[0].count / totalReels[0].count) * 100) : 0
    };
    
    log('success', `–í—Å–µ–≥–æ reels: ${stats.total}`);
    log('success', `–í–∏—Ä—É—Å–Ω—ã—Ö (50K+): ${stats.viral} (${stats.viralPercent}%)`);
    log('success', `–° —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏: ${stats.transcripts}`);

    // –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    log('info', '–ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö');
    const bySource = await sql`
      SELECT 
        source_type,
        COUNT(*) as count,
        MAX(views_count) as max_views,
        AVG(views_count) as avg_views
      FROM reels 
      WHERE project_id = 1
      GROUP BY source_type
      ORDER BY count DESC
    `;

    bySource.forEach(source => {
      const avgViews = Math.round(source.avg_views || 0);
      const maxViews = source.max_views || 0;
      log('info', `–ò—Å—Ç–æ—á–Ω–∏–∫ ${source.source_type || 'NULL'}: ${source.count} reels`, {
        avgViews: avgViews.toLocaleString(),
        maxViews: maxViews.toLocaleString()
      });
    });

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    log('info', '–®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤');
    
    const competitors = await sql`
      SELECT id, username, is_active, last_scraped_at 
      FROM competitors 
      WHERE project_id = 1
      ORDER BY id
    `;

    log('success', `–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${competitors.length}`);

    for (const comp of competitors) {
      const competitorReels = await sql`
        SELECT COUNT(*) as count, MAX(views_count) as max_views
        FROM reels 
        WHERE project_id = 1 
        AND source_type = 'competitor' 
        AND source_identifier = ${comp.id.toString()}
      `;

      const reelsByUsername = await sql`
        SELECT COUNT(*) as count, MAX(views_count) as max_views
        FROM reels 
        WHERE project_id = 1 
        AND author_username = ${comp.username}
      `;

      const lastScraped = comp.last_scraped_at ? 
        new Date(comp.last_scraped_at).toLocaleString() : 
        '–ù–∏–∫–æ–≥–¥–∞';

      const status = competitorReels[0].count > 0 ? 'success' : 
                    reelsByUsername[0].count > 0 ? 'warning' : 'error';

      log(status, `@${comp.username} (ID: ${comp.id})`, {
        bySourceId: competitorReels[0].count,
        byUsername: reelsByUsername[0].count,
        lastScraped: lastScraped,
        active: comp.is_active
      });
    }

    // 6. –¢–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç
    log('info', '–®–∞–≥ 6: –ê–Ω–∞–ª–∏–∑ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
    
    const topReels = await sql`
      SELECT 
        author_username,
        views_count,
        source_type,
        created_at
      FROM reels 
      WHERE project_id = 1 
      AND views_count > 100000
      ORDER BY views_count DESC 
      LIMIT 5
    `;

    topReels.forEach((reel, index) => {
      log('success', `–¢–æ–ø ${index + 1}: @${reel.author_username}`, {
        views: reel.views_count?.toLocaleString(),
        source: reel.source_type,
        date: new Date(reel.created_at).toLocaleDateString()
      });
    });

    // 7. –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    log('info', '–®–∞–≥ 7: –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
    
    const recentActivity = await sql`
      SELECT 
        DATE(created_at) as date,
        COUNT(*) as count
      FROM reels 
      WHERE project_id = 1 
      AND created_at >= NOW() - INTERVAL '7 days'
      GROUP BY DATE(created_at)
      ORDER BY date DESC
      LIMIT 7
    `;

    if (recentActivity.length > 0) {
      log('success', '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:');
      recentActivity.forEach(day => {
        log('info', `  ${day.date}: +${day.count} reels`);
      });
    } else {
      log('warning', '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π');
    }

    // 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    log('info', '–®–∞–≥ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö API');
    
    if (process.env.APIFY_TOKEN) {
      try {
        const response = await fetch(`https://api.apify.com/v2/acts/apify~instagram-scraper?token=${process.env.APIFY_TOKEN}`);
        if (response.ok) {
          log('success', 'Apify API –¥–æ—Å—Ç—É–ø–µ–Ω');
        } else {
          log('error', `Apify API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`);
        }
      } catch (error) {
        log('error', '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Apify API', error.message);
      }
    }

    if (process.env.OPENAI_API_KEY) {
      try {
        const response = await fetch('https://api.openai.com/v1/models', {
          headers: {
            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
          }
        });
        if (response.ok) {
          log('success', 'OpenAI API –¥–æ—Å—Ç—É–ø–µ–Ω');
        } else {
          log('error', `OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`);
        }
      } catch (error) {
        log('error', '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API', error.message);
      }
    }

    // 9. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    log('info', '–®–∞–≥ 9: –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã');
    
    const issues = [];
    const recommendations = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    if (stats.total === 0) {
      issues.push('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ');
      recommendations.push('–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥: npm run scrape-viral');
    }

    const competitorReelsCount = bySource.find(s => s.source_type === 'competitor')?.count || 0;
    if (competitorReelsCount === 0) {
      issues.push('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º');
      recommendations.push('–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: npx tsx src/scripts/bulk-scrape-competitors.ts 1 $APIFY_TOKEN 1 20');
    }

    if (stats.viralPercent < 20) {
      issues.push(`–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏: ${stats.viralPercent}%`);
      recommendations.push('–£–≤–µ–ª–∏—á–∏—Ç—å minViews –≤ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤');
    }

    if (stats.transcripts === 0) {
      issues.push('–ù–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π');
      recommendations.push('–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: npx tsx src/scripts/transcribe-reels-with-whisper.ts 1 50000 30 10');
    }

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\n' + '='.repeat(50));
    console.log(`${colors.bright}üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢${colors.reset}`);
    console.log('='.repeat(50));

    if (issues.length === 0) {
      log('success', '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
    } else {
      log('warning', `–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${issues.length}`);
      issues.forEach((issue, index) => {
        log('error', `${index + 1}. ${issue}`);
      });
    }

    if (recommendations.length > 0) {
      log('info', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      recommendations.forEach((rec, index) => {
        log('info', `${index + 1}. ${rec}`);
      });
    }

    // –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    console.log(`\n${colors.bright}üéØ –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò:${colors.reset}`);
    console.log(`üìä –í—Å–µ–≥–æ reels: ${colors.green}${stats.total}${colors.reset}`);
    console.log(`üî• –í–∏—Ä—É—Å–Ω—ã—Ö: ${colors.green}${stats.viral} (${stats.viralPercent}%)${colors.reset}`);
    console.log(`üé§ –° —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏: ${colors.green}${stats.transcripts}${colors.reset}`);
    console.log(`üè¢ Reels –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${colors.green}${competitorReelsCount}${colors.reset}`);
    console.log(`üë• –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: ${colors.green}${competitors.length}${colors.reset}`);

  } catch (error) {
    log('error', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö', error.message);
  }

  log('success', '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –ó–∞–ø—É—Å–∫
runDiagnostic().catch(error => {
  console.error(`${colors.red}üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:${colors.reset}`, error);
  process.exit(1);
});
