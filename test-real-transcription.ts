import { initializeDBConnection } from "./src/db/neonDB";
import { transcribeAudio } from "./src/utils/transcription-utils";
import * as fs from "fs";
import * as path from "path";
import { exec } from "child_process";
import { promisify } from "util";

const execAsync = promisify(exec);

async function testRealTranscription() {
  console.log("üé¨ –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–ò");
  console.log("==============================");

  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
    const db = await initializeDBConnection();

    // –ò—â–µ–º —Ä–µ–∏–ª —Å –≤–∏–¥–µ–æ URL
    console.log("üîç –ò—â–µ–º —Ä–µ–∏–ª —Å –≤–∏–¥–µ–æ...");
    const reels = await db.execute(`
      SELECT id, caption, video_download_url, views_count, likes_count 
      FROM reels 
      WHERE video_download_url IS NOT NULL 
      AND video_download_url != ''
      ORDER BY views_count DESC 
      LIMIT 3
    `);

    if (reels.rows.length === 0) {
      console.log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ reels —Å –≤–∏–¥–µ–æ URL");
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${reels.rows.length} reels —Å –≤–∏–¥–µ–æ`);

    for (const row of reels.rows) {
      const reel = {
        id: row[0] as number,
        caption: row[1] as string,
        videoUrl: row[2] as string,
        views: row[3] as number,
        likes: row[4] as number,
      };

      console.log(`\nüé• –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú REEL #${reel.id}`);
      console.log(`üìä –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${reel.views?.toLocaleString() || "N/A"}`);
      console.log(`‚ù§Ô∏è –õ–∞–π–∫–∏: ${reel.likes?.toLocaleString() || "N/A"}`);
      console.log(
        `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${reel.caption?.substring(0, 100) || "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}...`
      );
      console.log(`üîó –í–∏–¥–µ–æ URL: ${reel.videoUrl.substring(0, 50)}...`);

      try {
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        const videosDir = path.join(process.cwd(), "temp", "videos");
        const audioDir = path.join(process.cwd(), "temp", "audio");

        await execAsync(`mkdir -p "${videosDir}"`);
        await execAsync(`mkdir -p "${audioDir}"`);

        // –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        const videoPath = path.join(videosDir, `reel_${reel.id}.mp4`);
        console.log("üì• –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ...");

        await execAsync(`curl -L -o "${videoPath}" "${reel.videoUrl}"`);

        if (!fs.existsSync(videoPath)) {
          console.log("‚ùå –í–∏–¥–µ–æ –Ω–µ —Å–∫–∞—á–∞–ª–æ—Å—å");
          continue;
        }

        const stats = fs.statSync(videoPath);
        console.log(`‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ (${Math.round(stats.size / 1024)} KB)`);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
        const audioPath = path.join(audioDir, `reel_${reel.id}.mp3`);
        console.log("üéµ –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ...");

        await execAsync(
          `ffmpeg -i "${videoPath}" -q:a 0 -map a "${audioPath}" -y`
        );

        if (!fs.existsSync(audioPath)) {
          console.log("‚ùå –ê—É–¥–∏–æ –Ω–µ –∏–∑–≤–ª–µ–∫–ª–æ—Å—å");
          continue;
        }

        const audioStats = fs.statSync(audioPath);
        console.log(
          `‚úÖ –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ (${Math.round(audioStats.size / 1024)} KB)`
        );

        // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
        console.log("üéôÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é OpenAI Whisper...");

        const transcription = await transcribeAudio(audioPath);

        console.log("‚úÖ –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ê!");
        console.log("üìù –†–ï–ó–£–õ–¨–¢–ê–¢:");
        console.log("‚îÄ".repeat(50));
        console.log(transcription);
        console.log("‚îÄ".repeat(50));
        console.log(`üìä –î–ª–∏–Ω–∞: ${transcription.length} —Å–∏–º–≤–æ–ª–æ–≤`);

        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        fs.unlinkSync(videoPath);
        fs.unlinkSync(audioPath);
        console.log("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã");

        // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        console.log("\nüéâ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!");
        return;
      } catch (error: any) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ reel #${reel.id}:`, error.message);
        continue;
      }
    }

    console.log("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω reel");
  } catch (error) {
    console.log("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testRealTranscription().catch(console.error);
