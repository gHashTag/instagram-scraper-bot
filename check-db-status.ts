/**
 * üìä –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */

import { neon } from '@neondatabase/serverless';
import dotenv from 'dotenv';
dotenv.config();

async function checkDBStatus() {
  console.log('üìä –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•');
  console.log('===============================\n');

  if (!process.env.DATABASE_URL) {
    console.log('‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const sql = neon(process.env.DATABASE_URL);

  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon Database...');
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const reelsResult = await sql`SELECT COUNT(*) as count FROM reels`;
    const competitorsResult = await sql`SELECT COUNT(*) as count FROM competitors`;
    const hashtagsResult = await sql`SELECT COUNT(*) as count FROM hashtags`;
    const projectsResult = await sql`SELECT COUNT(*) as count FROM projects`;
    
    console.log('üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`üé¨ Reels: ${reelsResult[0].count}`);
    console.log(`üè¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã: ${competitorsResult[0].count}`);
    console.log(`üè∑Ô∏è –•—ç—à—Ç–µ–≥–∏: ${hashtagsResult[0].count}`);
    console.log(`üìÅ –ü—Ä–æ–µ–∫—Ç—ã: ${projectsResult[0].count}`);
    
    const reelsCount = parseInt(reelsResult[0].count);
    
    if (reelsCount === 0) {
      console.log('\n‚úÖ –ë–ê–ó–ê –ü–£–°–¢–ê–Ø - –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞');
      return;
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å reels, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
    console.log('\nüìÖ –ê–ù–ê–õ–ò–ó –î–ê–¢:');
    
    // Reels –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    const sourceStats = await sql`
      SELECT source_type, COUNT(*) as count 
      FROM reels 
      GROUP BY source_type 
      ORDER BY count DESC
    `;
    
    console.log('–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:');
    sourceStats.forEach(stat => {
      console.log(`  - ${stat.source_type}: ${stat.count} reels`);
    });
    
    // –í–∏—Ä—É—Å–Ω—ã–µ reels (50K+)
    const viralResult = await sql`SELECT COUNT(*) as count FROM reels WHERE views_count >= 50000`;
    const viralCount = parseInt(viralResult[0].count);
    const viralPercent = Math.round((viralCount / reelsCount) * 100);
    
    console.log(`\nüî• –í–ò–†–£–°–ù–´–ï (50K+): ${viralCount} –∏–∑ ${reelsCount} (${viralPercent}%)`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    const twoWeeksAgo = new Date();
    twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 14);
    
    const recentResult = await sql`
      SELECT COUNT(*) as count 
      FROM reels 
      WHERE published_at >= ${twoWeeksAgo.toISOString()}
    `;
    
    const recentCount = parseInt(recentResult[0].count);
    const recentPercent = Math.round((recentCount / reelsCount) * 100);
    
    console.log(`üìÖ –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 14 –î–ù–ï–ô: ${recentCount} –∏–∑ ${reelsCount} (${recentPercent}%)`);
    
    // –¢–æ–ø-5 reels
    const topReels = await sql`
      SELECT author_username, views_count, source_type, published_at 
      FROM reels 
      ORDER BY views_count DESC 
      LIMIT 5
    `;
    
    if (topReels.length > 0) {
      console.log('\nüèÜ –¢–û–ü-5 REELS:');
      topReels.forEach((reel, index) => {
        const publishedDate = reel.published_at ? new Date(reel.published_at).toLocaleDateString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const views = reel.views_count?.toLocaleString() || 'N/A';
        console.log(`${index + 1}. @${reel.author_username} - ${views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (${reel.source_type}) - ${publishedDate}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    const year2025Start = new Date('2025-01-01');
    const oldDataResult = await sql`
      SELECT COUNT(*) as count 
      FROM reels 
      WHERE published_at < ${year2025Start.toISOString()}
    `;
    
    const oldDataCount = parseInt(oldDataResult[0].count);
    
    if (oldDataCount > 0) {
      console.log(`\n‚ö†Ô∏è –°–¢–ê–†–´–ï –î–ê–ù–ù–´–ï: ${oldDataCount} reels –∏–∑ 2024 –≥–æ–¥–∞`);
    } else {
      console.log(`\n‚úÖ –¢–û–õ–¨–ö–û 2025 –ì–û–î: –Ω–µ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö`);
    }
    
    // –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    console.log('\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:');
    
    if (recentCount >= 50 && viralPercent >= 30) {
      console.log('‚úÖ –û–¢–õ–ò–ß–ù–´–ï –î–ê–ù–ù–´–ï - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ–∂–∏—Ö –≤–∏—Ä—É—Å–Ω—ã—Ö reels');
    } else if (recentCount >= 20 && viralPercent >= 20) {
      console.log('üü° –•–û–†–û–®–ò–ï –î–ê–ù–ù–´–ï - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ');
    } else if (recentCount > 0) {
      console.log('üü† –ú–ê–õ–û –î–ê–ù–ù–´–• - –Ω—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥');
    } else {
      console.log('üî¥ –ù–ï–¢ –°–í–ï–ñ–ò–• –î–ê–ù–ù–´–• - —Å—Ä–æ—á–Ω–æ –Ω—É–∂–µ–Ω —Å–∫—Ä–∞–ø–∏–Ω–≥');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã:', error.message);
  }
}

checkDBStatus().catch(console.error);
