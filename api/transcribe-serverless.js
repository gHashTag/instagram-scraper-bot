// Serverless Function –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Apify API –∏ OpenAI Whisper
import fetch from "node-fetch";
import FormData from "form-data";

export default async function handler(request, response) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  response.setHeader("Access-Control-Allow-Origin", "*");
  response.setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS");
  response.setHeader("Access-Control-Allow-Headers", "Content-Type");

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OPTIONS –∑–∞–ø—Ä–æ—Å
  if (request.method === "OPTIONS") {
    return response.status(200).end();
  }

  if (request.method !== "POST") {
    return response.status(405).json({ error: "Method not allowed" });
  }

  try {
    const { url, chatId } = request.body;
    const botToken = process.env.BOT_TOKEN;
    const apifyToken = process.env.APIFY_TOKEN;

    console.log("üìù Transcribe request:", {
      url,
      chatId,
      timestamp: new Date().toISOString(),
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    if (!botToken) {
      throw new Error("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
    }
    if (!apifyToken) {
      throw new Error("APIFY_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è Instagram URL
    if (!isValidInstagramUrl(url)) {
      await sendTelegramMessage(
        botToken,
        chatId,
        "‚ùå *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞*\\n\\n" +
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram Reel\\n\\n" +
          "‚úÖ –ü—Ä–∏–º–µ—Ä: https://www\\.instagram\\.com/reel/ABC123/"
      );
      return response.status(400).json({ error: "Invalid Instagram URL" });
    }

    // –®–∞–≥ 1: –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    await sendTelegramMessage(
      botToken,
      chatId,
      "üîÑ *–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ*\\n\\n" +
        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è\\.\\.\\n\\n" +
        "üîç –ü–æ–ª—É—á–∞—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Apify\\.\\.\\."
    );

    // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ URL —á–µ—Ä–µ–∑ Apify Instagram Scraper
    let videoDownloadUrl;
    try {
      videoDownloadUrl = await getVideoUrlFromApify(apifyToken, url);
    } catch (apifyError) {
      console.error(
        "‚ùå Apify failed, trying fallback method:",
        apifyError.message
      );

      await sendTelegramMessage(
        botToken,
        chatId,
        "‚ö†Ô∏è *–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω*\\n\\n" +
          "üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ\\.\\.\\."
      );

      // Fallback: –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ URL –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
      videoDownloadUrl = await getVideoUrlFallback(url);
    }

    if (!videoDownloadUrl) {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
      await sendTelegramMessage(
        botToken,
        chatId,
        "‚ö†Ô∏è *–ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–µ–º–æ\\-—Ä–µ–∂–∏–º*\\n\\n" +
          "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –Ω–æ –¥–µ–º–æ\\-—Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç\\!\\n\\n" +
          "üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ\\.\\.\\."
      );

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
      const demoTranscription = generateDemoTranscription(url);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–º–æ-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
      await sendTelegramMessage(
        botToken,
        chatId,
        `üìù *–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–º–æ\\-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:*\\n\\n${escapeMarkdown(demoTranscription)}\\n\\n` +
          "‚ú® *–î–µ–º–æ\\-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω\\!*\\n\\n" +
          "üîß –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç: Apify ‚ùå \\(–≤—Ä–µ–º–µ–Ω–Ω–æ\\), OpenAI Whisper ‚úÖ, Telegram Bot ‚úÖ\\n\\n" +
          "üí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ Instagram Scraper API\\."
      );

      return response.status(200).json({
        success: true,
        transcription: demoTranscription,
        mode: "demo",
        processing_time: Date.now(),
      });
    }

    // –®–∞–≥ 3: –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
    await sendTelegramMessage(
      botToken,
      chatId,
      "üì• *–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ\\.\\.\\.*\\n\\n" +
        "‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ\\n" +
        "üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª\\.\\.\\."
    );

    const videoBuffer = await downloadVideoFromUrl(videoDownloadUrl);

    // –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ Telegram –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await sendVideoToTelegram(botToken, chatId, videoBuffer);

    // –®–∞–≥ 5: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∞—É–¥–∏–æ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
    await sendTelegramMessage(
      botToken,
      chatId,
      "üéµ *–ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ\\.\\.\\.*\\n\\n" +
        "üîä –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ\\n" +
        "ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –≤ OpenAI Whisper\\.\\.\\."
    );

    // –í serverless –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –º—ã –Ω–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ffmpeg
    // –ü–æ—ç—Ç–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –≤ OpenAI Whisper API
    const transcription = await transcribeVideoWithOpenAI(videoBuffer);

    // –®–∞–≥ 6: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    await sendTelegramMessage(
      botToken,
      chatId,
      `üìù *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:*\\n\\n${escapeMarkdown(transcription)}\\n\\n` +
        "‚ú® –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\\!"
    );

    console.log("‚úÖ Transcription completed successfully");
    return response.status(200).json({
      success: true,
      transcription,
      processing_time: Date.now(),
    });
  } catch (error) {
    console.error("‚ùå Transcription error:", error);

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
      if (request.body.chatId && process.env.BOT_TOKEN) {
        await sendTelegramMessage(
          process.env.BOT_TOKEN,
          request.body.chatId,
          `‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏*\\n\\n` +
            `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${escapeMarkdown(error.message)}\\n\\n` +
            `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\\.`
        );
      }
    } catch (telegramError) {
      console.error("Failed to send error message to Telegram:", telegramError);
    }

    return response.status(500).json({
      error: "Internal server error",
      message: error.message,
    });
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è Instagram URL
 */
function isValidInstagramUrl(url) {
  if (!url || typeof url !== "string") return false;

  const patterns = [
    /^https?:\/\/(www\.)?instagram\.com\/(reel|p)\/[A-Za-z0-9_-]+\/?(\?.*)?$/,
    /^https?:\/\/(www\.)?instagram\.com\/reels\/[A-Za-z0-9_-]+\/?(\?.*)?$/,
  ];

  return patterns.some((pattern) => pattern.test(url));
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Apify Instagram Scraper
 */
async function getVideoUrlFromApify(apifyToken, instagramUrl) {
  try {
    console.log("üîç Getting video URL from Apify for:", instagramUrl);

    // –ó–∞–ø—É—Å–∫–∞–µ–º Apify Instagram Scraper –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    const runResponse = await fetch(
      `https://api.apify.com/v2/acts/apify~instagram-scraper/runs?token=${apifyToken}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          directUrls: [instagramUrl], // –ò—Å–ø–æ–ª—å–∑—É–µ–º directUrls –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
          resultsType: "posts",
          resultsLimit: 1,
          proxy: {
            useApifyProxy: true,
            apifyProxyGroups: ["RESIDENTIAL"],
          },
        }),
      }
    );

    if (!runResponse.ok) {
      const errorText = await runResponse.text();
      console.error(
        "‚ùå Apify run response error:",
        runResponse.status,
        errorText
      );
      throw new Error(
        `Apify API error: ${runResponse.status} ${runResponse.statusText}`
      );
    }

    const runData = await runResponse.json();
    const runId = runData.data.id;

    console.log("üîÑ Apify run started, ID:", runId);

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
    let attempts = 0;
    const maxAttempts = 30; // 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º

    while (attempts < maxAttempts) {
      await new Promise((resolve) => setTimeout(resolve, 2000)); // –∂–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã

      const statusResponse = await fetch(
        `https://api.apify.com/v2/acts/apify~instagram-scraper/runs/${runId}?token=${apifyToken}`
      );
      const statusData = await statusResponse.json();

      console.log(
        `üìä Apify run status (attempt ${attempts + 1}):`,
        statusData.data.status
      );

      if (statusData.data.status === "SUCCEEDED") {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const resultsResponse = await fetch(
          `https://api.apify.com/v2/datasets/${statusData.data.defaultDatasetId}/items?token=${apifyToken}&format=json`
        );
        const results = await resultsResponse.json();

        console.log("üì¶ Apify results:", results.length, "items");

        if (results.length > 0) {
          const result = results[0];
          console.log("üìÑ First result keys:", Object.keys(result));

          // –ò—â–µ–º videoUrl –≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª—è—Ö
          const videoUrl =
            result.videoUrl ||
            result.video_url ||
            result.videoPlayURL ||
            result.video ||
            result.displayUrl ||
            result.url;

          if (videoUrl) {
            console.log("‚úÖ Video URL found:", videoUrl);
            return videoUrl;
          } else {
            console.log(
              "‚ùå No video URL in results. Available fields:",
              Object.keys(result)
            );
            console.log("‚ùå Full result:", JSON.stringify(result, null, 2));
            return null;
          }
        } else {
          console.log("‚ùå No results returned from Apify");
          return null;
        }
      } else if (statusData.data.status === "FAILED") {
        throw new Error("Apify run failed: " + JSON.stringify(statusData.data));
      }

      attempts++;
    }

    throw new Error("Apify run timeout - took too long to complete");
  } catch (error) {
    console.error("‚ùå Apify error:", error);
    throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Apify: ${error.message}`);
  }
}

/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ
 */
async function downloadVideoFromUrl(videoUrl) {
  try {
    console.log("üì• Downloading video from:", videoUrl);

    const response = await fetch(videoUrl, {
      headers: {
        "User-Agent":
          "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36",
      },
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const buffer = await response.buffer();
    console.log("‚úÖ Video downloaded, size:", buffer.length, "bytes");

    return buffer;
  } catch (error) {
    console.error("‚ùå Download error:", error);
    throw new Error(`–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: ${error.message}`);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –≤ Telegram
 */
async function sendVideoToTelegram(botToken, chatId, videoBuffer) {
  try {
    const form = new FormData();
    form.append("chat_id", chatId);
    form.append("video", videoBuffer, {
      filename: "instagram_reel.mp4",
      contentType: "video/mp4",
    });
    form.append(
      "caption",
      "üé¨ *–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ*\\n\\nüìù –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é\\.\\.\\."
    );
    form.append("parse_mode", "MarkdownV2");

    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/sendVideo`,
      {
        method: "POST",
        body: form,
        headers: form.getHeaders(),
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error("‚ùå Telegram video send error:", errorText);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
    } else {
      console.log("‚úÖ Video sent to Telegram successfully");
    }
  } catch (error) {
    console.error("‚ùå Error sending video to Telegram:", error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
  }
}

/**
 * –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ OpenAI Whisper API
 */
async function transcribeVideoWithOpenAI(videoBuffer) {
  try {
    const openaiApiKey = process.env.OPENAI_API_KEY;
    if (!openaiApiKey) {
      throw new Error("OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
    }

    console.log("ü§ñ Sending to OpenAI Whisper API...");

    const form = new FormData();
    form.append("file", videoBuffer, {
      filename: "video.mp4",
      contentType: "video/mp4",
    });
    form.append("model", "whisper-1");
    form.append("language", "ru"); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫

    const response = await fetch(
      "https://api.openai.com/v1/audio/transcriptions",
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${openaiApiKey}`,
          ...form.getHeaders(),
        },
        body: form,
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error("‚ùå OpenAI API error:", response.status, errorText);
      throw new Error(
        `OpenAI API error: ${response.status} ${response.statusText}`
      );
    }

    const result = await response.json();
    console.log("‚úÖ OpenAI transcription completed");

    return result.text || "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å - —Ç–µ–∫—Å—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω";
  } catch (error) {
    console.error("‚ùå OpenAI transcription error:", error);
    throw new Error(`–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: ${error.message}`);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 */
async function sendTelegramMessage(botToken, chatId, text) {
  try {
    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: text,
          parse_mode: "MarkdownV2",
        }),
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error("‚ùå Telegram message error:", errorText);
    }
  } catch (error) {
    console.error("‚ùå Error sending Telegram message:", error);
  }
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
 */
function escapeMarkdown(text) {
  if (!text) return "";
  return text.replace(/[_*\[\]()~`>#+\-=|{}.!]/g, "\\$&");
}

/**
 * Fallback –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ URL –±–µ–∑ Apify
 */
async function getVideoUrlFallback(instagramUrl) {
  try {
    console.log("üîÑ Trying fallback method for:", instagramUrl);

    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ URL —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Instagram
    // –≠—Ç–æ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π fallback, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –Ω–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞—Ç—å

    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã:
    // 1. –î—Ä—É–≥–∏–µ –ø—É–±–ª–∏—á–Ω—ã–µ API
    // 2. –†–∞–∑–ª–∏—á–Ω—ã–µ scraping —Å–µ—Ä–≤–∏—Å—ã
    // 3. yt-dlp –∫–∞–∫ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å

    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º
    console.log("‚ùå Fallback method: returning null (demo mode)");
    return null;
  } catch (error) {
    console.error("‚ùå Fallback method failed:", error);
    return null;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
 */
function generateDemoTranscription(instagramUrl) {
  const demoTexts = [
    "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –¥–µ–º–æ-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è Instagram Reels –±–æ—Ç–∞. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Instagram API –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.",
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Instagram Scraper Bot! –î–µ–º–æ-—Ä–µ–∂–∏–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: Telegram Bot ‚úÖ, OpenAI Whisper ‚úÖ, Vercel Serverless ‚úÖ. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Apify API.",
    "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ, –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Instagram –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ.",
    "Instagram Reels Transcription Bot –∞–∫—Ç–∏–≤–µ–Ω! –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Instagram scraping API.",
  ];

  // –í—ã–±–∏—Ä–∞–µ–º –¥–µ–º–æ-—Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ URL –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
  const urlHash = instagramUrl.split("").reduce((a, b) => {
    a = (a << 5) - a + b.charCodeAt(0);
    return a & a;
  }, 0);

  const index = Math.abs(urlHash) % demoTexts.length;
  return demoTexts[index];
}
