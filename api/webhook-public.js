// –ü—Ä–æ—Å—Ç–æ–π –ø—É–±–ª–∏—á–Ω—ã–π webhook –¥–ª—è Telegram
export default function handler(req, res) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OPTIONS –∑–∞–ø—Ä–æ—Å
  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }

  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π webhook
    console.log("üì® Telegram webhook received:", {
      method: req.method,
      url: req.url,
      headers: {
        "content-type": req.headers["content-type"],
        "user-agent": req.headers["user-agent"],
      },
      body: req.body,
      timestamp: new Date().toISOString(),
    });

    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –æ—Ç–≤–µ—á–∞–µ–º —á—Ç–æ –≤—Å–µ –û–ö
    const response = {
      ok: true,
      message: "Telegram webhook received successfully",
      timestamp: new Date().toISOString(),
      method: req.method,
      bodyReceived: !!req.body,
    };

    console.log("‚úÖ Sending response:", response);

    res.status(200).json(response);
  } catch (error) {
    console.error("‚ùå Telegram webhook error:", error);
    res.status(500).json({
      error: "Internal server error",
      message: error.message || "Unknown error",
      timestamp: new Date().toISOString(),
    });
  }
}
