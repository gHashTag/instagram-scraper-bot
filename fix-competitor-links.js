/**
 * üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ reels –∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º
 */

require('dotenv').config();

async function fixCompetitorLinks() {
  console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ò–í–Ø–ó–ö–ò –ö–û–ù–ö–£–†–ï–ù–¢–û–í');
  console.log('===================================\n');

  if (!process.env.DATABASE_URL) {
    console.log('‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const { neon } = require('@neondatabase/serverless');
  const sql = neon(process.env.DATABASE_URL);

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    console.log('üë• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...');
    const competitors = await sql`
      SELECT id, username, profile_url 
      FROM competitors 
      WHERE project_id = 1 AND is_active = true
    `;

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${competitors.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:`);
    competitors.forEach(comp => {
      console.log(`   ${comp.id}. @${comp.username}`);
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('\nüìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ reels:');
    const currentStats = await sql`
      SELECT 
        source_type,
        COUNT(*) as count
      FROM reels 
      WHERE project_id = 1
      GROUP BY source_type
      ORDER BY count DESC
    `;

    currentStats.forEach(stat => {
      console.log(`   ${stat.source_type || 'NULL'}: ${stat.count} reels`);
    });

    // 3. –ò—â–µ–º reels –æ—Ç –Ω–∞—à–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø–æ username
    console.log('\nüîç –ü–æ–∏—Å–∫ reels –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø–æ username...');
    let totalFixed = 0;

    for (const competitor of competitors) {
      // –ò—â–µ–º reels —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
      const competitorReels = await sql`
        SELECT id, author_username, views_count, source_type, source_identifier
        FROM reels 
        WHERE project_id = 1 
        AND author_username = ${competitor.username}
        AND (source_type != 'competitor' OR source_identifier != ${competitor.id.toString()})
      `;

      if (competitorReels.length > 0) {
        console.log(`\n   @${competitor.username}: –Ω–∞–π–¥–µ–Ω–æ ${competitorReels.length} reels –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        competitorReels.slice(0, 3).forEach(reel => {
          const views = reel.views_count?.toLocaleString() || 'N/A';
          console.log(`     - ID ${reel.id}: ${views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (source: ${reel.source_type}:${reel.source_identifier})`);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º source_type –∏ source_identifier
        const updateResult = await sql`
          UPDATE reels 
          SET 
            source_type = 'competitor',
            source_identifier = ${competitor.id.toString()},
            updated_at = NOW()
          WHERE project_id = 1 
          AND author_username = ${competitor.username}
          AND (source_type != 'competitor' OR source_identifier != ${competitor.id.toString()})
        `;

        console.log(`     ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${competitorReels.length} reels`);
        totalFixed += competitorReels.length;

        // –û–±–Ω–æ–≤–ª—è–µ–º last_scraped_at —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
        await sql`
          UPDATE competitors 
          SET last_scraped_at = NOW()
          WHERE id = ${competitor.id}
        `;
      } else {
        console.log(`   @${competitor.username}: reels –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã`);
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
    const newStats = await sql`
      SELECT 
        source_type,
        COUNT(*) as count
      FROM reels 
      WHERE project_id = 1
      GROUP BY source_type
      ORDER BY count DESC
    `;

    newStats.forEach(stat => {
      console.log(`   ${stat.source_type || 'NULL'}: ${stat.count} reels`);
    });

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
    console.log('\nüè¢ Reels –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
    for (const competitor of competitors) {
      const competitorReels = await sql`
        SELECT COUNT(*) as count, MAX(views_count) as max_views
        FROM reels 
        WHERE project_id = 1 
        AND source_type = 'competitor' 
        AND source_identifier = ${competitor.id.toString()}
      `;

      const count = competitorReels[0].count;
      const maxViews = competitorReels[0].max_views?.toLocaleString() || 'N/A';
      const status = count > 0 ? '‚úÖ' : '‚ùå';
      
      console.log(`   ${status} @${competitor.username}: ${count} reels (–º–∞–∫—Å: ${maxViews} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)`);
    }

    // 6. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüéâ –ò–¢–û–ì –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤—è–∑–æ–∫: ${totalFixed}`);
    
    const competitorReelsTotal = await sql`
      SELECT COUNT(*) as count 
      FROM reels 
      WHERE project_id = 1 AND source_type = 'competitor'
    `;

    console.log(`üìä –í—Å–µ–≥–æ reels –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${competitorReelsTotal[0].count}`);

    if (competitorReelsTotal[0].count > 0) {
      console.log('üéØ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê! –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç –¥–∞–Ω–Ω—ã–µ!');
    } else {
      console.log('‚ö†Ô∏è –í—Å–µ –µ—â–µ –Ω–µ—Ç reels –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –ù—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥.');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:', error.message);
  }
}

fixCompetitorLinks().catch(console.error);
