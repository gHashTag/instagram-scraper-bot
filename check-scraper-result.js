/**
 * üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∫—Ä–∞–ø–µ—Ä–∞
 */

const https = require('https');

async function checkScraperResult() {
  console.log('üìä –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê –°–ö–†–ê–ü–ï–†–ê');
  console.log('===============================\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-–¥–∞—à–±–æ—Ä–¥
  console.log('üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–∞...');
  
  try {
    const dashboardUrl = 'https://instagram-scraper-bot.vercel.app/';
    
    const response = await fetch(dashboardUrl);
    const html = await response.text();
    
    // –ò—â–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –≤ HTML
    const reelsMatch = html.match(/(\d+)\s*reels/i);
    const viewsMatch = html.match(/(\d+(?:,\d+)*)\s*–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤/i);
    const competitorsMatch = html.match/(\d+)\s*–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç/i);
    
    if (reelsMatch) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ reels –≤ –¥–∞—à–±–æ—Ä–¥–µ: ${reelsMatch[1]}`);
    } else {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ reels –≤ –¥–∞—à–±–æ—Ä–¥–µ');
    }
    
    if (viewsMatch) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${viewsMatch[1]}`);
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–∞:', error.message);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints
  console.log('\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints...');
  
  const endpoints = [
    '/api/stats',
    '/api/reels',
    '/api/competitors',
    '/api/hashtags'
  ];
  
  for (const endpoint of endpoints) {
    try {
      const url = `https://instagram-scraper-bot.vercel.app${endpoint}`;
      const response = await fetch(url);
      const data = await response.json();
      
      console.log(`üì° ${endpoint}:`);
      
      if (data.data && Array.isArray(data.data)) {
        console.log(`  ‚úÖ –î–∞–Ω–Ω—ã–µ: ${data.data.length} –∑–∞–ø–∏—Å–µ–π`);
      } else if (data.total !== undefined) {
        console.log(`  ‚úÖ –í—Å–µ–≥–æ: ${data.total}`);
      } else if (data.status === 'ok') {
        console.log(`  üü° –°—Ç–∞—Ç—É—Å OK, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö`);
      } else {
        console.log(`  ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç`);
      }
      
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Obsidian –¥–∞—à–±–æ—Ä–¥
  console.log('\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ Obsidian –¥–∞—à–±–æ—Ä–¥–∞...');
  
  try {
    const fs = require('fs');
    const path = require('path');
    
    const obsidianPath = 'vaults/coco-age/üéØ –ì–õ–ê–í–ù–´–ô –î–ê–®–ë–û–†–î.md';
    
    if (fs.existsSync(obsidianPath)) {
      const content = fs.readFileSync(obsidianPath, 'utf8');
      
      // –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      const reelsMatch = content.match(/üé¨ –í—Å–µ–≥–æ Reels.*?(\d+)/);
      const viralMatch = content.match/üî• –í–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.*?(\d+)/);
      const updateMatch = content.match(/–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.*?(\d{4}-\d{2}-\d{2})/);
      
      if (reelsMatch) {
        console.log(`‚úÖ Reels –≤ Obsidian: ${reelsMatch[1]}`);
      }
      
      if (viralMatch) {
        console.log(`‚úÖ –í–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: ${viralMatch[1]}`);
      }
      
      if (updateMatch) {
        console.log(`‚úÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${updateMatch[1]}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø –ø–æ—Å—Ç—ã
      const topPostsSection = content.match(/## üî•.*?–í–ò–†–£–°–ù–´–ô –ö–û–ù–¢–ï–ù–¢.*?\n([\s\S]*?)(?=\n##|$)/);
      if (topPostsSection) {
        const posts = topPostsSection[1].match(/@\w+/g);
        if (posts) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ø –ø–æ—Å—Ç–æ–≤: ${posts.length}`);
          console.log(`   –ê–≤—Ç–æ—Ä—ã: ${posts.slice(0, 3).join(', ')}...`);
        }
      }
      
    } else {
      console.log('‚ùå Obsidian –¥–∞—à–±–æ—Ä–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Obsidian:', error.message);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  console.log('\nüìã –ü–æ–∏—Å–∫ –ª–æ–≥–æ–≤ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞...');
  
  try {
    const fs = require('fs');
    const logPaths = [
      'logs/scraping.log',
      'logs/setup-fresh-data.log',
      'scraping.log',
      'setup.log'
    ];
    
    let foundLogs = false;
    
    for (const logPath of logPaths) {
      if (fs.existsSync(logPath)) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ª–æ–≥: ${logPath}`);
        const logContent = fs.readFileSync(logPath, 'utf8');
        const lines = logContent.split('\n').slice(-10); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
        console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:');
        lines.forEach(line => {
          if (line.trim()) {
            console.log(`   ${line}`);
          }
        });
        foundLogs = true;
        break;
      }
    }
    
    if (!foundLogs) {
      console.log('üü° –õ–æ–≥–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ª–æ–≥–æ–≤:', error.message);
  }
  
  // –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
  console.log('\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:');
  console.log('==================');
  
  console.log('üìä –°—Ç–∞—Ç—É—Å —Å–∫—Ä–∞–ø–µ—Ä–∞:');
  console.log('  - –°–∫—Ä–∏–ø—Ç setup-fresh-data: ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω');
  console.log('  - –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: -1 (–≤–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞)');
  console.log('  - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ~40 –º–∏–Ω—É—Ç');
  
  console.log('\nüîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('  1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ–±-–¥–∞—à–±–æ—Ä–¥ –≤–∏–∑—É–∞–ª—å–Ω–æ');
  console.log('  2. –û–±–Ω–æ–≤–∏—Ç—å Obsidian –¥–∞—à–±–æ—Ä–¥');
  console.log('  3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ');
  
  console.log('\nüåê –°—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:');
  console.log('  - –í–µ–±-–¥–∞—à–±–æ—Ä–¥: https://instagram-scraper-bot.vercel.app/');
  console.log('  - Obsidian: vaults/coco-age/üéØ –ì–õ–ê–í–ù–´–ô –î–ê–®–ë–û–†–î.md');
}

checkScraperResult().catch(console.error);
