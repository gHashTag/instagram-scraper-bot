/**
 * üî• –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ò –°–í–ï–ñ–ò–ô –°–ö–†–ê–ü–ò–ù–ì –ó–ê 2 –ù–ï–î–ï–õ–ò
 * 
 * 1. –£–¥–∞–ª—è–µ—Ç –í–°–ï reels –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * 2. –°–∫—Ä–∞–ø–∏—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π
 * 3. –ú–∏–Ω–∏–º—É–º 50K –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
 * 4. –ü–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º –ò –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º (2 —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
 */

const { Pool } = require('pg');
require('dotenv').config();

async function clearAllReels() {
  console.log('üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• REELS –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•...');
  
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
  });

  try {
    const client = await pool.connect();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ reels –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const beforeCount = await client.query('SELECT COUNT(*) FROM reels');
    console.log(`üìä Reels –≤ –±–∞–∑–µ –¥–æ –æ—á–∏—Å—Ç–∫–∏: ${beforeCount.rows[0].count}`);
    
    // –£–¥–∞–ª—è–µ–º –í–°–ï reels
    const deleteResult = await client.query('DELETE FROM reels');
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deleteResult.rowCount} reels`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∞–∑–∞ –ø—É—Å—Ç–∞—è
    const afterCount = await client.query('SELECT COUNT(*) FROM reels');
    console.log(`üìä Reels –≤ –±–∞–∑–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: ${afterCount.rows[0].count}`);
    
    if (afterCount.rows[0].count === '0') {
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞ –æ—Ç reels!');
    } else {
      console.log('‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å reels –≤ –±–∞–∑–µ');
    }
    
    client.release();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã:', error.message);
    throw error;
  } finally {
    await pool.end();
  }
}

async function checkConfiguration() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò...');
  
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
  });

  try {
    const client = await pool.connect();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const competitorsResult = await client.query('SELECT id, username, is_active FROM competitors ORDER BY id');
    console.log(`üè¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã (${competitorsResult.rows.length}):`);
    competitorsResult.rows.forEach(comp => {
      console.log(`  - ID: ${comp.id}, @${comp.username}, –ê–∫—Ç–∏–≤–µ–Ω: ${comp.is_active ? '‚úÖ' : '‚ùå'}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö—ç—à—Ç–µ–≥–∏
    const hashtagsResult = await client.query('SELECT id, tag_name, is_active FROM hashtags ORDER BY id');
    console.log(`\nüè∑Ô∏è –•—ç—à—Ç–µ–≥–∏ (${hashtagsResult.rows.length}):`);
    hashtagsResult.rows.forEach(tag => {
      console.log(`  - ID: ${tag.id}, #${tag.tag_name}, –ê–∫—Ç–∏–≤–µ–Ω: ${tag.is_active ? '‚úÖ' : '‚ùå'}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã
    const projectsResult = await client.query('SELECT id, name FROM projects ORDER BY id');
    console.log(`\nüìÅ –ü—Ä–æ–µ–∫—Ç—ã (${projectsResult.rows.length}):`);
    projectsResult.rows.forEach(proj => {
      console.log(`  - ID: ${proj.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${proj.name}`);
    });
    
    client.release();
    
    return {
      competitors: competitorsResult.rows,
      hashtags: hashtagsResult.rows,
      projects: projectsResult.rows
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
    throw error;
  } finally {
    await pool.end();
  }
}

async function runScraping() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –°–ö–†–ê–ü–ò–ù–ì–ê...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  if (!process.env.APIFY_TOKEN) {
    console.log('‚ùå APIFY_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    return;
  }
  
  if (!process.env.DATABASE_URL) {
    console.log('‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    return;
  }
  
  console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã');
  console.log(`üìä APIFY_TOKEN: ${process.env.APIFY_TOKEN.substring(0, 20)}...`);
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
  const projectId = process.env.DEFAULT_PROJECT_ID || 1;
  const daysBack = 14; // 2 –Ω–µ–¥–µ–ª–∏
  const minViews = 50000; // 50K+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
  const limitPerSource = 100; // –õ–∏–º–∏—Ç –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
  
  console.log(`\nüìã –ü–ê–†–ê–ú–ï–¢–†–´ –°–ö–†–ê–ü–ò–ù–ì–ê:`);
  console.log(`  - –ü—Ä–æ–µ–∫—Ç ID: ${projectId}`);
  console.log(`  - –ü–µ—Ä–∏–æ–¥: ${daysBack} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`);
  console.log(`  - –ú–∏–Ω–∏–º—É–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${minViews.toLocaleString()}`);
  console.log(`  - –õ–∏–º–∏—Ç –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫: ${limitPerSource}`);
  
  try {
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –°–∫—Ä–∞–ø–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    console.log('\nüè¢ –°–¢–†–ê–¢–ï–ì–ò–Ø 1: –°–ö–†–ê–ü–ò–ù–ì –ö–û–ù–ö–£–†–ï–ù–¢–û–í');
    console.log('=====================================');
    
    const { spawn } = require('child_process');
    
    const competitorScraping = spawn('npx', [
      'tsx', 
      'src/scripts/bulk-scrape-competitors.ts',
      projectId.toString(),
      process.env.APIFY_TOKEN,
      '1', // 1 –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥ (–Ω–æ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º 14 –¥–Ω–µ–π –≤ –∫–æ–¥–µ)
      limitPerSource.toString()
    ], {
      stdio: 'inherit',
      cwd: process.cwd()
    });
    
    await new Promise((resolve, reject) => {
      competitorScraping.on('close', (code) => {
        if (code === 0) {
          console.log('‚úÖ –°–∫—Ä–∞–ø–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
          resolve();
        } else {
          console.log(`‚ùå –°–∫—Ä–∞–ø–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
          reject(new Error(`Competitor scraping failed with code ${code}`));
        }
      });
      
      competitorScraping.on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', error);
        reject(error);
      });
    });
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
    console.log('\n‚è≥ –ü–∞—É–∑–∞ 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏...');
    await new Promise(resolve => setTimeout(resolve, 30000));
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –°–∫—Ä–∞–ø–∏–Ω–≥ —Ö—ç—à—Ç–µ–≥–æ–≤
    console.log('\nüè∑Ô∏è –°–¢–†–ê–¢–ï–ì–ò–Ø 2: –°–ö–†–ê–ü–ò–ù–ì –•–≠–®–¢–ï–ì–û–í');
    console.log('==================================');
    
    const hashtagScraping = spawn('npx', [
      'tsx',
      'src/scripts/bulk-scrape-hashtags.ts',
      projectId.toString(),
      process.env.APIFY_TOKEN,
      daysBack.toString(),
      minViews.toString(),
      limitPerSource.toString()
    ], {
      stdio: 'inherit',
      cwd: process.cwd()
    });
    
    await new Promise((resolve, reject) => {
      hashtagScraping.on('close', (code) => {
        if (code === 0) {
          console.log('‚úÖ –°–∫—Ä–∞–ø–∏–Ω–≥ —Ö—ç—à—Ç–µ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
          resolve();
        } else {
          console.log(`‚ùå –°–∫—Ä–∞–ø–∏–Ω–≥ —Ö—ç—à—Ç–µ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
          reject(new Error(`Hashtag scraping failed with code ${code}`));
        }
      });
      
      hashtagScraping.on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Ö—ç—à—Ç–µ–≥–æ–≤:', error);
        reject(error);
      });
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ:', error.message);
    throw error;
  }
}

async function checkResults() {
  console.log('\nüìä –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í...');
  
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
  });

  try {
    const client = await pool.connect();
    
    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ reels
    const totalResult = await client.query('SELECT COUNT(*) FROM reels');
    console.log(`üé¨ –í—Å–µ–≥–æ reels: ${totalResult.rows[0].count}`);
    
    // Reels –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    const sourceStats = await client.query(`
      SELECT source_type, COUNT(*) as count 
      FROM reels 
      GROUP BY source_type 
      ORDER BY count DESC
    `);
    
    console.log('\nüìä –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:');
    sourceStats.rows.forEach(stat => {
      console.log(`  - ${stat.source_type}: ${stat.count} reels`);
    });
    
    // –í–∏—Ä—É—Å–Ω—ã–µ reels (50K+)
    const viralResult = await client.query('SELECT COUNT(*) FROM reels WHERE views_count >= 50000');
    console.log(`\nüî• –í–∏—Ä—É—Å–Ω—ã–µ (50K+): ${viralResult.rows[0].count} reels`);
    
    // –¢–æ–ø-5 reels
    const topReels = await client.query(`
      SELECT author_username, views_count, source_type, published_at 
      FROM reels 
      ORDER BY views_count DESC 
      LIMIT 5
    `);
    
    if (topReels.rows.length > 0) {
      console.log('\nüèÜ –¢–û–ü-5 REELS:');
      topReels.rows.forEach((reel, index) => {
        const publishedDate = reel.published_at ? new Date(reel.published_at).toLocaleDateString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        console.log(`${index + 1}. @${reel.author_username} - ${reel.views_count?.toLocaleString() || 'N/A'} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (${reel.source_type}) - ${publishedDate}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    const twoWeeksAgo = new Date();
    twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 14);
    
    const recentResult = await client.query(`
      SELECT COUNT(*) FROM reels 
      WHERE published_at >= $1
    `, [twoWeeksAgo]);
    
    console.log(`\nüìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π: ${recentResult.rows[0].count} reels`);
    
    client.release();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error.message);
  } finally {
    await pool.end();
  }
}

async function main() {
  console.log('üî• –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ò –°–í–ï–ñ–ò–ô –°–ö–†–ê–ü–ò–ù–ì');
  console.log('===================================');
  console.log(`üìÖ –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString()}`);
  console.log('üéØ –¶–µ–ª—å: –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ reels –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏ —Å 50K+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const config = await checkConfiguration();
    
    if (config.competitors.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
      return;
    }
    
    if (config.hashtags.length === 0) {
      console.log('‚ùå –ù–µ—Ç —Ö—ç—à—Ç–µ–≥–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
      return;
    }
    
    // 2. –û—á–∏—â–∞–µ–º –±–∞–∑—É –æ—Ç –≤—Å–µ—Ö reels
    await clearAllReels();
    
    // 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥
    await runScraping();
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await checkResults();
    
    console.log('\nüéâ –°–ö–†–ê–ü–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å–≤–µ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    console.log('üìä –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞—à–±–æ—Ä–¥—ã');
    
  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    console.log('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–æ–∫–µ–Ω—ã API');
  }
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);
