/**
 * üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ —Å–≤—è–∑–µ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
 */

import { neon } from '@neondatabase/serverless';
import dotenv from 'dotenv';
dotenv.config();

async function checkDatesAndCompetitors() {
  console.log('üìÖ –ü–†–û–í–ï–†–ö–ê –î–ê–¢ –ò –°–í–Ø–ó–ï–ô –ö–û–ù–ö–£–†–ï–ù–¢–û–í');
  console.log('===================================\n');

  if (!process.env.DATABASE_URL) {
    console.log('‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const sql = neon(process.env.DATABASE_URL);

  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon Database...\n');
    
    // 1. –ü–†–û–í–ï–†–ö–ê –î–ê–¢ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò
    console.log('üìÖ 1. –ü–†–û–í–ï–†–ö–ê –î–ê–¢ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò:');
    console.log('==============================');
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º
    const dateStats = await sql`
      SELECT 
        COUNT(*) as total_reels,
        COUNT(*) FILTER (WHERE published_at >= NOW() - INTERVAL '14 days') as recent_14_days,
        COUNT(*) FILTER (WHERE published_at >= NOW() - INTERVAL '30 days') as recent_30_days,
        COUNT(*) FILTER (WHERE published_at >= '2025-01-01') as year_2025,
        COUNT(*) FILTER (WHERE published_at < '2025-01-01') as year_2024_and_older,
        MIN(published_at) as oldest_date,
        MAX(published_at) as newest_date
      FROM reels
      WHERE published_at IS NOT NULL
    `;
    
    if (dateStats.length > 0) {
      const stats = dateStats[0];
      console.log(`üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
      console.log(`  - –í—Å–µ–≥–æ reels —Å –¥–∞—Ç–∞–º–∏: ${stats.total_reels}`);
      console.log(`  - –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π: ${stats.recent_14_days} (${Math.round(stats.recent_14_days / stats.total_reels * 100)}%)`);
      console.log(`  - –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: ${stats.recent_30_days} (${Math.round(stats.recent_30_days / stats.total_reels * 100)}%)`);
      console.log(`  - –ó–∞ 2025 –≥–æ–¥: ${stats.year_2025} (${Math.round(stats.year_2025 / stats.total_reels * 100)}%)`);
      console.log(`  - –ó–∞ 2024 –∏ —Å—Ç–∞—Ä—à–µ: ${stats.year_2024_and_older} (${Math.round(stats.year_2024_and_older / stats.total_reels * 100)}%)`);
      console.log(`  - –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –¥–∞—Ç–∞: ${stats.oldest_date ? new Date(stats.oldest_date).toLocaleDateString() : '–ù–µ—Ç'}`);
      console.log(`  - –°–∞–º–∞—è –Ω–æ–≤–∞—è –¥–∞—Ç–∞: ${stats.newest_date ? new Date(stats.newest_date).toLocaleDateString() : '–ù–µ—Ç'}`);
      
      // –û—Ü–µ–Ω–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
      console.log(`\nüéØ –û—Ü–µ–Ω–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:`);
      if (stats.recent_14_days >= 50) {
        console.log(`‚úÖ –û–¢–õ–ò–ß–ù–û: ${stats.recent_14_days} reels –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π`);
      } else if (stats.recent_14_days >= 20) {
        console.log(`üü° –•–û–†–û–®–û: ${stats.recent_14_days} reels –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π`);
      } else if (stats.recent_14_days > 0) {
        console.log(`üü† –ú–ê–õ–û: ${stats.recent_14_days} reels –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π`);
      } else {
        console.log(`üî¥ –ù–ï–¢ –°–í–ï–ñ–ò–• –î–ê–ù–ù–´–• –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π`);
      }
      
      if (stats.year_2024_and_older > 0) {
        console.log(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: ${stats.year_2024_and_older} —Å—Ç–∞—Ä—ã—Ö reels (2024 –∏ —Ä–∞–Ω–µ–µ) - –Ω—É–∂–Ω–∞ –æ—á–∏—Å—Ç–∫–∞`);
      } else {
        console.log(`‚úÖ –ß–ò–°–¢–û: –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Ç–æ–ª—å–∫–æ 2025 –≥–æ–¥`);
      }
    }
    
    // –¢–æ–ø-5 —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö reels
    console.log(`\nüî• –¢–æ–ø-5 —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö reels:`);
    const freshReels = await sql`
      SELECT 
        author_username,
        views_count,
        published_at,
        source_type,
        source_identifier
      FROM reels 
      WHERE published_at IS NOT NULL
      ORDER BY published_at DESC 
      LIMIT 5
    `;
    
    freshReels.forEach((reel, index) => {
      const publishedDate = new Date(reel.published_at);
      const daysAgo = Math.floor((new Date() - publishedDate) / (1000 * 60 * 60 * 24));
      console.log(`${index + 1}. @${reel.author_username} - ${reel.views_count?.toLocaleString() || 'N/A'} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`);
      console.log(`   üìÖ ${publishedDate.toLocaleDateString()} (${daysAgo} –¥–Ω–µ–π –Ω–∞–∑–∞–¥) | ${reel.source_type}:${reel.source_identifier}`);
    });
    
    // 2. –ü–†–û–í–ï–†–ö–ê –°–í–Ø–ó–ï–ô –ö–û–ù–ö–£–†–ï–ù–¢–û–í
    console.log(`\n\nüè¢ 2. –ü–†–û–í–ï–†–ö–ê –°–í–Ø–ó–ï–ô –ö–û–ù–ö–£–†–ï–ù–¢–û–í:`);
    console.log('=================================');
    
    // –°–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const competitors = await sql`
      SELECT id, username, profile_url, is_active
      FROM competitors
      ORDER BY id
    `;
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: ${competitors.length}`);
    
    if (competitors.length === 0) {
      console.log(`‚ùå –ù–ï–¢ –ö–û–ù–ö–£–†–ï–ù–¢–û–í –í –ë–ê–ó–ï –î–ê–ù–ù–´–•!`);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ —Å reels
    console.log(`\nüîó –°–≤—è–∑–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —Å reels:`);
    
    for (const competitor of competitors) {
      // –ò—â–µ–º reels –ø–æ source_identifier
      const reelsByCompetitor = await sql`
        SELECT COUNT(*) as count
        FROM reels 
        WHERE source_type = 'competitor' 
        AND source_identifier = ${competitor.id.toString()}
      `;
      
      const reelsCount = reelsByCompetitor[0].count;
      const status = competitor.is_active ? '‚úÖ' : '‚ùå';
      const reelsStatus = reelsCount > 0 ? `‚úÖ ${reelsCount} reels` : '‚ùå –ù–µ—Ç reels';
      
      console.log(`${status} @${competitor.username} (ID: ${competitor.id})`);
      console.log(`   üìä ${reelsStatus}`);
      console.log(`   üîó ${competitor.profile_url}`);
    }
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ reels –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:`);
    const sourceStats = await sql`
      SELECT 
        source_type,
        source_identifier,
        COUNT(*) as count,
        AVG(views_count) as avg_views,
        MAX(views_count) as max_views
      FROM reels 
      WHERE source_type IS NOT NULL
      GROUP BY source_type, source_identifier
      ORDER BY count DESC
    `;
    
    sourceStats.forEach(stat => {
      const avgViews = Math.round(stat.avg_views || 0).toLocaleString();
      const maxViews = (stat.max_views || 0).toLocaleString();
      console.log(`üìà ${stat.source_type}:${stat.source_identifier} - ${stat.count} reels (avg: ${avgViews}, max: ${maxViews})`);
    });
    
    // 3. –ü–†–û–í–ï–†–ö–ê –•–≠–®–¢–ï–ì–û–í
    console.log(`\n\nüè∑Ô∏è 3. –ü–†–û–í–ï–†–ö–ê –°–í–Ø–ó–ï–ô –•–≠–®–¢–ï–ì–û–í:`);
    console.log('==============================');
    
    const hashtags = await sql`
      SELECT id, tag_name, is_active
      FROM hashtags
      ORDER BY id
    `;
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ö—ç—à—Ç–µ–≥–æ–≤ –≤ –±–∞–∑–µ: ${hashtags.length}`);
    
    if (hashtags.length > 0) {
      console.log(`\nüîó –°–≤—è–∑–∏ —Ö—ç—à—Ç–µ–≥–æ–≤ —Å reels:`);
      
      for (const hashtag of hashtags.slice(0, 5)) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        const reelsByHashtag = await sql`
          SELECT COUNT(*) as count
          FROM reels 
          WHERE source_type = 'hashtag' 
          AND source_identifier = ${hashtag.id.toString()}
        `;
        
        const reelsCount = reelsByHashtag[0].count;
        const status = hashtag.is_active ? '‚úÖ' : '‚ùå';
        const reelsStatus = reelsCount > 0 ? `‚úÖ ${reelsCount} reels` : '‚ùå –ù–µ—Ç reels';
        
        console.log(`${status} #${hashtag.tag_name} (ID: ${hashtag.id}) - ${reelsStatus}`);
      }
      
      if (hashtags.length > 5) {
        console.log(`   ... –∏ –µ—â–µ ${hashtags.length - 5} —Ö—ç—à—Ç–µ–≥–æ–≤`);
      }
    }
    
    // 4. –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    console.log(`\n\nüéØ 4. –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:`);
    console.log('============================');
    
    const totalReels = await sql`SELECT COUNT(*) as count FROM reels`;
    const competitorReels = await sql`SELECT COUNT(*) as count FROM reels WHERE source_type = 'competitor'`;
    const hashtagReels = await sql`SELECT COUNT(*) as count FROM reels WHERE source_type = 'hashtag'`;
    
    console.log(`üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ reels:`);
    console.log(`  - –í—Å–µ–≥–æ: ${totalReels[0].count}`);
    console.log(`  - –û—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${competitorReels[0].count}`);
    console.log(`  - –û—Ç —Ö—ç—à—Ç–µ–≥–æ–≤: ${hashtagReels[0].count}`);
    console.log(`  - –ë–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${totalReels[0].count - competitorReels[0].count - hashtagReels[0].count}`);
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (dateStats[0]?.recent_14_days < 50) {
      console.log(`\nüî¥ –ù–£–ñ–ï–ù –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –°–ö–†–ê–ü–ò–ù–ì:`);
      console.log(`   - –ú–∞–ª–æ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ 14 –¥–Ω–µ–π (${dateStats[0]?.recent_14_days || 0})`);
      console.log(`   - –ó–∞–ø—É—Å—Ç–∏—Ç—å: npm run scrape:bulk`);
    }
    
    if (competitorReels[0].count === 0) {
      console.log(`\nüî¥ –ù–£–ñ–ï–ù –°–ö–†–ê–ü–ò–ù–ì –ö–û–ù–ö–£–†–ï–ù–¢–û–í:`);
      console.log(`   - –ù–µ—Ç reels –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤`);
      console.log(`   - –ó–∞–ø—É—Å—Ç–∏—Ç—å: npx tsx src/scripts/bulk-scrape-competitors.ts 1 $APIFY_TOKEN 1 100`);
    }
    
    if (hashtagReels[0].count === 0) {
      console.log(`\nüî¥ –ù–£–ñ–ï–ù –°–ö–†–ê–ü–ò–ù–ì –•–≠–®–¢–ï–ì–û–í:`);
      console.log(`   - –ù–µ—Ç reels –æ—Ç —Ö—ç—à—Ç–µ–≥–æ–≤`);
      console.log(`   - –ó–∞–ø—É—Å—Ç–∏—Ç—å: npx tsx src/scripts/bulk-scrape-hashtags.ts 1 $APIFY_TOKEN 14 50000 100`);
    }
    
    if (dateStats[0]?.year_2024_and_older > 0) {
      console.log(`\nüü° –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –û–ß–ò–°–¢–ö–ê:`);
      console.log(`   - ${dateStats[0].year_2024_and_older} —Å—Ç–∞—Ä—ã—Ö reels`);
      console.log(`   - –£–¥–∞–ª–∏—Ç—å: DELETE FROM reels WHERE published_at < '2025-01-01'`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏:', error);
  }
}

checkDatesAndCompetitors().catch(console.error);
