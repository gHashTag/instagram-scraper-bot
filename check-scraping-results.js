/**
 * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
 */

require('dotenv').config();

async function checkScrapingResults() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –°–ö–†–ê–ü–ò–ù–ì–ê');
  console.log('=================================\n');

  if (!process.env.DATABASE_URL) {
    console.log('‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const { neon } = require('@neondatabase/serverless');
  const sql = neon(process.env.DATABASE_URL);

  try {
    // 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    const totalReels = await sql`SELECT COUNT(*) as count FROM reels WHERE project_id = 1`;
    const viralReels = await sql`SELECT COUNT(*) as count FROM reels WHERE project_id = 1 AND views_count >= 50000`;
    const withTranscripts = await sql`SELECT COUNT(*) as count FROM reels WHERE project_id = 1 AND transcript IS NOT NULL AND transcript != ''`;
    
    console.log(`   –í—Å–µ–≥–æ reels: ${totalReels[0].count}`);
    console.log(`   –í–∏—Ä—É—Å–Ω—ã—Ö (50K+): ${viralReels[0].count}`);
    console.log(`   –° —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏: ${withTranscripts[0].count}`);

    // 2. –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    console.log('\nüìà –ü–û –ò–°–¢–û–ß–ù–ò–ö–ê–ú:');
    const bySource = await sql`
      SELECT 
        source_type,
        COUNT(*) as count,
        MAX(views_count) as max_views,
        AVG(views_count) as avg_views
      FROM reels 
      WHERE project_id = 1
      GROUP BY source_type
      ORDER BY count DESC
    `;

    bySource.forEach(source => {
      const avgViews = Math.round(source.avg_views || 0).toLocaleString();
      const maxViews = (source.max_views || 0).toLocaleString();
      console.log(`   ${source.source_type || 'NULL'}: ${source.count} reels (—Å—Ä–µ–¥–Ω: ${avgViews}, –º–∞–∫—Å: ${maxViews})`);
    });

    // 3. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã
    console.log('\nüè¢ –ö–û–ù–ö–£–†–ï–ù–¢–´:');
    const competitors = await sql`
      SELECT id, username, last_scraped_at 
      FROM competitors 
      WHERE project_id = 1 AND is_active = true
      ORDER BY id
    `;

    for (const comp of competitors) {
      const competitorReels = await sql`
        SELECT COUNT(*) as count, MAX(views_count) as max_views
        FROM reels 
        WHERE project_id = 1 
        AND source_type = 'competitor' 
        AND source_identifier = ${comp.id.toString()}
      `;

      const reelsByUsername = await sql`
        SELECT COUNT(*) as count, MAX(views_count) as max_views
        FROM reels 
        WHERE project_id = 1 
        AND author_username = ${comp.username}
      `;

      const lastScraped = comp.last_scraped_at ? 
        new Date(comp.last_scraped_at).toLocaleString() : 
        '–ù–∏–∫–æ–≥–¥–∞';

      console.log(`   @${comp.username}:`);
      console.log(`     –ü–æ source_identifier: ${competitorReels[0].count} reels`);
      console.log(`     –ü–æ author_username: ${reelsByUsername[0].count} reels`);
      console.log(`     –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫—Ä–∞–ø–∏–Ω–≥: ${lastScraped}`);
    }

    // 4. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ
    console.log('\nüïê –ü–û–°–õ–ï–î–ù–ò–ï –î–û–ë–ê–í–õ–ï–ù–ù–´–ï:');
    const recent = await sql`
      SELECT 
        author_username,
        views_count,
        source_type,
        source_identifier,
        created_at
      FROM reels 
      WHERE project_id = 1
      ORDER BY created_at DESC 
      LIMIT 10
    `;

    recent.forEach((reel, index) => {
      const views = reel.views_count?.toLocaleString() || 'N/A';
      const createdTime = new Date(reel.created_at).toLocaleString();
      console.log(`   ${index + 1}. @${reel.author_username} - ${views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (${reel.source_type}:${reel.source_identifier}) - ${createdTime}`);
    });

    // 5. –¢–æ–ø –∞–≤—Ç–æ—Ä—ã
    console.log('\nüèÜ –¢–û–ü –ê–í–¢–û–†–´:');
    const topAuthors = await sql`
      SELECT 
        author_username,
        COUNT(*) as count,
        MAX(views_count) as max_views,
        AVG(views_count) as avg_views
      FROM reels 
      WHERE project_id = 1 AND author_username IS NOT NULL
      GROUP BY author_username 
      ORDER BY max_views DESC 
      LIMIT 10
    `;

    topAuthors.forEach((author, index) => {
      const avgViews = Math.round(author.avg_views || 0).toLocaleString();
      const maxViews = (author.max_views || 0).toLocaleString();
      console.log(`   ${index + 1}. @${author.author_username} - ${author.count} reels (–º–∞–∫—Å: ${maxViews}, —Å—Ä–µ–¥–Ω: ${avgViews})`);
    });

    // 6. –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏
    console.log('\n‚è∞ –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ò:');
    const timeAnalysis = await sql`
      SELECT 
        DATE(created_at) as date,
        COUNT(*) as count
      FROM reels 
      WHERE project_id = 1 
      AND created_at >= NOW() - INTERVAL '7 days'
      GROUP BY DATE(created_at)
      ORDER BY date DESC
    `;

    timeAnalysis.forEach(day => {
      console.log(`   ${day.date}: +${day.count} reels`);
    });

    // 7. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    console.log('\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:');
    
    const competitorReelsCount = await sql`
      SELECT COUNT(*) as count FROM reels 
      WHERE project_id = 1 AND source_type = 'competitor'
    `;

    if (competitorReelsCount[0].count > 0) {
      console.log('‚úÖ –û–¢–õ–ò–ß–ù–û! –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º');
    } else {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º');
    }

    if (totalReels[0].count > 150) {
      console.log('‚úÖ –û–¢–õ–ò–ß–ù–û! –ú–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    } else {
      console.log('‚ö†Ô∏è –ù–û–†–ú–ê: –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
    }

    const viralPercent = Math.round((viralReels[0].count / totalReels[0].count) * 100);
    if (viralPercent > 30) {
      console.log(`‚úÖ –û–¢–õ–ò–ß–ù–û! –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏: ${viralPercent}%`);
    } else {
      console.log(`‚ö†Ô∏è –ù–û–†–ú–ê: –ü—Ä–æ—Ü–µ–Ω—Ç –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏: ${viralPercent}%`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

checkScrapingResults().catch(console.error);
