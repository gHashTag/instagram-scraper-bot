import OpenAI from "openai";
import dotenv from "dotenv";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function testOpenAI() {
  console.log("üîß –¢–ï–°–¢ OPENAI API (–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è 999agents)");
  console.log("============================================");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const apiKey = process.env.OPENAI_API_KEY;
  if (!apiKey) {
    console.log("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env");
    return;
  }

  console.log(
    `üîë API Key –Ω–∞–π–¥–µ–Ω: ${apiKey.substring(0, 10)}...${apiKey.substring(apiKey.length - 10)}`
  );

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
    const openai = new OpenAI({
      apiKey: apiKey,
    });

    console.log("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π GPT –∑–∞–ø—Ä–æ—Å...");

    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç GPT-3.5
    const completion = await openai.chat.completions.create({
      messages: [{ role: "user", content: "–°–∫–∞–∂–∏ '–ø—Ä–∏–≤–µ—Ç' –Ω–∞ —Ä—É—Å—Å–∫–æ–º" }],
      model: "gpt-3.5-turbo",
      max_tokens: 50,
    });

    console.log("‚úÖ GPT API —Ä–∞–±–æ—Ç–∞–µ—Ç!");
    console.log(`üìù –û—Ç–≤–µ—Ç: ${completion.choices[0].message.content}`);

    console.log("\nüé§ –¢–µ—Å—Ç–∏—Ä—É–µ–º Whisper API...");

    // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    const fs = require("fs");
    const testAudioData = Buffer.from("test audio data");

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    const testFile = {
      arrayBuffer: () => Promise.resolve(testAudioData.buffer),
      name: "test.mp3",
      type: "audio/mpeg",
    } as any;

    try {
      const transcription = await openai.audio.transcriptions.create({
        file: testFile,
        model: "whisper-1",
      });

      console.log("‚úÖ Whisper API –¥–æ—Å—Ç—É–ø–µ–Ω!");
      console.log(`üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: ${transcription.text}`);
    } catch (whisperError: any) {
      console.log("‚ùå Whisper API –æ—à–∏–±–∫–∞:", whisperError.message);

      if (whisperError.message.includes("insufficient_quota")) {
        console.log("üö® –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤");
      } else if (whisperError.message.includes("billing")) {
        console.log("üö® –ü–†–û–ë–õ–ï–ú–ê: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏–ª–ª–∏–Ω–≥–∞");
      }
    }
  } catch (error: any) {
    console.log("‚ùå OpenAI API –æ—à–∏–±–∫–∞:", error.message);

    if (error.message.includes("quota")) {
      console.log("üö® –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã");
      console.log(
        "üí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://platform.openai.com/settings/organization/billing"
      );
    } else if (error.message.includes("authentication")) {
      console.log("üö® –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á");
      console.log("üí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ");
    } else {
      console.log("üö® –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:", error);
    }
  }

  console.log("\nüìä –¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–°:");
  console.log("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
  console.log("‚úÖ API –∫–ª—é—á –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ 999agents");
  console.log("‚úÖ $59.24 –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏");
  console.log("‚úÖ –ö–æ–¥ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
  console.log("‚ùì –ù—É–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Whisper API");
}

testOpenAI().catch(console.error);
