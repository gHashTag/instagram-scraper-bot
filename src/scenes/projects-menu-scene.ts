import { Scenes, Markup } from "telegraf";
import { ScraperBotContext } from "../types";
import { logger } from "../utils/logger";
import { Project } from "../schemas";
import { LogType } from "../utils/logger";
import { –º–µ–Ω—é } from "./components/projects-menu";

// –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é —Å—Ü–µ–Ω—É (–Ω–µ wizard) –¥–ª—è –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤
const projectsMenuScene = new Scenes.BaseScene<ScraperBotContext>(
  "projects_menu"
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
function generateProjectsMenuKeyboard(projects: Project[]) {
  const buttons = [];

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∞
  for (const project of projects) {
    buttons.push([
      Markup.button.callback(
        `üìÅ ${project.name}`,
        `select_project_${project.id}`
      ),
      Markup.button.callback("üóëÔ∏è", `delete_project_${project.id}`),
    ]);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
  buttons.push([
    Markup.button.callback("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", "create_new_project"),
  ]);

  buttons.push([
    Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main_menu"),
  ]);

  return Markup.inlineKeyboard(buttons);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
projectsMenuScene.enter(async (ctx) => {
  console.log(
    "[USER_SCENARIO_DEBUG] >>> SCENE 'projects_menu': ENTER handler START"
  );
  if (!ctx.session) {
    console.error(
      "[USER_SCENARIO_DEBUG] SCENE 'projects_menu': ERROR - ctx.session is UNDEFINED on enter!"
    );
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start."
    );
    return ctx.scene.leave();
  }
  const userId = ctx.session.user?.id;

  if (!userId) {
    console.error(
      "[USER_SCENARIO_DEBUG] SCENE 'projects_menu': ERROR - User ID not found in session on enter!"
    );
    await ctx.reply(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start."
    );
    return ctx.scene.leave();
  }
  console.log(
    `[USER_SCENARIO_DEBUG] SCENE 'projects_menu': User ID in session: ${userId}`
  );

  try {
    console.log(
      `[USER_SCENARIO_DEBUG] SCENE 'projects_menu': Attempting to get projects for user ID: ${userId}`
    );
    const projects = await ctx.storage.getProjectsByUserId(userId);
    console.log(
      `[USER_SCENARIO_DEBUG] SCENE 'projects_menu': Found ${projects.length} projects.`
    );

    if (projects.length === 0) {
      console.log(
        "[USER_SCENARIO_DEBUG] SCENE 'projects_menu': No projects found, showing 'no projects' message and create button."
      );
      await ctx.reply(
        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π?",
        Markup.inlineKeyboard([
          Markup.button.callback("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", "create_project"),
          Markup.button.callback("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu_leave"),
        ])
      );
    } else {
      console.log(
        "[USER_SCENARIO_DEBUG] SCENE 'projects_menu': Projects found, generating projects menu keyboard."
      );
      const keyboard = –º–µ–Ω—é.generateProjectsMenuKeyboard(projects);
      await ctx.reply("–í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:", Markup.inlineKeyboard(keyboard));
      console.log(
        "[USER_SCENARIO_DEBUG] SCENE 'projects_menu': Projects menu keyboard sent."
      );
    }
  } catch (error) {
    logger.error(
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤:",
      error,
      { userId, type: "ERROR" } // –î–æ–±–∞–≤–ª—è–µ–º type: "ERROR"
    );
    console.error(
      "[USER_SCENARIO_DEBUG] SCENE 'projects_menu': ERROR while getting/displaying projects:",
      error
    );
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  }
  console.log(
    "[USER_SCENARIO_DEBUG] <<< SCENE 'projects_menu': ENTER handler END"
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
projectsMenuScene.action(/select_project_(\d+)/, async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("[ProjectsMenu] –û—à–∏–±–∫–∞ answerCbQuery:", error);
  }

  const projectId = parseInt(ctx.match[1]);
  logger.info(`[ProjectsMenu] Project ${projectId} selected`);

  try {
    await ctx.storage.initialize();
    const project = await ctx.storage.getProjectById(projectId);

    if (!project) {
      await ctx.reply("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const user = await ctx.storage.getUserByTelegramId(ctx.from?.id || 0);
    if (!user) {
      await ctx.reply("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    // –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê
    const userId = typeof user.id === "string" ? user.id : String(user.id);
    ctx.projectContext.set(projectId, project.name, userId);
    logger.info(
      `[ProjectsMenu] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞: ${project.name} (ID: ${projectId}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`
    );

    // –£–±–∏—Ä–∞–µ–º –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
    await ctx.reply(
      `üìÅ *–ü—Ä–æ–µ–∫—Ç: ${project.name}* \\(–≤—ã–±—Ä–∞–Ω\\)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      {
        parse_mode: "MarkdownV2",
        reply_markup: {
          remove_keyboard: true, // –£–±–∏—Ä–∞–µ–º –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é
          inline_keyboard: [
            [
              {
                text: "üè∑Ô∏è –•–µ—à—Ç–µ–≥–∏",
                callback_data: `manage_hashtags_${projectId}`,
              },
              {
                text: "üè¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã",
                callback_data: `manage_competitors_${projectId}`,
              },
            ],
            [
              {
                text: "üé¨ –†–∏–ª—Å—ã",
                callback_data: `view_reels_${projectId}`,
              },
              {
                text: "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
                callback_data: `view_analytics_${projectId}`,
              },
            ],
            [
              {
                text: "üöÄ –°–∫—Ä–∞–ø–∏–Ω–≥",
                callback_data: `start_scraping_${projectId}`,
              },
              {
                text: "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                callback_data: `manage_notifications_${projectId}`,
              },
            ],
            [
              {
                text: "ü§ñ –ß–∞—Ç-–±–æ—Ç",
                callback_data: `manage_chatbot_${projectId}`,
              },
              {
                text: "üìö –ö–æ–ª–ª–µ–∫—Ü–∏–∏",
                callback_data: `manage_collections_${projectId}`,
              },
            ],
            [
              {
                text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º",
                callback_data: "back_to_projects_list",
              },
            ],
          ],
        },
      }
    );
  } catch (error) {
    logger.error(`[ProjectsMenu] Error selecting project ${projectId}:`, {
      type: LogType.ERROR,
      error: error instanceof Error ? error : new Error(String(error)),
    });
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞.");
  } finally {
    await ctx.storage.close();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
projectsMenuScene.action("create_new_project", async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("[ProjectsMenu] –û—à–∏–±–∫–∞ answerCbQuery:", error);
  }

  logger.info("[ProjectsMenu] Create new project button clicked");

  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ wizard —Å—Ü–µ–Ω—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
  await ctx.scene.enter("project_wizard");
  // Wizard –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–Ω–µ—Ç —Å —à–∞–≥–∞ 1, –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –±—É–¥–µ—Ç –≤–Ω—É—Ç—Ä–∏ wizard'–∞
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
projectsMenuScene.action(/delete_project_(\d+)/, async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("[ProjectsMenu] –û—à–∏–±–∫–∞ answerCbQuery:", error);
  }

  const projectId = parseInt(ctx.match[1]);
  logger.info(`[ProjectsMenu] Delete project ${projectId} requested`);

  try {
    await ctx.storage.initialize();

    const project = await ctx.storage.getProjectById(projectId);
    if (!project) {
      await ctx.reply("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    await ctx.editMessageText(
      `üóëÔ∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç "${project.name}"?\n\n‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`,
      {
        parse_mode: "MarkdownV2",
        ...Markup.inlineKeyboard([
          [
            Markup.button.callback(
              "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
              `confirm_delete_${projectId}`
            ),
            Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "back_to_projects_list"),
          ],
        ]),
      }
    );
  } catch (error) {
    logger.error(
      `[ProjectsMenu] Error preparing delete for project ${projectId}:`,
      {
        type: LogType.ERROR,
        error: error instanceof Error ? error : new Error(String(error)),
      }
    );
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–∏—è.");
  } finally {
    await ctx.storage.close();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
projectsMenuScene.action(/confirm_delete_(\d+)/, async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("[ProjectsMenu] –û—à–∏–±–∫–∞ answerCbQuery:", error);
  }

  const projectId = parseInt(ctx.match[1]);
  logger.info(`[ProjectsMenu] Confirming delete project ${projectId}`);

  try {
    await ctx.storage.initialize();

    const project = await ctx.storage.getProjectById(projectId);
    if (!project) {
      await ctx.reply("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ –∞–¥–∞–ø—Ç–µ—Ä)
    await ctx.storage.deleteProject(projectId);

    await ctx.editMessageText(
      `‚úÖ –ü—Ä–æ–µ–∫—Ç "${project.name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`,
      Markup.inlineKeyboard([
        [
          Markup.button.callback(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤",
            "back_to_projects_list"
          ),
        ],
      ])
    );

    logger.info(`[ProjectsMenu] Project ${projectId} deleted successfully`);
  } catch (error) {
    logger.error(`[ProjectsMenu] Error deleting project ${projectId}:`, {
      type: LogType.ERROR,
      error: error instanceof Error ? error : new Error(String(error)),
    });
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.");
  } finally {
    await ctx.storage.close();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤
projectsMenuScene.action("back_to_projects_list", async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("[ProjectsMenu] –û—à–∏–±–∫–∞ answerCbQuery:", error);
  }

  logger.info("[ProjectsMenu] Back to projects list requested");

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω—É (–≤—ã–∑—ã–≤–∞–µ–º enter –∑–∞–Ω–æ–≤–æ)
  await ctx.scene.reenter();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
projectsMenuScene.action("back_to_main_menu", async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("[ProjectsMenu] –û—à–∏–±–∫–∞ answerCbQuery:", error);
  }

  logger.info("[ProjectsMenu] Back to main menu requested");

  // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  await ctx.scene.leave();

  const username =
    ctx.session?.user?.username || ctx.from?.first_name || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
  const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${username}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`;

  // –£–±–∏—Ä–∞–µ–º –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  await ctx.reply(welcomeMessage, {
    reply_markup: { remove_keyboard: true },
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
projectsMenuScene.action(/manage_hashtags_(\d+)/, async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("[ProjectsMenu] –û—à–∏–±–∫–∞ answerCbQuery:", error);
  }

  const projectId = parseInt(ctx.match[1]);
  logger.info(`[ProjectsMenu] Manage hashtags for project ${projectId}`);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º projectId –≤ —Å–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ hashtag_wizard
  if (ctx.session) {
    ctx.session.selectedProjectId = projectId;
    ctx.session.currentProjectId = projectId;
  }

  await ctx.scene.enter("hashtag_wizard");
});

projectsMenuScene.action(/manage_competitors_(\d+)/, async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("[ProjectsMenu] –û—à–∏–±–∫–∞ answerCbQuery:", error);
  }

  const projectId = parseInt(ctx.match[1]);
  logger.info(`[ProjectsMenu] Manage competitors for project ${projectId}`);

  if (ctx.session) {
    ctx.session.selectedProjectId = projectId;
    ctx.session.currentProjectId = projectId;
  }

  await ctx.scene.enter("competitor_wizard");
});

projectsMenuScene.action(/view_reels_(\d+)/, async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("[ProjectsMenu] –û—à–∏–±–∫–∞ answerCbQuery:", error);
  }

  const projectId = parseInt(ctx.match[1]);
  logger.info(`[ProjectsMenu] View reels for project ${projectId}`);

  if (ctx.session) {
    ctx.session.selectedProjectId = projectId;
    ctx.session.currentProjectId = projectId;
  }

  await ctx.scene.enter("reels_wizard");
});

projectsMenuScene.action(/view_analytics_(\d+)/, async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("[ProjectsMenu] –û—à–∏–±–∫–∞ answerCbQuery:", error);
  }

  const projectId = parseInt(ctx.match[1]);
  logger.info(`[ProjectsMenu] View analytics for project ${projectId}`);

  if (ctx.session) {
    ctx.session.selectedProjectId = projectId;
    ctx.session.currentProjectId = projectId;
  }

  await ctx.scene.enter("analytics_wizard");
});

projectsMenuScene.action(/start_scraping_(\d+)/, async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("[ProjectsMenu] –û—à–∏–±–∫–∞ answerCbQuery:", error);
  }

  const projectId = parseInt(ctx.match[1]);
  logger.info(`[ProjectsMenu] Start scraping for project ${projectId}`);

  if (ctx.session) {
    ctx.session.selectedProjectId = projectId;
    ctx.session.currentProjectId = projectId;
  }

  await ctx.scene.enter("scraping_wizard");
});

projectsMenuScene.action(/manage_notifications_(\d+)/, async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("[ProjectsMenu] –û—à–∏–±–∫–∞ answerCbQuery:", error);
  }

  const projectId = parseInt(ctx.match[1]);
  logger.info(`[ProjectsMenu] Manage notifications for project ${projectId}`);

  if (ctx.session) {
    ctx.session.selectedProjectId = projectId;
    ctx.session.currentProjectId = projectId;
  }

  await ctx.scene.enter("notification_wizard");
});

projectsMenuScene.action(/manage_chatbot_(\d+)/, async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("[ProjectsMenu] –û—à–∏–±–∫–∞ answerCbQuery:", error);
  }

  const projectId = parseInt(ctx.match[1]);
  logger.info(`[ProjectsMenu] Manage chatbot for project ${projectId}`);

  if (ctx.session) {
    ctx.session.selectedProjectId = projectId;
    ctx.session.currentProjectId = projectId;
  }

  await ctx.scene.enter("chatbot_wizard");
});

projectsMenuScene.action(/manage_collections_(\d+)/, async (ctx) => {
  try {
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("[ProjectsMenu] –û—à–∏–±–∫–∞ answerCbQuery:", error);
  }

  const projectId = parseInt(ctx.match[1]);
  logger.info(`[ProjectsMenu] Manage collections for project ${projectId}`);

  if (ctx.session) {
    ctx.session.selectedProjectId = projectId;
    ctx.session.currentProjectId = projectId;
  }

  await ctx.scene.enter("reels_collection_wizard");
});

export default projectsMenuScene;
