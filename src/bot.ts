import * as dotenv from "dotenv";
import { Telegraf, session, Markup } from "telegraf";
import { NeonAdapter } from "./adapters/neon-adapter";
import { setupInstagramScraperBot, createScenesStage } from "../index";
import { logger, LogLevel, LogType } from "./utils/logger";
import {
  projectContextMiddleware,
  handleGotoProjects,
} from "./middleware/project-context-middleware";
import type {
  ScraperBotContext,
  InstagramScraperBotConfig,
  StorageAdapter,
} from "./types";

// –ü–µ—Ä–µ–Ω–æ—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ storageAdapter –≤ –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
let storageAdapter: NeonAdapter | undefined;

async function ensureUserMiddleware(
  ctx: ScraperBotContext,
  next: () => Promise<void>
) {
  console.log("[DEBUG] ensureUserMiddleware: –ó–∞–ø—É—Å–∫...");
  if (!ctx.from?.id) {
    console.warn("[DEBUG] ensureUserMiddleware: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ ctx.from.id.");
    return;
  }
  const telegramId = ctx.from.id;
  console.log(
    `[DEBUG] ensureUserMiddleware: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}.`
  );
  if (!ctx.storage) {
    console.error(
      "[ERROR] ensureUserMiddleware: Middleware –≤—ã–∑–≤–∞–Ω–æ –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ctx.storage"
    );
    // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    if (ctx.reply) {
      await ctx
        .reply(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        .catch(() => {});
    }
    return;
  }
  try {
    console.log(
      `[DEBUG] ensureUserMiddleware: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}...`
    );
    let user = await ctx.storage.getUserByTelegramId(telegramId);
    if (!user) {
      console.log(
        `[INFO] ensureUserMiddleware: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è...`
      );
      const username =
        ctx.from.username || ctx.from.first_name || `User_${telegramId}`;
      console.log(
        `[DEBUG] ensureUserMiddleware: –í—ã–∑–æ–≤ createUser –¥–ª—è ${telegramId} —Å username \"${username}\"...`
      );
      user = await ctx.storage.createUser(
        telegramId,
        username,
        ctx.from.first_name,
        ctx.from.last_name,
        ctx.from.is_bot,
        ctx.from.language_code
      );
      if (user) {
        console.log(
          `[INFO] ensureUserMiddleware: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} (${username}) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. ID –≤ –±–∞–∑–µ: ${user.id}`
        );
      } else {
        console.error(
          `[ERROR] ensureUserMiddleware: createUser –¥–ª—è ${telegramId} –≤–µ—Ä–Ω—É–ª ${user}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï —Å–æ–∑–¥–∞–Ω.`
        );
        if (ctx.reply) {
          await ctx
            .reply(
              "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∞—à—É —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            .catch(() => {});
        }
        return;
      }
    } else {
      console.log(
        `[INFO] ensureUserMiddleware: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} (${user.username || "–±–µ–∑ username"}) –Ω–∞–π–¥–µ–Ω. ID –≤ –±–∞–∑–µ: ${user.id}.`
      );
    }
    console.log(
      `[DEBUG] ensureUserMiddleware: –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ ctx.session.user –¥–ª—è ${telegramId}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`,
      JSON.stringify(user)
    );
    if (!ctx.session) {
      console.warn(
        "[DEBUG] ensureUserMiddleware: ctx.session –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ–º user, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º."
      );
      ctx.session = {};
    }
    ctx.session.user = user;
    console.log(
      `[DEBUG] ensureUserMiddleware: ctx.session.user —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–≤–æ–µ–Ω–æ –¥–ª—è ${telegramId}.`
    );
  } catch (error) {
    console.error(
      `[ERROR] ensureUserMiddleware: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}:`,
      error
    );
    if (ctx.reply) {
      await ctx
        .reply(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        .catch(() => {});
    }
    return;
  }
  console.log(
    `[DEBUG] ensureUserMiddleware: –í—ã–∑–æ–≤ next() –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}.`
  );
  return next();
}

async function startBot() {
  dotenv.config();
  logger.configure({
    logToConsole: true,
    minLevel: LogLevel.DEBUG,
  });
  logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞", { type: LogType.SYSTEM });

  const BOT_TOKEN = process.env.BOT_TOKEN;
  const DATABASE_URL = process.env.DATABASE_URL;

  if (!BOT_TOKEN) {
    console.error("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.");
    process.exit(1);
  }
  if (!DATABASE_URL) {
    console.error("–û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.");
    process.exit(1);
  }

  try {
    console.log("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–∑ src/bot.ts...");
    const bot = new Telegraf<ScraperBotContext>(BOT_TOKEN);

    // 1. Middleware –¥–ª—è —Å–µ—Å—Å–∏–π (Telegraf)
    console.log("[DEBUG] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Telegraf session middleware...");
    bot.use(session());

    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    console.log("[DEBUG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NeonAdapter...");
    storageAdapter = new NeonAdapter();
    console.log("[DEBUG] –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î...");
    await storageAdapter.initialize(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –∑–¥–µ—Å—å
    console.log("[DEBUG] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.");
    console.log(
      "[DEBUG] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è storageAdapter –≤ ctx..."
    );
    bot.use((ctx, next) => {
      ctx.storage = storageAdapter as StorageAdapter;
      return next();
    });

    // 3. Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏/—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log("[DEBUG] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ensureUserMiddleware...");
    bot.use(ensureUserMiddleware);

    // 4. Middleware –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
    console.log("[DEBUG] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è projectContextMiddleware...");
    bot.use(projectContextMiddleware);

    // 5. –ì–ª–æ–±–∞–ª—å–Ω—ã–π middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (USER_SCENARIO_DEBUG)
    console.log(
      "[DEBUG] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è USER_SCENARIO_DEBUG..."
    );
    bot.use(async (ctx, next) => {
      console.log(
        "[USER_SCENARIO_DEBUG] >>> Global Detailed Log Middleware: START"
      );
      if (
        ctx.updateType === "message" &&
        ctx.message &&
        "text" in ctx.message &&
        ctx.message.text
      ) {
        console.log(
          `[USER_SCENARIO_DEBUG] Global Detailed Log: Received text message: "${ctx.message.text}"`
        );
      } else if (
        ctx.updateType === "callback_query" &&
        ctx.callbackQuery &&
        "data" in ctx.callbackQuery
      ) {
        console.log(
          `[USER_SCENARIO_DEBUG] Global Detailed Log: Received callback_query: "${ctx.callbackQuery.data}"`
        );
      } else {
        console.log(
          `[USER_SCENARIO_DEBUG] Global Detailed Log: Received update of type: "${ctx.updateType}", Update: ${JSON.stringify(ctx.update, null, 2)}`
        );
      }
      if (!ctx.session) {
        console.log(
          "[USER_SCENARIO_DEBUG] Global Detailed Log: ctx.session is MISSING, initializing."
        );
        ctx.session = {};
      } else {
        console.log(
          "[USER_SCENARIO_DEBUG] Global Detailed Log: ctx.session EXISTS."
        );
      }
      console.log(
        "[USER_SCENARIO_DEBUG] <<< Global Detailed Log Middleware: END, calling next()"
      );
      return next();
    });

    // 6. –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Stage —Å —Å—Ü–µ–Ω–∞–º–∏
    console.log("[DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ Stage —Å–æ —Å—Ü–µ–Ω–∞–º–∏...");
    const stage = createScenesStage(storageAdapter);
    console.log("[DEBUG] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Stage middleware...");
    bot.use(stage.middleware());

    // 7. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞
    // –£–ø—Ä–æ—â–∞–µ–º config, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –¥–ª—è setupInstagramScraperBot
    const config: InstagramScraperBotConfig = {
      // telegramBotToken: BOT_TOKEN, // BOT_TOKEN —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegraf
      apifyToken: process.env.APIFY_TOKEN, // –ü–µ—Ä–µ–¥–∞–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å undefined, –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏
      openaiApiKey: process.env.OPENAI_API_KEY, // –ü–µ—Ä–µ–¥–∞–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å undefined
      adminUserId: process.env.ADMIN_USER_ID
        ? parseInt(process.env.ADMIN_USER_ID)
        : undefined,
    };
    console.log(
      "[DEBUG] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (setupInstagramScraperBot)..."
    );
    setupInstagramScraperBot(bot, storageAdapter, config);
    console.log("[DEBUG] –ú–æ–¥—É–ª—å –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.");

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã) –ü–û–°–õ–ï stage middleware
    console.log(
      "[DEBUG] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤..."
    );
    bot.action("goto_projects", handleGotoProjects);
    bot.hears("üìä –ü—Ä–æ–µ–∫—Ç—ã", async (ctx) => {
      console.log("[USER_SCENARIO_DEBUG] >>> HEARS 'üìä –ü—Ä–æ–µ–∫—Ç—ã': START");
      if (!ctx.session) {
        console.error(
          "[USER_SCENARIO_DEBUG] HEARS 'üìä –ü—Ä–æ–µ–∫—Ç—ã': ctx.session is UNDEFINED!"
        );
        await ctx.reply(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start."
        );
        return;
      }
      if (!ctx.scene) {
        console.error(
          "[USER_SCENARIO_DEBUG] HEARS 'üìä –ü—Ä–æ–µ–∫—Ç—ã': ctx.scene is UNDEFINED!"
        );
        await ctx.reply(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start."
        );
        return;
      }
      try {
        await ctx.scene.enter("projects_menu");
        console.log(
          "[USER_SCENARIO_DEBUG] <<< HEARS 'üìä –ü—Ä–æ–µ–∫—Ç—ã': Successfully entered 'projects_menu' scene."
        );
      } catch (e) {
        console.error(
          "[USER_SCENARIO_DEBUG] HEARS 'üìä –ü—Ä–æ–µ–∫—Ç—ã': ERROR entering scene `projects_menu`:",
          e
        );
        await ctx
          .reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
          .catch(() => {});
      }
    });
    console.log(
      "[DEBUG] –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."
    );

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Telegraf
    bot.catch((err: any, ctx: ScraperBotContext) => {
      console.error(`[ERROR] Telegraf error for ${ctx.updateType}:`, err);
      const trace = err instanceof Error ? err.stack : "No stack trace";
      console.error("Stack trace:", trace);
      logger.error("–û—à–∏–±–∫–∞ Telegraf", {
        type: LogType.ERROR,
        error: err instanceof Error ? err : new Error(String(err)),
        data: {
          updateType: ctx.updateType,
          update: ctx.update,
          stackTrace: trace,
        },
        userId: ctx.from?.id,
        username: ctx.from?.username,
      });
      if (ctx.reply) {
        ctx
          .reply("–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è.")
          .catch((e) =>
            console.error("[ERROR] Sending error reply failed:", e)
          );
      }
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞
    // const commands = setupInstagramScraperBot.getCommands(); // –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ –∏–∑ setupInstagramScraperBot
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ setupInstagramScraperBot –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –∏ –≤–µ—Ä–Ω—É–ª –∫–æ–º–∞–Ω–¥—ã
    // –ü–æ–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ getCommands –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
    // console.log('üìã –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –±–æ—Ç–∞...');
    // bot.telegram.setMyCommands(scraperBot.getCommands()) // scraperBot —Ç–µ–ø–µ—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç setupInstagramScraperBot
    //   .then(() => {
    //     console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞!');
    //   })
    //   .catch((err) => {
    //     console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –±–æ—Ç–∞:', err);
    //   });

    console.log("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (bot.launch)...");
    await bot.launch();
    console.log("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!");
  } catch (error) {
    console.error(
      "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:",
      error
    );
    if (storageAdapter) {
      await storageAdapter
        .close()
        .catch((e) =>
          console.error(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞ –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏:",
            e
          )
        );
    }
    process.exit(1);
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
const stopBot = async (signal: string) => {
  console.log(`üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...`);
  // Telegraf bot.stop() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è SIGINT/SIGTERM, –µ—Å–ª–∏ bot.launch() –±—ã–ª –≤—ã–∑–≤–∞–Ω
  // bot.stop(signal);
  if (storageAdapter) {
    try {
      await storageAdapter.close();
      console.log("üíæ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:", error);
    }
  }
  process.exit(0); // –í—ã—Ö–æ–¥–∏–º —Å –∫–æ–¥–æ–º 0 –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
};

process.once("SIGINT", () => stopBot("SIGINT"));
process.once("SIGTERM", () => stopBot("SIGTERM"));

startBot();
