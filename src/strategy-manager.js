/**
 * üïâÔ∏è STRATEGY MANAGER - –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã
 * 
 * –ü—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Instagram —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π —á–µ—Ä–µ–∑ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
 */

const fs = require('fs');
const path = require('path');

class StrategyManager {
  constructor(configPath = './config/instagram-strategy.json') {
    this.configPath = configPath;
    this.config = this.loadConfig();
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON
   */
  loadConfig() {
    try {
      const configFile = fs.readFileSync(this.configPath, 'utf8');
      return JSON.parse(configFile);
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ JSON
   */
  saveConfig() {
    try {
      fs.writeFileSync(this.configPath, JSON.stringify(this.config, null, 2));
      console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
   */
  getStrategy() {
    return this.config;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç
   */
  applyPreset(presetName) {
    if (!this.config.presets[presetName]) {
      throw new Error(`–ü—Ä–µ—Å–µ—Ç "${presetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const preset = this.config.presets[presetName];
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ—Å–µ—Ç–∞
    this.config.scraping.mode = presetName;
    this.config.scraping.minViews = preset.minViews;
    this.config.scraping.maxAgeDays = preset.maxAgeDays;
    this.config.scraping.onlyRealViews = preset.onlyRealViews;

    console.log(`‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–µ—Å–µ—Ç: ${presetName} - ${preset.description}`);
    return this;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
   */
  setMinViews(views) {
    this.config.scraping.minViews = views;
    console.log(`‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${views}`);
    return this;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  setLimit(total, perSource = null) {
    this.config.scraping.totalLimit = total;
    if (perSource) {
      this.config.scraping.perSourceLimit = perSource;
    }
    console.log(`‚úÖ –õ–∏–º–∏—Ç—ã: ${total} –æ–±—â–∏–π, ${perSource || '–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'} –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫`);
    return this;
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Ö—ç—à—Ç–µ–≥
   */
  addHashtag(tag, priority = 3, limit = 50) {
    const hashtag = {
      tag: tag.replace('#', ''),
      priority,
      limit
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ö—ç—à—Ç–µ–≥
    const existingIndex = this.config.sources.hashtags.findIndex(h => h.tag === hashtag.tag);
    
    if (existingIndex >= 0) {
      this.config.sources.hashtags[existingIndex] = hashtag;
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ö—ç—à—Ç–µ–≥: #${hashtag.tag}`);
    } else {
      this.config.sources.hashtags.push(hashtag);
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ö—ç—à—Ç–µ–≥: #${hashtag.tag}`);
    }
    
    return this;
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —Ö—ç—à—Ç–µ–≥
   */
  removeHashtag(tag) {
    const cleanTag = tag.replace('#', '');
    this.config.sources.hashtags = this.config.sources.hashtags.filter(h => h.tag !== cleanTag);
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω —Ö—ç—à—Ç–µ–≥: #${cleanTag}`);
    return this;
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
   */
  addCompetitor(username, priority = 3, limit = 30, notes = '') {
    const competitor = {
      username: username.replace('@', ''),
      priority,
      limit,
      notes
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç
    const existingIndex = this.config.sources.competitors.findIndex(c => c.username === competitor.username);
    
    if (existingIndex >= 0) {
      this.config.sources.competitors[existingIndex] = competitor;
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç: @${competitor.username}`);
    } else {
      this.config.sources.competitors.push(competitor);
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç: @${competitor.username}`);
    }
    
    return this;
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
   */
  removeCompetitor(username) {
    const cleanUsername = username.replace('@', '');
    this.config.sources.competitors = this.config.sources.competitors.filter(c => c.username !== cleanUsername);
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç: @${cleanUsername}`);
    return this;
  }

  /**
   * –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel
   */
  toggleExcel(enabled = null) {
    if (enabled === null) {
      this.config.output.excel.enabled = !this.config.output.excel.enabled;
    } else {
      this.config.output.excel.enabled = enabled;
    }
    
    console.log(`‚úÖ Excel —ç–∫—Å–ø–æ—Ä—Ç: ${this.config.output.excel.enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
    return this;
  }

  /**
   * –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å Obsidian —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
   */
  toggleObsidian(enabled = null) {
    if (enabled === null) {
      this.config.output.obsidian.enabled = !this.config.output.obsidian.enabled;
    } else {
      this.config.output.obsidian.enabled = enabled;
    }
    
    console.log(`‚úÖ Obsidian —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ${this.config.output.obsidian.enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
    return this;
  }

  /**
   * –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  toggleTelegram(enabled = null) {
    if (enabled === null) {
      this.config.output.notifications.telegram.enabled = !this.config.output.notifications.telegram.enabled;
    } else {
      this.config.output.notifications.telegram.enabled = enabled;
    }
    
    console.log(`‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${this.config.output.notifications.telegram.enabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}`);
    return this;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ö—ç—à—Ç–µ–≥–æ–≤
   */
  getHashtags() {
    return this.config.sources.hashtags.map(h => `#${h.tag} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${h.priority}, –ª–∏–º–∏—Ç: ${h.limit})`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
   */
  getCompetitors() {
    return this.config.sources.competitors.map(c => `@${c.username} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${c.priority}, –ª–∏–º–∏—Ç: ${c.limit})`);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  showStatus() {
    console.log('\nüïâÔ∏è –¢–ï–ö–£–©–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:');
    console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${this.config.strategy.name}`);
    console.log(`üéØ –†–µ–∂–∏–º: ${this.config.scraping.mode}`);
    console.log(`üëÅÔ∏è –ú–∏–Ω. –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${this.config.scraping.minViews.toLocaleString()}`);
    console.log(`üìÖ –ú–∞–∫—Å. –≤–æ–∑—Ä–∞—Å—Ç: ${this.config.scraping.maxAgeDays} –¥–Ω–µ–π`);
    console.log(`‚úÖ –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${this.config.scraping.onlyRealViews ? '–¥–∞' : '–Ω–µ—Ç'}`);
    console.log(`üî¢ –õ–∏–º–∏—Ç—ã: ${this.config.scraping.totalLimit} –æ–±—â–∏–π, ${this.config.scraping.perSourceLimit} –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫`);
    
    console.log('\nüè∑Ô∏è –•–≠–®–¢–ï–ì–ò:');
    this.getHashtags().forEach(tag => console.log(`  ${tag}`));
    
    console.log('\nüè¢ –ö–û–ù–ö–£–†–ï–ù–¢–´:');
    this.getCompetitors().forEach(comp => console.log(`  ${comp}`));
    
    console.log('\nüìä –≠–ö–°–ü–û–†–¢:');
    console.log(`  üìÑ Excel: ${this.config.output.excel.enabled ? '‚úÖ' : '‚ùå'}`);
    console.log(`  üìù Obsidian: ${this.config.output.obsidian.enabled ? '‚úÖ' : '‚ùå'}`);
    console.log(`  üì± Telegram: ${this.config.output.notifications.telegram.enabled ? '‚úÖ' : '‚ùå'}`);
    
    return this;
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞
   */
  quickSetup(preset, hashtags = [], competitors = [], minViews = null) {
    console.log('\nüöÄ –ë–´–°–¢–†–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–¢–ï–ì–ò–ò...');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ—Å–µ—Ç
    this.applyPreset(preset);
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    this.config.sources.hashtags = [];
    this.config.sources.competitors = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ö—ç—à—Ç–µ–≥–∏
    hashtags.forEach(tag => this.addHashtag(tag));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    competitors.forEach(comp => this.addCompetitor(comp));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
    if (minViews) {
      this.setMinViews(minViews);
    }
    
    console.log('\n‚úÖ –ë–´–°–¢–†–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
    this.showStatus();
    
    return this;
  }
}

module.exports = StrategyManager;

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞:
if (require.main === module) {
  console.log('üïâÔ∏è –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø STRATEGY MANAGER\n');
  
  const strategy = new StrategyManager();
  
  // –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
  strategy
    .quickSetup(
      'viral',                                    // –ü—Ä–µ—Å–µ—Ç
      ['aestheticclinic', 'botox', 'antiaging'], // –•—ç—à—Ç–µ–≥–∏
      ['competitor1', 'competitor2'],             // –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã
      75000                                       // –ú–∏–Ω. –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
    )
    .toggleExcel(true)                           // –í–∫–ª—é—á–∏—Ç—å Excel
    .toggleObsidian(true)                        // –í–∫–ª—é—á–∏—Ç—å Obsidian
    .toggleTelegram(true)                        // –í–∫–ª—é—á–∏—Ç—å Telegram
    .saveConfig();                               // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
}
