/**
 * üïâÔ∏è MULTI STRATEGY MANAGER - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
 * 
 * –°–∏—Å—Ç–µ–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ —Ä–∞–∑–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
 */

import fs from 'fs';
import path from 'path';
import { StrategyManager } from './strategy-manager';
import { ObsidianDashboardManager } from './obsidian-dashboard-manager';
import { logger } from './logger';

interface ClientConfig {
  name: string;
  configFile: string;
  obsidianPath: string;
  description: string;
  active: boolean;
}

export class MultiStrategyManager {
  private clients: Map<string, ClientConfig> = new Map();
  private currentClient: string | null = null;
  private static instance: MultiStrategyManager | null = null;

  constructor() {
    this.initializeClients();
    this.loadCurrentClient();
  }

  /**
   * Singleton pattern –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏
   */
  static getInstance(): MultiStrategyManager {
    if (!MultiStrategyManager.instance) {
      MultiStrategyManager.instance = new MultiStrategyManager();
    }
    return MultiStrategyManager.instance;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  private initializeClients() {
    // –ö–ª–∏–µ–Ω—Ç 1: –≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞
    this.clients.set('aesthetics', {
      name: '–≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞',
      configFile: './config/instagram-strategy.json',
      obsidianPath: './vaults/coco-age/',
      description: '–ö–ª–∏–Ω–∏–∫–∞ —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã - –≤–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
      active: true
    });

    // –ö–ª–∏–µ–Ω—Ç 2: TrendWatching
    this.clients.set('trendwatching', {
      name: 'TrendWatching',
      configFile: './config/trendwatching-strategy.json', 
      obsidianPath: './vaults/trendwatching/',
      description: 'AI –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã + –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã',
      active: true
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (!this.currentClient) {
      this.currentClient = 'aesthetics';
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  getClients(): ClientConfig[] {
    return Array.from(this.clients.values());
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  getActiveClients(): ClientConfig[] {
    return this.getClients().filter(client => client.active);
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
   */
  private loadCurrentClient(): void {
    try {
      const statePath = './config/.current-client';
      if (fs.existsSync(statePath)) {
        const clientId = fs.readFileSync(statePath, 'utf8').trim();
        if (this.clients.has(clientId)) {
          this.currentClient = clientId;
        }
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–∞–π–ª
   */
  private saveCurrentClient(): void {
    try {
      const statePath = './config/.current-client';
      if (this.currentClient) {
        fs.writeFileSync(statePath, this.currentClient);
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
   */
  switchClient(clientId: string): this {
    if (!this.clients.has(clientId)) {
      throw new Error(`–ö–ª–∏–µ–Ω—Ç "${clientId}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const client = this.clients.get(clientId)!;
    if (!client.active) {
      throw new Error(`–ö–ª–∏–µ–Ω—Ç "${clientId}" –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω`);
    }

    this.currentClient = clientId;
    this.saveCurrentClient();
    logger.info(`‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: ${client.name}`);
    return this;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
   */
  getCurrentClient(): ClientConfig | null {
    if (!this.currentClient) return null;
    return this.clients.get(this.currentClient) || null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
   */
  getCurrentStrategy(): StrategyManager {
    const client = this.getCurrentClient();
    if (!client) {
      throw new Error('–ù–µ –≤—ã–±—Ä–∞–Ω —Ç–µ–∫—É—â–∏–π –∫–ª–∏–µ–Ω—Ç');
    }

    return new StrategyManager(client.configFile);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
   */
  getClientStrategy(clientId: string): StrategyManager {
    const client = this.clients.get(clientId);
    if (!client) {
      throw new Error(`–ö–ª–∏–µ–Ω—Ç "${clientId}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    return new StrategyManager(client.configFile);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  showAllClients(): this {
    logger.info('\nüïâÔ∏è –í–°–ï –ö–õ–ò–ï–ù–¢–´:');
    
    this.getClients().forEach(client => {
      const status = client.active ? '‚úÖ' : '‚ùå';
      const current = this.currentClient === this.getClientId(client) ? 'üëà –¢–ï–ö–£–©–ò–ô' : '';
      
      logger.info(`\n${status} ${client.name} ${current}`);
      logger.info(`  üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${client.configFile}`);
      logger.info(`  üìù Obsidian: ${client.obsidianPath}`);
      logger.info(`  üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${client.description}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
      try {
        const strategy = new StrategyManager(client.configFile);
        const config = strategy.getStrategy();
        logger.info(`  üéØ –†–µ–∂–∏–º: ${config.scraping.mode}`);
        logger.info(`  üëÅÔ∏è –ú–∏–Ω. –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${config.scraping.minViews.toLocaleString()}`);
        logger.info(`  üè∑Ô∏è –•—ç—à—Ç–µ–≥–æ–≤: ${config.sources.hashtags.length}`);
        logger.info(`  üè¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${config.sources.competitors.length}`);
      } catch (error) {
        logger.info(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`);
      }
    });

    return this;
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
   */
  async runCurrentStrategy(): Promise<void> {
    const client = this.getCurrentClient();
    if (!client) {
      throw new Error('–ù–µ –≤—ã–±—Ä–∞–Ω —Ç–µ–∫—É—â–∏–π –∫–ª–∏–µ–Ω—Ç');
    }

    logger.info(`\nüöÄ –ó–ê–ü–£–°–ö –°–¢–†–ê–¢–ï–ì–ò–ò –î–õ–Ø: ${client.name}`);
    
    const strategy = this.getCurrentStrategy();
    strategy.showStatus();

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    await this.executeClientStrategy(client);
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  async runAllStrategies(): Promise<void> {
    const activeClients = this.getActiveClients();
    
    logger.info(`\nüöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –°–¢–†–ê–¢–ï–ì–ò–ô (${activeClients.length} –∫–ª–∏–µ–Ω—Ç–æ–≤)`);
    
    for (const client of activeClients) {
      logger.info(`\nüìä –û–ë–†–ê–ë–û–¢–ö–ê –ö–õ–ò–ï–ù–¢–ê: ${client.name}`);
      
      try {
        await this.executeClientStrategy(client);
        logger.info(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${client.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
      } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${client.name}:`, error);
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 5000));
    }
    
    logger.info('\nüéâ –í–°–ï –°–¢–†–ê–¢–ï–ì–ò–ò –í–´–ü–û–õ–ù–ï–ù–´!');
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
   */
  private async executeClientStrategy(client: ClientConfig): Promise<void> {
    const strategy = new StrategyManager(client.configFile);
    const config = strategy.getStrategy();
    
    // 1. –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ Obsidian –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await this.ensureObsidianStructure(client);
    
    // 2. –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥
    logger.info(`  üîç –°–∫—Ä–∞–ø–∏–Ω–≥ –¥–ª—è ${client.name}...`);
    
    // 3. –û–±–Ω–æ–≤–ª—è–µ–º Obsidian
    logger.info(`  üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Obsidian: ${client.obsidianPath}`);
    await this.updateObsidian(client, config);
    
    // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (config.output.notifications.telegram.enabled) {
      logger.info(`  üì± –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...`);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ Obsidian –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
   */
  private async ensureObsidianStructure(client: ClientConfig): Promise<void> {
    const basePath = client.obsidianPath;
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É
    if (!fs.existsSync(basePath)) {
      fs.mkdirSync(basePath, { recursive: true });
      logger.info(`  üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ Obsidian: ${basePath}`);
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
    const folders = ['Competitors', 'Hashtags', 'Reports', 'Templates', 'Analysis'];
    
    folders.forEach(folder => {
      const folderPath = path.join(basePath, folder);
      if (!fs.existsSync(folderPath)) {
        fs.mkdirSync(folderPath, { recursive: true });
        logger.info(`  üìÇ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–ø–∞–ø–∫–∞: ${folder}`);
      }
    });
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å Obsidian –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
   */
  private async updateObsidian(client: ClientConfig, config: any): Promise<void> {
    const timestamp = new Date().toISOString().split('T')[0];

    // –°–æ–∑–¥–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
    const reportPath = path.join(client.obsidianPath, 'Reports', `${timestamp}.md`);
    const reportContent = this.generateDailyReport(client, config, timestamp);

    fs.writeFileSync(reportPath, reportContent);
    logger.info(`  üìÑ –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç: ${reportPath}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const indexPath = path.join(client.obsidianPath, 'README.md');
    const indexContent = this.generateIndexPage(client, config);

    fs.writeFileSync(indexPath, indexContent);
    logger.info(`  üìã –û–±–Ω–æ–≤–ª–µ–Ω –∏–Ω–¥–µ–∫—Å: ${indexPath}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await this.updateDashboards(client, config);
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –¥–∞—à–±–æ—Ä–¥—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   */
  private async updateDashboards(client: ClientConfig, config: any): Promise<void> {
    const dashboardManager = new ObsidianDashboardManager(client.obsidianPath, client.name);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞)
    const mockData = this.generateMockData(client, config);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
    await dashboardManager.updateMainDashboard(mockData);
    logger.info(`  üìä –û–±–Ω–æ–≤–ª–µ–Ω –≥–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è ${client.name}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    await dashboardManager.updateCompetitorPages(mockData);
    logger.info(`  üè¢ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è ${client.name}`);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞)
   */
  private generateMockData(client: ClientConfig, config: any): any {
    const isAI = client.name === 'TrendWatching';

    return {
      totalPosts: Math.floor(Math.random() * 100) + 50,
      viralPosts: Math.floor(Math.random() * 30) + 10,
      avgViews: Math.floor(Math.random() * 50000) + 75000,
      avgLikes: Math.floor(Math.random() * 5000) + 2000,
      hashtags: config.sources.hashtags.map((h: any) => ({
        tag: h.tag,
        posts: Math.floor(Math.random() * 20) + 5,
        avgViews: Math.floor(Math.random() * 30000) + 50000,
        trend: ['up', 'down', 'stable'][Math.floor(Math.random() * 3)]
      })),
      competitors: config.sources.competitors.map((c: any) => ({
        username: c.username,
        posts: Math.floor(Math.random() * 15) + 5,
        topPost: {
          views: Math.floor(Math.random() * 200000) + 100000,
          likes: Math.floor(Math.random() * 10000) + 5000,
          description: isAI ? '–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏' : '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–æ—Ç–æ–∫—Å–∞',
          date: new Date().toLocaleDateString('ru-RU')
        },
        avgViews: Math.floor(Math.random() * 80000) + 60000
      })),
      trends: isAI ? [
        {
          title: 'AI Video Generation',
          category: 'AI Tools',
          source: 'Product Hunt',
          date: new Date().toLocaleDateString('ru-RU'),
          relevanceScore: 0.95
        },
        {
          title: 'Neural Interface Technology',
          category: 'Future Tech',
          source: 'Future Tools',
          date: new Date().toLocaleDateString('ru-RU'),
          relevanceScore: 0.88
        }
      ] : undefined
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  private generateDailyReport(client: ClientConfig, config: any, date: string): string {
    return `# ${client.name} - –û—Ç—á–µ—Ç ${date}

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–†–µ–∂–∏–º:** ${config.scraping.mode}
- **–ú–∏–Ω. –ø—Ä–æ—Å–º–æ—Ç—Ä—ã:** ${config.scraping.minViews.toLocaleString()}
- **–ü–µ—Ä–∏–æ–¥:** ${config.scraping.maxAgeDays} –¥–Ω–µ–π
- **–•—ç—à—Ç–µ–≥–æ–≤:** ${config.sources.hashtags.length}
- **–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:** ${config.sources.competitors.length}

## üè∑Ô∏è –•—ç—à—Ç–µ–≥–∏

${config.sources.hashtags.map(h => `- #${h.tag} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${h.priority}, –ª–∏–º–∏—Ç: ${h.limit})`).join('\n')}

## üè¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã

${config.sources.competitors.map(c => `- @${c.username} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${c.priority}, –ª–∏–º–∏—Ç: ${c.limit})`).join('\n')}

## üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã

- **–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤:** 0 (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
- **–ü—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã:** 0 (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
- **–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:** 0 (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

## üîó –°—Å—ã–ª–∫–∏

- [[README|–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞]]
- [[Templates/Daily Summary|–®–∞–±–ª–æ–Ω –æ—Ç—á–µ—Ç–∞]]

---
*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${new Date().toLocaleString()}*
`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
   */
  private generateIndexPage(client: ClientConfig, config: any): string {
    return `# ${client.name}

${config.strategy.description}

## üéØ –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è

- **–†–µ–∂–∏–º:** ${config.scraping.mode}
- **–ú–∏–Ω. –ø—Ä–æ—Å–º–æ—Ç—Ä—ã:** ${config.scraping.minViews.toLocaleString()}
- **–ü–µ—Ä–∏–æ–¥:** ${config.scraping.maxAgeDays} –¥–Ω–µ–π
- **–°—Ç–∞—Ç—É—Å:** ${config.strategy.active ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞

- [[Competitors/|üè¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã]]
- [[Hashtags/|üè∑Ô∏è –•—ç—à—Ç–µ–≥–∏]]
- [[Reports/|üìä –û—Ç—á–µ—Ç—ã]]
- [[Analysis/|üìà –ê–Ω–∞–ª–∏–∑]]

## üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã

- [[Reports/${new Date().toISOString().split('T')[0]}|–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –æ—Ç—á–µ—Ç]]

---
*–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString()}*
`;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å ID –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  private getClientId(client: ClientConfig): string {
    for (const [id, config] of this.clients.entries()) {
      if (config === client) return id;
    }
    return 'unknown';
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
   */
  addClient(id: string, config: ClientConfig): this {
    this.clients.set(id, config);
    logger.info(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç: ${config.name}`);
    return this;
  }

  /**
   * –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
   */
  toggleClient(clientId: string, active?: boolean): this {
    const client = this.clients.get(clientId);
    if (!client) {
      throw new Error(`–ö–ª–∏–µ–Ω—Ç "${clientId}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    client.active = active !== undefined ? active : !client.active;
    logger.info(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${client.name}: ${client.active ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}`);
    return this;
  }
}
