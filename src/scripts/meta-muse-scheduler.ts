/**
 * üïâÔ∏è Meta Muse Scheduler - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä–µ–ø–∏–Ω–≥–∞
 *
 * **"‡§ß‡•É‡§§‡§ø‡§∂‡•ç‡§ö ‡§§‡•á‡§ú‡•ã ‡§ß‡•à‡§∞‡•ç‡§Ø‡§Ç ‡§ö ‡§ó‡•Å‡§£‡§æ‡§∂‡•ç‡§ö ‡§∏‡§§‡•ç‡§Ø‡§µ‡§æ‡§¶‡§ø‡§§‡§æ"**
 * "–°—Ç–æ–π–∫–æ—Å—Ç—å, —ç–Ω–µ—Ä–≥–∏—è, —Ç–µ—Ä–ø–µ–Ω–∏–µ, —á–µ—Å—Ç–Ω–æ—Å—Ç—å - –≤–æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—Ö–∞"
 *
 * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–µ–ø–∏–Ω–≥–∞ Meta Muse –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –Ω–µ–¥–µ–ª—å
 */

import { MetaMuseAutomatedScraper } from "./meta-muse-automated-scraper";
import * as fs from "fs";
import * as path from "path";

interface SchedulerConfig {
  startDate: Date;
  durationDays: number;
  dailyRunTime: { hour: number; minute: number };
  autoStart: boolean;
}

/**
 * üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Meta Muse
 */
export class MetaMuseScheduler {
  private config: SchedulerConfig;
  private isRunning = false;
  private currentDay = 0;

  constructor(config?: Partial<SchedulerConfig>) {
    this.config = {
      startDate: new Date(),
      durationDays: 14,
      dailyRunTime: { hour: 9, minute: 0 }, // 9:00 —É—Ç—Ä–∞
      autoStart: true,
      ...config,
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ cron job –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
   */
  createCronJob(): string {
    const { hour, minute } = this.config.dailyRunTime;
    return `${minute} ${hour} * * *`; // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ systemd timer –¥–ª—è Linux
   */
  generateSystemdTimer(): string {
    const { hour, minute } = this.config.dailyRunTime;

    return `[Unit]
Description=Meta Muse Instagram Scraper
Requires=meta-muse-scraper.service

[Timer]
OnCalendar=*-*-* ${hour.toString().padStart(2, "0")}:${minute.toString().padStart(2, "0")}:00
Persistent=true

[Install]
WantedBy=timers.target`;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ systemd service –¥–ª—è Linux
   */
  generateSystemdService(): string {
    const workingDir = process.cwd();
    const scriptPath = path.join(
      workingDir,
      "src/scripts/meta-muse-automated-scraper.ts"
    );

    return `[Unit]
Description=Meta Muse Instagram Scraper Service
After=network.target

[Service]
Type=oneshot
User=node
WorkingDirectory=${workingDir}
Environment=NODE_ENV=production
ExecStart=/usr/bin/bun run ${scriptPath}
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target`;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ GitHub Action workflow
   */
  generateGitHubAction(): string {
    const { hour, minute } = this.config.dailyRunTime;

    return `name: üê≠ Meta Muse Daily Scraper

on:
  schedule:
    # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ ${hour}:${minute.toString().padStart(2, "0")} UTC
    - cron: '${minute} ${hour} * * *'
  workflow_dispatch: # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
    inputs:
      force_run:
        description: 'Force run scraper'
        required: false
        default: 'false'

jobs:
  scrape-meta-muse:
    runs-on: ubuntu-latest
    name: üï∑Ô∏è Meta Muse Scraping
    timeout-minutes: 240 # 4 —á–∞—Å–∞ –º–∞–∫—Å–∏–º—É–º
    
    steps:
      - name: üîÑ Checkout repository
        uses: actions/checkout@v4

      - name: üü¢ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: üì¶ Install dependencies
        run: bun install

      - name: üï∑Ô∏è Run Meta Muse Scraper
        env:
          DATABASE_URL: \${{ secrets.DATABASE_URL }}
          APIFY_TOKEN: \${{ secrets.APIFY_TOKEN }}
          OPENAI_API_KEY: \${{ secrets.OPENAI_API_KEY }}
        run: bun run src/scripts/meta-muse-automated-scraper.ts

      - name: üìä Upload scraping reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: meta-muse-reports-\${{ github.run_number }}
          path: exports/meta-muse-report-*.json
          retention-days: 30`;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ Docker Compose –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
   */
  generateDockerCompose(): string {
    return `version: '3.8'

services:
  meta-muse-scraper:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=\${DATABASE_URL}
      - APIFY_TOKEN=\${APIFY_TOKEN}
      - OPENAI_API_KEY=\${OPENAI_API_KEY}
      - NODE_ENV=production
    volumes:
      - ./exports:/app/exports
      - ./temp:/app/temp
    restart: unless-stopped
    depends_on:
      - postgres
    command: ["bun", "run", "src/scripts/meta-muse-automated-scraper.ts"]

  meta-muse-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=\${DATABASE_URL}
      - APIFY_TOKEN=\${APIFY_TOKEN}
      - OPENAI_API_KEY=\${OPENAI_API_KEY}
    volumes:
      - ./exports:/app/exports
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    command: ["node", "-e", "
      const schedule = require('node-cron');
      schedule.schedule('0 9 * * *', () => {
        const { exec } = require('child_process');
        exec('docker-compose up meta-muse-scraper', (error, stdout, stderr) => {
          if (error) console.error('Error:', error);
          console.log(stdout);
        });
      });
      console.log('üïâÔ∏è Meta Muse Scheduler started - runs daily at 9:00 AM');
      process.stdin.resume();
    "]

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=metamuse
      - POSTGRES_USER=\${DB_USER:-metamuse}
      - POSTGRES_PASSWORD=\${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

volumes:
  postgres_data:`;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ Node.js –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  generateNodeScheduler(): string {
    return `/**
 * üïâÔ∏è Meta Muse Node.js Scheduler
 */
const cron = require('node-cron');
const { exec } = require('child_process');
const path = require('path');

// –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
cron.schedule('0 9 * * *', () => {
  console.log('üïâÔ∏è –ó–∞–ø—É—Å–∫ Meta Muse Scraper:', new Date().toLocaleString());
  
  const scriptPath = path.join(__dirname, 'meta-muse-automated-scraper.ts');
  const command = \`bun run \${scriptPath}\`;
  
  exec(command, (error, stdout, stderr) => {
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
      return;
    }
    
    if (stderr) {
      console.error('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', stderr);
    }
    
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', stdout);
  });
}, {
  scheduled: true,
  timezone: "Europe/Moscow"
});

console.log('üïâÔ∏è Meta Muse Scheduler –∑–∞–ø—É—â–µ–Ω - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ 9:00 –ú–°–ö');
console.log('üìÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 14 –¥–Ω–µ–π');
console.log('‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫:', new Date(Date.now() + 24*60*60*1000).toLocaleString());

// –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–Ω—ã–º
process.stdin.resume();`;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ PowerShell —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è Windows
   */
  generatePowerShellScheduler(): string {
    return `# üïâÔ∏è Meta Muse PowerShell Scheduler for Windows
# –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –≤ Windows Task Scheduler

\$TaskName = "MetaMuseScraper"
\$ScriptPath = Join-Path \$PSScriptRoot "meta-muse-automated-scraper.ts"
\$BunPath = "bun"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–¥–∞—á–∏
\$Action = New-ScheduledTaskAction -Execute \$BunPath -Argument "run '\$ScriptPath'"

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00)
\$Trigger = New-ScheduledTaskTrigger -Daily -At "09:00"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á–∏
\$Settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á–∏
Register-ScheduledTask -TaskName \$TaskName -Action \$Action -Trigger \$Trigger -Settings \$Settings -Description "Meta Muse Instagram Scraper - Daily execution"

Write-Host "‚úÖ –ó–∞–¥–∞—á–∞ '\$TaskName' —Å–æ–∑–¥–∞–Ω–∞ –≤ Windows Task Scheduler"
Write-Host "‚è∞ –ó–∞–ø—É—Å–∫: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00"
Write-Host "üìÅ –°–∫—Ä–∏–ø—Ç: \$ScriptPath"

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
Get-ScheduledTask -TaskName \$TaskName | Format-Table`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
   */
  async generateAutomationFiles(): Promise<void> {
    const automationDir = path.join(process.cwd(), "automation", "meta-muse");

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if (!fs.existsSync(automationDir)) {
      fs.mkdirSync(automationDir, { recursive: true });
    }

    const files = [
      {
        name: "github-action.yml",
        content: this.generateGitHubAction(),
        description: "GitHub Actions workflow",
      },
      {
        name: "docker-compose.yml",
        content: this.generateDockerCompose(),
        description: "Docker Compose configuration",
      },
      {
        name: "node-scheduler.js",
        content: this.generateNodeScheduler(),
        description: "Node.js cron scheduler",
      },
      {
        name: "meta-muse.timer",
        content: this.generateSystemdTimer(),
        description: "Systemd timer (Linux)",
      },
      {
        name: "meta-muse.service",
        content: this.generateSystemdService(),
        description: "Systemd service (Linux)",
      },
      {
        name: "setup-windows-scheduler.ps1",
        content: this.generatePowerShellScheduler(),
        description: "Windows Task Scheduler setup",
      },
    ];

    console.log(`üïâÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤: ${automationDir}`);
    console.log("‚ïê".repeat(70));

    for (const file of files) {
      const filePath = path.join(automationDir, file.name);
      fs.writeFileSync(filePath, file.content);
      console.log(`‚úÖ ${file.name.padEnd(30)} - ${file.description}`);
    }

    // –°–æ–∑–¥–∞–µ–º README —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    const readmeContent = this.generateAutomationReadme();
    const readmePath = path.join(automationDir, "README.md");
    fs.writeFileSync(readmePath, readmeContent);
    console.log(`‚úÖ ${"README.md".padEnd(30)} - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ`);

    console.log("\nüìã –§–ê–ô–õ–´ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò –°–û–ó–î–ê–ù–´!");
    console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${automationDir}`);
    console.log("\nüöÄ –í–ê–†–ò–ê–ù–¢–´ –ó–ê–ü–£–°–ö–ê:");
    console.log(
      "1. üåê GitHub Actions (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è) - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –æ–±–ª–∞–∫–µ"
    );
    console.log("2. üê≥ Docker Compose - –ª–æ–∫–∞–ª—å–Ω–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö");
    console.log("3. üü¢ Node.js Scheduler - –ª–æ–∫–∞–ª—å–Ω–æ —Å node-cron");
    console.log("4. üêß Systemd (Linux) - —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫");
    console.log(
      "5. ü™ü Windows Task Scheduler - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Windows"
    );
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è README —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
   */
  private generateAutomationReadme(): string {
    return `# üïâÔ∏è Meta Muse Automation Setup

–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–∫—Ä–µ–ø–∏–Ω–≥–∞ Meta Muse (–∞–Ω–∏–º–µ –º—ã—à—å) –Ω–∞ 14 –¥–Ω–µ–π —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º.

## üéØ –í–∞—Ä–∏–∞–Ω—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏

### 1. üåê GitHub Actions (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)

**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:** –ë–µ—Å–ø–ª–∞—Ç–Ω–æ, –Ω–∞–¥–µ–∂–Ω–æ, –ª–æ–≥–∏ –≤ –æ–±–ª–∞–∫–µ, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞

\`\`\`bash
# 1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ github-action.yml –≤ .github/workflows/
cp github-action.yml ../.github/workflows/meta-muse-daily.yml

# 2. –î–æ–±–∞–≤—å—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ GitHub Repository Settings:
# - DATABASE_URL
# - APIFY_TOKEN  
# - OPENAI_API_KEY

# 3. Workflow –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 UTC
\`\`\`

### 2. üê≥ Docker Compose

**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:** –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ä–µ–¥–∞, –ª–µ–≥–∫–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å

\`\`\`bash
# –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
cp .env.example .env

# –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
docker-compose up -d

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∫—Ä–µ–ø–µ—Ä –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
\`\`\`

### 3. üü¢ Node.js Scheduler

**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:** –ü—Ä–æ—Å—Ç–æ—Ç–∞, –≥–∏–±–∫–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

\`\`\`bash
# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
npm install node-cron

# –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
node node-scheduler.js

# –ü—Ä–æ—Ü–µ—Å—Å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–µ –∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∫—Ä–µ–ø–µ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
\`\`\`

### 4. üêß Linux Systemd

**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:** –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π, –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫

\`\`\`bash
# –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã systemd
sudo cp meta-muse.service /etc/systemd/system/
sudo cp meta-muse.timer /etc/systemd/system/

# –í–∫–ª—é—á–∏—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ
sudo systemctl enable meta-muse.timer
sudo systemctl start meta-muse.timer

# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å
sudo systemctl status meta-muse.timer
\`\`\`

### 5. ü™ü Windows Task Scheduler

**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:** –í—Å—Ç—Ä–æ–µ–Ω –≤ Windows, –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

\`\`\`powershell
# –ó–∞–ø—É—Å—Ç–∏—Ç–µ PowerShell –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
# –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
.\\setup-windows-scheduler.ps1

# –ó–∞–¥–∞—á–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ Task Scheduler
\`\`\`

## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏

### –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: **9:00 UTC** (12:00 –ú–°–ö)

–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –≤ —Ñ–∞–π–ª–∞—Ö:
- GitHub Actions: \`cron: '0 9 * * *'\`
- Docker: schedule –≤ node-scheduler
- Systemd: \`OnCalendar=*-*-* 09:00:00\`
- Windows: \`-At "09:00"\`

### –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

\`\`\`env
DATABASE_URL=postgresql://user:pass@host:port/db
APIFY_TOKEN=your_apify_token
OPENAI_API_KEY=sk-your_openai_key
\`\`\`

## üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

### –õ–æ–≥–∏
- GitHub Actions: –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ GitHub
- Docker: \`docker-compose logs -f\`
- Node.js: –≤ –∫–æ–Ω—Å–æ–ª–∏
- Systemd: \`journalctl -u meta-muse.service\`
- Windows: Event Viewer

### –û—Ç—á–µ—Ç—ã
–û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ \`exports/meta-muse-report-*.json\`

## üîß –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫

### –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

### –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é
–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Apify API –∏ Instagram

### –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon PostgreSQL

## üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 14 –¥–Ω–µ–π

–î–µ–Ω—å 1-14: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ 10-11 —Ö—ç—à—Ç–µ–≥–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
–í—Å–µ–≥–æ: 151 —Ö—ç—à—Ç–µ–≥ –≤ 6 –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö

**–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:**
1. –ë–∞–∑–æ–≤—ã–µ —Ö—ç—à—Ç–µ–≥–∏ (7)
2. AI-–∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä—ã (30) 
3. –ú–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω—ã–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (24)
4. –ê—Ä—Ö–µ—Ç–∏–ø: –ú—É–∑–∞/–ú–∞–≥/–ü—Ä–æ–≤–∏–¥–µ—Ü (30)
5. –ü—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç (30)
6. –§–∏–ª–æ—Å–æ—Ñ–∏—è: –¥—É—Ö + —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (30)

---

üïâÔ∏è **"‡§ß‡•É‡§§‡§ø‡§∂‡•ç‡§ö ‡§§‡•á‡§ú‡•ã ‡§ß‡•à‡§∞‡•ç‡§Ø‡§Ç ‡§ö ‡§ó‡•Å‡§£‡§æ‡§∂‡•ç‡§ö ‡§∏‡§§‡•ç‡§Ø‡§µ‡§æ‡§¶‡§ø‡§§‡§æ"** 
"–°—Ç–æ–π–∫–æ—Å—Ç—å, —ç–Ω–µ—Ä–≥–∏—è, —Ç–µ—Ä–ø–µ–Ω–∏–µ, —á–µ—Å—Ç–Ω–æ—Å—Ç—å - –≤–æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—Ö–∞"`;
  }

  /**
   * –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∫—Ä–µ–ø–µ—Ä–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async runNow(): Promise<void> {
    if (this.isRunning) {
      console.log("‚ö†Ô∏è –°–∫—Ä–µ–ø–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
      return;
    }

    this.isRunning = true;
    console.log("üïâÔ∏è –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ Meta Muse Scraper...");

    try {
      const scraper = new MetaMuseAutomatedScraper();
      await scraper.run();
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", error);
    } finally {
      this.isRunning = false;
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  showStatus(): void {
    console.log("üïâÔ∏è Meta Muse Scheduler Status");
    console.log("‚ïê".repeat(40));
    console.log(
      `üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${this.config.startDate.toLocaleDateString()}`
    );
    console.log(
      `‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${this.config.dailyRunTime.hour}:${this.config.dailyRunTime.minute.toString().padStart(2, "0")}`
    );
    console.log(`üìÜ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${this.config.durationDays} –¥–Ω–µ–π`);
    console.log(`üîÑ –°—Ç–∞—Ç—É—Å: ${this.isRunning ? "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è" : "–û–∂–∏–¥–∞–Ω–∏–µ"}`);
    console.log(`üìä –î–µ–Ω—å: ${this.currentDay}/${this.config.durationDays}`);
    console.log(
      `‚öôÔ∏è –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫: ${this.config.autoStart ? "–í–∫–ª—é—á–µ–Ω" : "–û—Ç–∫–ª—é—á–µ–Ω"}`
    );
  }
}

/**
 * CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 */
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  const scheduler = new MetaMuseScheduler();

  switch (command) {
    case "generate":
      await scheduler.generateAutomationFiles();
      break;

    case "run":
      await scheduler.runNow();
      break;

    case "status":
      scheduler.showStatus();
      break;

    case "help":
    default:
      console.log(`üïâÔ∏è Meta Muse Scheduler Commands:

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  generate  - –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
  run       - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–µ–ø–µ—Ä –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
  status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
  help      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  bun run src/scripts/meta-muse-scheduler.ts generate
  bun run src/scripts/meta-muse-scheduler.ts run
  bun run src/scripts/meta-muse-scheduler.ts status

üïâÔ∏è –î–∞ –ø—Ä–µ–±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å Meta Muse! üê≠‚ö°`);
      break;
  }
}

// –ó–∞–ø—É—Å–∫ CLI
if (require.main === module) {
  main().catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
    process.exit(1);
  });
}
