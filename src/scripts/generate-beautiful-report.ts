/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏ Reels –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * bun run src/scripts/generate-beautiful-report.ts <project_id> <min_views> <days_ago> <output_path>
 *
 * –ü—Ä–∏–º–µ—Ä:
 * bun run src/scripts/generate-beautiful-report.ts 1 50000 30 "exports/beautiful_report.xlsx"
 */

import { NeonAdapter } from "../adapters/neon-adapter";
import { ReelContent } from "../types";
import ExcelJS from "exceljs";
import path from "path";
import fs from "fs";
import { format } from "date-fns";
import { ru } from "date-fns/locale";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const projectId = parseInt(process.argv[2] || "1", 10);
const minViews = parseInt(process.argv[3] || "50000", 10);
const daysAgo = parseInt(process.argv[4] || "30", 10);
const outputPath =
  process.argv[5] ||
  `exports/beautiful_report_${format(new Date(), "yyyy-MM-dd")}.xlsx`;

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const outputDir = path.dirname(outputPath);
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(date: Date): string {
  return format(date, "d MMMM yyyy", { locale: ru });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
function formatNumber(num: number): string {
  return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
function getViewsEmoji(views: number): string {
  if (views >= 1000000) return "üî•";
  if (views >= 500000) return "‚≠ê";
  if (views >= 100000) return "üëç";
  return "üëÄ";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–π–∫–æ–≤
function getLikesEmoji(likes: number): string {
  if (likes >= 100000) return "‚ù§Ô∏è";
  if (likes >= 50000) return "üíñ";
  if (likes >= 10000) return "üíï";
  return "üëç";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
function getCommentsEmoji(comments: number): string {
  if (comments >= 1000) return "üí¨";
  if (comments >= 500) return "üìù";
  if (comments >= 100) return "‚úèÔ∏è";
  return "üí≠";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
async function generateReport() {
  console.log(
    `–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId} —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ ${minViews} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${daysAgo} –¥–Ω–µ–π`
  );

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  const adapter = new NeonAdapter();
  await adapter.initialize();
  console.log("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î Neon —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.");

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const competitors = await adapter.getCompetitorsByProjectId(projectId);
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${competitors.length} –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Å—á–∏—Ç–∞—Ç—å (N –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
    const fromDate = new Date();
    fromDate.setDate(fromDate.getDate() - daysAgo);

    // –ü–æ–ª—É—á–∞–µ–º Reels –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    const query = `
      SELECT *,
             views_count AS views,
             likes_count AS likes,
             reel_url AS url,
             source_identifier AS source_id
      FROM reels 
      WHERE project_id = $1 
        AND source_type = $2 
        AND views_count >= $3 
        AND published_at >= $4
      ORDER BY views_count DESC
    `;
    const params = [projectId, "competitor", minViews, fromDate.toISOString()];
    const result = await adapter.executeQuery(query, params);
    const reels: ReelContent[] = result.rows as ReelContent[];
    console.log(
      `–ù–∞–π–¥–µ–Ω–æ ${reels.length} Reels —Å –º–∏–Ω–∏–º—É–º ${minViews} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${daysAgo} –¥–Ω–µ–π`
    );

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º Reels –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º
    const reelsByCompetitor: Record<number, ReelContent[]> = {};
    for (const reel of reels) {
      const competitorId = parseInt(reel.source_id);
      if (!reelsByCompetitor[competitorId]) {
        reelsByCompetitor[competitorId] = [];
      }
      reelsByCompetitor[competitorId].push(reel);
    }

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥—É Excel
    const workbook = new ExcelJS.Workbook();
    workbook.creator = "Instagram Scraper Bot";
    workbook.lastModifiedBy = "Instagram Scraper Bot";
    workbook.created = new Date();
    workbook.modified = new Date();

    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const summarySheet = workbook.addWorksheet("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è");

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
    summarySheet.columns = [
      { header: "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", key: "metric", width: 30 },
      { header: "–ó–Ω–∞—á–µ–Ω–∏–µ", key: "value", width: 20 },
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    summarySheet.mergeCells("A1:B1");
    const titleCell = summarySheet.getCell("A1");
    titleCell.value = `üìä –û—Ç—á–µ—Ç –ø–æ Reels –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∑–∞ ${formatDate(fromDate)} - ${formatDate(new Date())}`;
    titleCell.font = { size: 16, bold: true, color: { argb: "FF0070C0" } };
    titleCell.alignment = { horizontal: "center", vertical: "middle" };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    summarySheet.addRow(["üìã –ü—Ä–æ–µ–∫—Ç", `ID: ${projectId}`]);
    summarySheet.addRow([
      "üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤",
      competitors.length.toString(),
    ]);
    summarySheet.addRow(["üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Reels", reels.length.toString()]);
    summarySheet.addRow([
      "üëÄ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
      formatNumber(minViews),
    ]);
    summarySheet.addRow([
      "üìÖ –ü–µ—Ä–∏–æ–¥",
      `${formatDate(fromDate)} - ${formatDate(new Date())}`,
    ]);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
    const totalViews = reels.reduce(
      (sum: number, reel: ReelContent) => sum + (reel.views ?? 0),
      0
    );
    const avgViews = Math.round(totalViews / (reels.length || 1));
    const maxViews = Math.max(
      ...reels.map((reel: ReelContent) => reel.views ?? 0)
    );
    const minViewsFound = Math.min(
      ...reels.map((reel: ReelContent) => reel.views ?? 0)
    );

    summarySheet.addRow([
      "üëÅÔ∏è –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
      formatNumber(totalViews),
    ]);
    summarySheet.addRow([
      "üìä –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
      formatNumber(avgViews),
    ]);
    summarySheet.addRow([
      "üîù –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
      formatNumber(maxViews),
    ]);
    summarySheet.addRow([
      "‚¨áÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
      formatNumber(minViewsFound),
    ]);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ª–∞–π–∫–∞–º
    const totalLikes = reels.reduce(
      (sum: number, reel: ReelContent) => sum + (reel.likes ?? 0),
      0
    );
    const avgLikes = Math.round(totalLikes / (reels.length || 1));

    summarySheet.addRow([
      "‚ù§Ô∏è –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤",
      formatNumber(totalLikes),
    ]);
    summarySheet.addRow([
      "üíñ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤",
      formatNumber(avgLikes),
    ]);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º
    const totalComments = reels.reduce(
      (sum: number, reel: ReelContent) => sum + (reel.comments_count ?? 0),
      0
    );
    const avgComments = Math.round(totalComments / (reels.length || 1));

    summarySheet.addRow([
      "üí¨ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
      formatNumber(totalComments),
    ]);
    summarySheet.addRow([
      "üìù –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
      formatNumber(avgComments),
    ]);

    // –°—Ç–∏–ª–∏–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    for (let i = 2; i <= summarySheet.rowCount; i++) {
      const row = summarySheet.getRow(i);
      row.getCell(1).font = { bold: true, color: { argb: "FF0070C0" } };
      row.getCell(2).font = { bold: true };
      row.height = 25;
    }

    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å —Ç–æ–ø-10 Reels
    const topReelsSheet = workbook.addWorksheet("–¢–æ–ø-10 Reels");

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
    topReelsSheet.columns = [
      { header: "‚Ññ", key: "index", width: 5 },
      { header: "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç", key: "competitor", width: 20 },
      { header: "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", key: "views", width: 15 },
      { header: "–õ–∞–π–∫–∏", key: "likes", width: 15 },
      { header: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", key: "comments", width: 15 },
      { header: "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", key: "date", width: 20 },
      { header: "URL", key: "url", width: 50 },
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    topReelsSheet.mergeCells("A1:G1");
    const topReelsTitle = topReelsSheet.getCell("A1");
    topReelsTitle.value = "üîù –¢–æ–ø-10 Reels –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º";
    topReelsTitle.font = { size: 16, bold: true, color: { argb: "FF0070C0" } };
    topReelsTitle.alignment = { horizontal: "center", vertical: "middle" };

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º Reels –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
    const sortedReels = [...reels].sort(
      (a, b) => (b.views ?? 0) - (a.views ?? 0)
    );

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-10 Reels
    for (let i = 0; i < Math.min(10, sortedReels.length); i++) {
      const reel = sortedReels[i];
      const competitor = competitors.find(
        (c) => c.id === parseInt(reel.source_id)
      );

      topReelsSheet.addRow({
        index: i + 1,
        competitor: competitor ? competitor.username : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
        views: `${getViewsEmoji(reel.views ?? 0)} ${formatNumber(reel.views ?? 0)}`,
        likes: `${getLikesEmoji(reel.likes ?? 0)} ${formatNumber(reel.likes ?? 0)}`,
        comments: `${getCommentsEmoji(reel.comments_count ?? 0)} ${formatNumber(reel.comments_count ?? 0)}`,
        date: formatDate(new Date(reel.published_at)),
        url: reel.url,
      });
    }

    // –°—Ç–∏–ª–∏–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    const headerRow = topReelsSheet.getRow(2);
    headerRow.eachCell((cell) => {
      cell.font = { bold: true, color: { argb: "FFFFFFFF" } };
      cell.fill = {
        type: "pattern",
        pattern: "solid",
        fgColor: { argb: "FF0070C0" },
      };
      cell.alignment = { horizontal: "center", vertical: "middle" };
    });

    // –°—Ç–∏–ª–∏–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    for (let i = 3; i <= topReelsSheet.rowCount; i++) {
      const row = topReelsSheet.getRow(i);
      row.height = 25;
      row.getCell(1).alignment = { horizontal: "center", vertical: "middle" };
      row.getCell(3).alignment = { horizontal: "right", vertical: "middle" };
      row.getCell(4).alignment = { horizontal: "right", vertical: "middle" };
      row.getCell(5).alignment = { horizontal: "right", vertical: "middle" };
      row.getCell(6).alignment = { horizontal: "center", vertical: "middle" };

      // –î–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–µ–¥—É—é—â—É—é—Å—è –∑–∞–ª–∏–≤–∫—É —Å—Ç—Ä–æ–∫
      if (i % 2 === 0) {
        row.eachCell((cell) => {
          cell.fill = {
            type: "pattern",
            pattern: "solid",
            fgColor: { argb: "FFF2F2F2" },
          };
        });
      }
    }

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
    for (const competitor of competitors) {
      const competitorReels = reelsByCompetitor[competitor.id] || [];
      if (competitorReels.length === 0) continue;

      // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
      const competitorSheet = workbook.addWorksheet(`${competitor.username}`);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
      competitorSheet.columns = [
        { header: "‚Ññ", key: "index", width: 5 },
        { header: "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", key: "views", width: 15 },
        { header: "–õ–∞–π–∫–∏", key: "likes", width: 15 },
        { header: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", key: "comments", width: 15 },
        { header: "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", key: "date", width: 20 },
        { header: "URL", key: "url", width: 50 },
        { header: "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è", key: "transcript", width: 100 },
      ];

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      competitorSheet.mergeCells("A1:G1");
      const competitorTitle = competitorSheet.getCell("A1");
      competitorTitle.value = `üë§ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç: ${competitor.username} (${competitor.full_name || ""})`;
      competitorTitle.font = {
        size: 16,
        bold: true,
        color: { argb: "FF0070C0" },
      };
      competitorTitle.alignment = { horizontal: "center", vertical: "middle" };

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º Reels –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
      const sortedCompetitorReels = [...competitorReels].sort(
        (a, b) => (b.views ?? 0) - (a.views ?? 0)
      );

      // –î–æ–±–∞–≤–ª—è–µ–º Reels –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
      for (let i = 0; i < sortedCompetitorReels.length; i++) {
        const reel = sortedCompetitorReels[i];

        competitorSheet.addRow({
          index: i + 1,
          views: `${getViewsEmoji(reel.views ?? 0)} ${formatNumber(reel.views ?? 0)}`,
          likes: `${getLikesEmoji(reel.likes ?? 0)} ${formatNumber(reel.likes ?? 0)}`,
          comments: `${getCommentsEmoji(reel.comments_count ?? 0)} ${formatNumber(reel.comments_count ?? 0)}`,
          date: formatDate(new Date(reel.published_at)),
          url: reel.url,
          transcript: reel.transcript
            ? reel.transcript.substring(0, 200) +
              (reel.transcript.length > 200 ? "..." : "")
            : "–ù–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏",
        });
      }

      // –°—Ç–∏–ª–∏–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
      const competitorHeaderRow = competitorSheet.getRow(2);
      competitorHeaderRow.eachCell((cell) => {
        cell.font = { bold: true, color: { argb: "FFFFFFFF" } };
        cell.fill = {
          type: "pattern",
          pattern: "solid",
          fgColor: { argb: "FF0070C0" },
        };
        cell.alignment = { horizontal: "center", vertical: "middle" };
      });

      // –°—Ç–∏–ª–∏–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É
      for (let i = 3; i <= competitorSheet.rowCount; i++) {
        const row = competitorSheet.getRow(i);
        row.height = 25;
        row.getCell(1).alignment = { horizontal: "center", vertical: "middle" };
        row.getCell(2).alignment = { horizontal: "right", vertical: "middle" };
        row.getCell(3).alignment = { horizontal: "right", vertical: "middle" };
        row.getCell(4).alignment = { horizontal: "right", vertical: "middle" };
        row.getCell(5).alignment = { horizontal: "center", vertical: "middle" };
        row.getCell(7).alignment = { vertical: "top", wrapText: true };

        // –î–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–µ–¥—É—é—â—É—é—Å—è –∑–∞–ª–∏–≤–∫—É —Å—Ç—Ä–æ–∫
        if (i % 2 === 0) {
          row.eachCell((cell) => {
            cell.fill = {
              type: "pattern",
              pattern: "solid",
              fgColor: { argb: "FFF2F2F2" },
            };
          });
        }
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–∏–≥—É Excel
    await workbook.xlsx.writeFile(outputPath);
    console.log(`–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${outputPath}`);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:", error);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    await adapter.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
generateReport();
