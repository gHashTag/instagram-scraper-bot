/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npm run scrape-mode <projectId> <mode> [limit]
 * 
 * –†–µ–∂–∏–º—ã:
 * - viral: 50K+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ 7 –¥–Ω–µ–π (—Å–∞–º—ã–π –≤–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç)
 * - popular: 10K+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ 30 –¥–Ω–µ–π (–ø–æ–ø—É–ª—è—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç)
 * - normal: 1K+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ 30 –¥–Ω–µ–π (–æ–±—ã—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç)
 * - test: 100+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ 90 –¥–Ω–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 */

import dotenv from "dotenv";
import { initializeDBConnection } from "../db/neonDB";
import { scrapeInstagramReels } from "../agent/instagram-scraper";
import { getCompetitorAccountsByProjectId, getTrackingHashtagsByProjectId } from "../db/neonDB";
import { logger } from "../logger";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –†–µ–∂–∏–º—ã —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
const SCRAPING_MODES = {
  viral: {
    name: "üî• –í–ò–†–£–°–ù–´–ô",
    minViews: 50000,
    maxAgeDays: 7,
    description: "–¢–æ–ª—å–∫–æ —Å–∞–º—ã–π –≤–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞ –Ω–µ–¥–µ–ª—é"
  },
  popular: {
    name: "üìà –ü–û–ü–£–õ–Ø–†–ù–´–ô", 
    minViews: 10000,
    maxAgeDays: 30,
    description: "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞ –º–µ—Å—è—Ü"
  },
  normal: {
    name: "üìä –û–ë–´–ß–ù–´–ô",
    minViews: 1000,
    maxAgeDays: 30,
    description: "–û–±—ã—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞ –º–µ—Å—è—Ü"
  },
  test: {
    name: "üß™ –¢–ï–°–¢–û–í–´–ô",
    minViews: 100,
    maxAgeDays: 90,
    description: "–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"
  }
};

async function scrapeWithMode() {
  try {
    const args = process.argv.slice(2);
    
    if (args.length < 2) {
      logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run scrape-mode <projectId> <mode> [limit]");
      logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:");
      Object.entries(SCRAPING_MODES).forEach(([key, mode]) => {
        logger.info(`  ${key}: ${mode.name} - ${mode.description}`);
      });
      process.exit(1);
    }
    
    const projectId = parseInt(args[0], 10);
    const modeKey = args[1] as keyof typeof SCRAPING_MODES;
    const limit = args[2] ? parseInt(args[2], 10) : 10;
    
    if (isNaN(projectId)) {
      logger.error("‚ùå –û—à–∏–±–∫–∞: projectId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º");
      process.exit(1);
    }
    
    if (!SCRAPING_MODES[modeKey]) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º "${modeKey}"`);
      logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: " + Object.keys(SCRAPING_MODES).join(", "));
      process.exit(1);
    }
    
    const mode = SCRAPING_MODES[modeKey];
    const APIFY_TOKEN = process.env.APIFY_TOKEN;
    
    if (!APIFY_TOKEN) {
      logger.error("‚ùå –û—à–∏–±–∫–∞: APIFY_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
      process.exit(1);
    }
    
    logger.info(`üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –≤ —Ä–µ–∂–∏–º–µ: ${mode.name}`);
    logger.info(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${mode.minViews}+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ ${mode.maxAgeDays} –¥–Ω–µ–π`);
    logger.info(`üéØ –ü—Ä–æ–µ–∫—Ç: ${projectId}, –õ–∏–º–∏—Ç: ${limit}`);
    
    const db = initializeDBConnection();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ —Ö—ç—à—Ç–µ–≥–∏
    const competitors = await getCompetitorAccountsByProjectId(projectId);
    const hashtags = await getTrackingHashtagsByProjectId(projectId);
    
    logger.info(`üë• –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${competitors.length}`);
    logger.info(`üè∑Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ö—ç—à—Ç–µ–≥–æ–≤: ${hashtags.length}`);
    
    let totalReelsAdded = 0;
    const limitPerSource = Math.floor(limit / (competitors.length + hashtags.length)) || 1;
    
    // –°–∫—Ä–∞–ø–∏–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    logger.info("üë• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...");
    for (const competitor of competitors) {
      try {
        logger.info(`  üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º @${competitor.username}...`);
        
        const reelsAdded = await scrapeInstagramReels(
          db,
          projectId,
          "competitor",
          competitor.id,
          competitor.profile_url,
          {
            limit: limitPerSource,
            apifyToken: APIFY_TOKEN,
            minViews: mode.minViews,
            maxAgeDays: mode.maxAgeDays,
          }
        );
        
        totalReelsAdded += reelsAdded;
        logger.info(`    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${reelsAdded} Reels –¥–ª—è @${competitor.username}`);
        
      } catch (error) {
        logger.error(`    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ @${competitor.username}:`, error);
      }
    }
    
    // –°–∫—Ä–∞–ø–∏–º —Ö—ç—à—Ç–µ–≥–∏
    logger.info("üè∑Ô∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ —Ö—ç—à—Ç–µ–≥–æ–≤...");
    for (const hashtag of hashtags) {
      try {
        logger.info(`  üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º #${hashtag.tag_name}...`);
        
        const reelsAdded = await scrapeInstagramReels(
          db,
          projectId,
          "hashtag",
          hashtag.id,
          `#${hashtag.tag_name}`,
          {
            limit: limitPerSource,
            apifyToken: APIFY_TOKEN,
            minViews: mode.minViews,
            maxAgeDays: mode.maxAgeDays,
          }
        );
        
        totalReelsAdded += reelsAdded;
        logger.info(`    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${reelsAdded} Reels –¥–ª—è #${hashtag.tag_name}`);
        
      } catch (error) {
        logger.error(`    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ #${hashtag.tag_name}:`, error);
      }
    }
    
    logger.info(`üéâ –°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!`);
    logger.info(`üìä –ò—Ç–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ Reels: ${totalReelsAdded}`);
    logger.info(`üî• –†–µ–∂–∏–º: ${mode.name} (${mode.minViews}+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ ${mode.maxAgeDays} –¥–Ω–µ–π)`);
    
  } catch (error) {
    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
scrapeWithMode();
