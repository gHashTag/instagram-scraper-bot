#!/usr/bin/env node

/**
 * üïâÔ∏è CHECK REAL DATA - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
 */

import { config } from 'dotenv';
import { initializeDBConnection, getDB } from '../db/neonDB';
import { sql } from 'drizzle-orm';
import * as schema from '../db/schema';

config();

async function checkRealData() {
  try {
    await initializeDBConnection();
    const db = getDB();
    
    console.log('üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –í –ë–ê–ó–ï:\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const competitors = await db.select().from(schema.competitorsTable);
    console.log('üè¢ –ö–û–ù–ö–£–†–ï–ù–¢–´ –í –ë–ê–ó–ï:');
    competitors.forEach(comp => {
      console.log(`- ID: ${comp.id}, Username: ${comp.username}, URL: ${comp.profile_url}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Reels
    const reels = await db.select().from(schema.reelsTable).limit(5);
    console.log('\nüì• –ü–†–ò–ú–ï–†–´ REELS:');
    reels.forEach(reel => {
      console.log(`- Author: ${reel.author_username}, Views: ${reel.views_count}, Source: ${reel.source_type}:${reel.source_identifier}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏
    console.log('\nüîó –ü–†–û–í–ï–†–ö–ê –°–í–Ø–ó–ï–ô:');
    for (const comp of competitors) {
      const relatedReels = await db
        .select({ count: sql<number>`count(*)` })
        .from(schema.reelsTable)
        .where(sql`source_type = 'competitor' AND source_identifier = ${comp.id.toString()}`);
      
      console.log(`–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç ${comp.username}: ${relatedReels[0].count} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö Reels`);
    }
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalStats = await db
      .select({
        total: sql<number>`count(*)`,
        withSource: sql<number>`count(*) filter (where source_type is not null)`
      })
      .from(schema.reelsTable);
    
    console.log('\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`- –í—Å–µ–≥–æ Reels: ${totalStats[0].total}`);
    console.log(`- –° –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º: ${totalStats[0].withSource}`);
    console.log(`- –ë–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${totalStats[0].total - totalStats[0].withSource}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  checkRealData();
}
