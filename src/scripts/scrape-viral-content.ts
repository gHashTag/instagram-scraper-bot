/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞ –º–µ—Å—è—Ü
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npm run scrape-viral <projectId> [minViews] [limit]
 */

import dotenv from "dotenv";
import { initializeDBConnection, getTrackingHashtagsByProjectId } from "../db/neonDB";
import { scrapeInstagramReels } from "../agent/instagram-scraper";
import { logger } from "../logger";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function scrapeViralContent() {
  try {
    const args = process.argv.slice(2);
    
    if (args.length < 1) {
      logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run scrape-viral <projectId> [minViews] [limit]");
      process.exit(1);
    }
    
    const projectId = parseInt(args[0], 10);
    const minViews = args[1] ? parseInt(args[1], 10) : 1000;
    const limit = args[2] ? parseInt(args[2], 10) : 1000;
    
    if (isNaN(projectId)) {
      logger.error("‚ùå –û—à–∏–±–∫–∞: projectId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º");
      process.exit(1);
    }
    
    const APIFY_TOKEN = process.env.APIFY_TOKEN;
    
    if (!APIFY_TOKEN) {
      logger.error("‚ùå –û—à–∏–±–∫–∞: APIFY_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
      process.exit(1);
    }
    
    logger.info(`üî• –ó–ê–ü–£–°–ö –°–ö–†–ê–ü–ò–ù–ì–ê –í–ò–†–£–°–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê`);
    logger.info(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${minViews}+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ 30 –¥–Ω–µ–π`);
    logger.info(`üéØ –ü—Ä–æ–µ–∫—Ç: ${projectId}, –õ–∏–º–∏—Ç: ${limit}`);
    
    const db = initializeDBConnection();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à—Ç–µ–≥–∏ (–æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ª—É—á—à–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤)
    const hashtags = await getTrackingHashtagsByProjectId(projectId);
    
    logger.info(`üè∑Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ö—ç—à—Ç–µ–≥–æ–≤: ${hashtags.length}`);
    
    let totalReelsAdded = 0;
    const limitPerHashtag = Math.floor(limit / hashtags.length) || 10;
    
    // –°–∫—Ä–∞–ø–∏–º —Ö—ç—à—Ç–µ–≥–∏
    logger.info("üè∑Ô∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ —Ö—ç—à—Ç–µ–≥–æ–≤...");
    for (const hashtag of hashtags) {
      try {
        logger.info(`  üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º #${hashtag.tag_name}...`);
        
        const reelsAdded = await scrapeInstagramReels(
          db,
          projectId,
          "hashtag",
          hashtag.id,
          `#${hashtag.tag_name}`,
          {
            limit: limitPerHashtag,
            apifyToken: APIFY_TOKEN,
            minViews: minViews,
            maxAgeDays: 30,
          }
        );
        
        totalReelsAdded += reelsAdded;
        logger.info(`    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${reelsAdded} Reels –¥–ª—è #${hashtag.tag_name}`);
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if (hashtags.indexOf(hashtag) < hashtags.length - 1) {
          logger.info("    ‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...");
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
        
      } catch (error) {
        logger.error(`    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ #${hashtag.tag_name}:`, error);
      }
    }
    
    logger.info(`üéâ –°–ö–†–ê–ü–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!`);
    logger.info(`üìä –ò—Ç–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ Reels: ${totalReelsAdded}`);
    logger.info(`üî• –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${minViews}+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ 30 –¥–Ω–µ–π`);
    
  } catch (error) {
    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
scrapeViralContent();
