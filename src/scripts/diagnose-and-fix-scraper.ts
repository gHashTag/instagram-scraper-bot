/**
 * üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫—Ä–∞–ø–µ—Ä–∞ Instagram
 * 
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥ –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npx tsx src/scripts/diagnose-and-fix-scraper.ts [projectId]
 */

import {
  initializeDBConnection,
  getCompetitorAccountsByProjectId,
  getTrackingHashtagsByProjectId,
} from "../db/neonDB";
import { scrapeInstagramReels } from "../agent/instagram-scraper";
import { logger } from "../logger";
import dotenv from "dotenv";

dotenv.config();

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
const args = process.argv.slice(2);
const projectId = args[0] ? parseInt(args[0], 10) : 1;

interface DiagnosticResult {
  component: string;
  status: 'ok' | 'warning' | 'error';
  message: string;
  details?: any;
}

class ScraperDiagnostic {
  private db: any;
  private results: DiagnosticResult[] = [];

  constructor() {}

  private addResult(component: string, status: 'ok' | 'warning' | 'error', message: string, details?: any) {
    this.results.push({ component, status, message, details });
    const emoji = status === 'ok' ? '‚úÖ' : status === 'warning' ? '‚ö†Ô∏è' : '‚ùå';
    console.log(`${emoji} ${component}: ${message}`);
    if (details) {
      console.log(`   –î–µ—Ç–∞–ª–∏:`, details);
    }
  }

  async diagnose(): Promise<void> {
    console.log('üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ö–†–ê–ü–ï–†–ê INSTAGRAM');
    console.log('================================\n');

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      await this.checkEnvironment();

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.checkDatabase();

      // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
      await this.checkProjectConfiguration();

      // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Apify API
      await this.checkApifyAPI();

      // 5. –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥
      await this.runTestScraping();

      // 6. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
      this.generateReport();

    } catch (error) {
      this.addResult('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', 'error', `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    }
  }

  private async checkEnvironment(): Promise<void> {
    console.log('üîç 1. –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø');
    console.log('===================================');

    // DATABASE_URL
    if (process.env.DATABASE_URL) {
      this.addResult('DATABASE_URL', 'ok', '–ù–∞–π–¥–µ–Ω');
    } else {
      this.addResult('DATABASE_URL', 'error', '–ù–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    }

    // APIFY_TOKEN
    if (process.env.APIFY_TOKEN) {
      if (process.env.APIFY_TOKEN.startsWith('apify_api_')) {
        this.addResult('APIFY_TOKEN', 'ok', `–ù–∞–π–¥–µ–Ω (${process.env.APIFY_TOKEN.substring(0, 20)}...)`);
      } else {
        this.addResult('APIFY_TOKEN', 'error', '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞');
      }
    } else {
      this.addResult('APIFY_TOKEN', 'error', '–ù–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    }

    // OPENAI_API_KEY (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (process.env.OPENAI_API_KEY) {
      this.addResult('OPENAI_API_KEY', 'ok', '–ù–∞–π–¥–µ–Ω (–¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π)');
    } else {
      this.addResult('OPENAI_API_KEY', 'warning', '–ù–µ –Ω–∞–π–¥–µ–Ω (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)');
    }

    console.log('');
  }

  private async checkDatabase(): Promise<void> {
    console.log('üóÑÔ∏è 2. –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•');
    console.log('==========================');

    try {
      this.db = await initializeDBConnection();
      this.addResult('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î', 'ok', '–£—Å–ø–µ—à–Ω–æ');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
      const tables = ['projects', 'competitors', 'hashtags', 'reels'];
      for (const table of tables) {
        try {
          const result = await this.db.executeQuery(`SELECT COUNT(*) FROM ${table}`);
          const count = result.rows[0].count;
          this.addResult(`–¢–∞–±–ª–∏—Ü–∞ ${table}`, 'ok', `${count} –∑–∞–ø–∏—Å–µ–π`);
        } catch (error) {
          this.addResult(`–¢–∞–±–ª–∏—Ü–∞ ${table}`, 'error', `–û—à–∏–±–∫–∞: ${error.message}`);
        }
      }

    } catch (error) {
      this.addResult('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î', 'error', `–û—à–∏–±–∫–∞: ${error.message}`);
    }

    console.log('');
  }

  private async checkProjectConfiguration(): Promise<void> {
    console.log('üìÅ 3. –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ü–†–û–ï–ö–¢–ê');
    console.log('===================================');

    if (!this.db) {
      this.addResult('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞', 'error', '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î');
      return;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç
      const projectResult = await this.db.executeQuery(
        'SELECT * FROM projects WHERE id = $1',
        [projectId]
      );

      if (projectResult.rows.length === 0) {
        this.addResult('–ü—Ä–æ–µ–∫—Ç', 'error', `–ü—Ä–æ–µ–∫—Ç —Å ID ${projectId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
      }

      const project = projectResult.rows[0];
      this.addResult('–ü—Ä–æ–µ–∫—Ç', 'ok', `"${project.name}" (ID: ${projectId})`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
      const competitors = await getCompetitorAccountsByProjectId(this.db, projectId);
      if (competitors.length === 0) {
        this.addResult('–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã', 'warning', '–ù–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ');
      } else {
        const activeCompetitors = competitors.filter(c => c.is_active);
        this.addResult('–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã', 'ok', `${activeCompetitors.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–∑ ${competitors.length}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 3
        activeCompetitors.slice(0, 3).forEach(comp => {
          console.log(`   - @${comp.username} (ID: ${comp.id})`);
        });
        if (activeCompetitors.length > 3) {
          console.log(`   ... –∏ –µ—â–µ ${activeCompetitors.length - 3}`);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö—ç—à—Ç–µ–≥–∏
      const hashtags = await getTrackingHashtagsByProjectId(this.db, projectId);
      if (hashtags.length === 0) {
        this.addResult('–•—ç—à—Ç–µ–≥–∏', 'warning', '–ù–µ—Ç —Ö—ç—à—Ç–µ–≥–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ');
      } else {
        const activeHashtags = hashtags.filter(h => h.is_active);
        this.addResult('–•—ç—à—Ç–µ–≥–∏', 'ok', `${activeHashtags.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–∑ ${hashtags.length}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
        activeHashtags.slice(0, 5).forEach(tag => {
          console.log(`   - #${tag.tag_name} (ID: ${tag.id})`);
        });
        if (activeHashtags.length > 5) {
          console.log(`   ... –∏ –µ—â–µ ${activeHashtags.length - 5}`);
        }
      }

    } catch (error) {
      this.addResult('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞', 'error', `–û—à–∏–±–∫–∞: ${error.message}`);
    }

    console.log('');
  }

  private async checkApifyAPI(): Promise<void> {
    console.log('üï∑Ô∏è 4. –ü–†–û–í–ï–†–ö–ê APIFY API');
    console.log('========================');

    if (!process.env.APIFY_TOKEN) {
      this.addResult('Apify API', 'error', '–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    try {
      const { ApifyClient } = await import('apify-client');
      const client = new ApifyClient({ token: process.env.APIFY_TOKEN });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
      const user = await client.user().get();
      this.addResult('Apify API', 'ok', `–ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ ${user.username}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–æ—Ä—ã
      const actors = ['apify/instagram-scraper', 'apify/instagram-reel-scraper'];
      for (const actorId of actors) {
        try {
          const actor = await client.actor(actorId).get();
          this.addResult(`–ê–∫—Ç–æ—Ä ${actorId}`, 'ok', `–î–æ—Å—Ç—É–ø–µ–Ω (v${actor.taggedBuilds?.latest?.buildNumber || 'unknown'})`);
        } catch (error) {
          this.addResult(`–ê–∫—Ç–æ—Ä ${actorId}`, 'warning', `–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
        }
      }

    } catch (error) {
      this.addResult('Apify API', 'error', `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
    }

    console.log('');
  }

  private async runTestScraping(): Promise<void> {
    console.log('üß™ 5. –¢–ï–°–¢–û–í–´–ô –°–ö–†–ê–ü–ò–ù–ì');
    console.log('=======================');

    if (!this.db || !process.env.APIFY_TOKEN) {
      this.addResult('–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥', 'error', '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞ Apify');
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ–¥–∏–Ω —Ö—ç—à—Ç–µ–≥ –¥–ª—è —Ç–µ—Å—Ç–∞
      const hashtags = await getTrackingHashtagsByProjectId(this.db, projectId);
      const activeHashtags = hashtags.filter(h => h.is_active);

      if (activeHashtags.length === 0) {
        this.addResult('–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥', 'warning', '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞');
        return;
      }

      const testHashtag = activeHashtags[0];
      console.log(`üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ —Ö—ç—à—Ç–µ–≥–∞: #${testHashtag.tag_name}`);

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const startTime = Date.now();
      const reelsAdded = await scrapeInstagramReels(
        this.db,
        projectId,
        "hashtag",
        testHashtag.id,
        `#${testHashtag.tag_name}`,
        {
          limit: 5, // –¢–æ–ª—å–∫–æ 5 reels –¥–ª—è —Ç–µ—Å—Ç–∞
          apifyToken: process.env.APIFY_TOKEN,
          minViews: 10000, // –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–∞
          maxAgeDays: 30, // 30 –¥–Ω–µ–π
        }
      );

      const duration = Math.round((Date.now() - startTime) / 1000);

      if (reelsAdded > 0) {
        this.addResult('–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥', 'ok', `–î–æ–±–∞–≤–ª–µ–Ω–æ ${reelsAdded} reels –∑–∞ ${duration}—Å`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        const recentReels = await this.db.executeQuery(
          `SELECT author_username, views_count, published_at, source_type, source_identifier 
           FROM reels 
           WHERE source_type = 'hashtag' AND source_identifier = $1 
           ORDER BY created_at DESC 
           LIMIT 3`,
          [testHashtag.id.toString()]
        );

        console.log('   –ü—Ä–∏–º–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö reels:');
        recentReels.rows.forEach((reel, index) => {
          const publishedDate = reel.published_at ? new Date(reel.published_at).toLocaleDateString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
          console.log(`   ${index + 1}. @${reel.author_username} - ${reel.views_count?.toLocaleString() || 'N/A'} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (${publishedDate})`);
        });

      } else {
        this.addResult('–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥', 'warning', `–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö reels –∑–∞ ${duration}—Å (–≤–æ–∑–º–æ–∂–Ω–æ –≤—Å–µ —É–∂–µ –µ—Å—Ç—å –≤ –ë–î)`);
      }

    } catch (error) {
      this.addResult('–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥', 'error', `–û—à–∏–±–∫–∞: ${error.message}`);
    }

    console.log('');
  }

  private generateReport(): void {
    console.log('üìä 6. –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('====================');

    const okCount = this.results.filter(r => r.status === 'ok').length;
    const warningCount = this.results.filter(r => r.status === 'warning').length;
    const errorCount = this.results.filter(r => r.status === 'error').length;

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${okCount}`);
    console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${warningCount}`);
    console.log(`‚ùå –û—à–∏–±–∫–∏: ${errorCount}`);

    if (errorCount === 0) {
      console.log('\nüéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ô–î–ï–ù–ê –£–°–ü–ï–®–ù–û!');
      console.log('–°–∫—Ä–∞–ø–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥.');
      
      console.log('\nüöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:');
      console.log(`npx tsx src/scripts/bulk-scrape-hashtags.ts ${projectId} $APIFY_TOKEN 14 50000 100`);
      console.log(`npx tsx src/scripts/bulk-scrape-competitors.ts ${projectId} $APIFY_TOKEN 1 100`);
      
    } else {
      console.log('\nüîß –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–û–ö');
      console.log('–ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø–æ–ª–Ω–æ–≥–æ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞.');
      
      const criticalErrors = this.results.filter(r => r.status === 'error');
      console.log('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:');
      criticalErrors.forEach(error => {
        console.log(`   - ${error.component}: ${error.message}`);
      });
    }

    console.log('\nüìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π results');
  }

  getResults(): DiagnosticResult[] {
    return this.results;
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async function main() {
  const diagnostic = new ScraperDiagnostic();
  await diagnostic.diagnose();
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  return diagnostic.getResults();
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    process.exit(1);
  });
}

export { ScraperDiagnostic, main as runDiagnostic };
