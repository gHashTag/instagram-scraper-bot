/**
 * üïâÔ∏è Meta Muse Project Initialization
 *
 * **"‡§Ü‡§∞‡§Æ‡•ç‡§≠‡•ã ‡§π‡§ø ‡§™‡•ç‡§∞‡§™‡§û‡•ç‡§ö‡§∏‡•ç‡§Ø ‡§∏‡§∞‡•ç‡§µ‡§∏‡•ç‡§Ø ‡§™‡•ç‡§∞‡§§‡§ø‡§∑‡•ç‡§†‡§æ"**
 * "–ù–∞—á–∞–ª–æ - —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ –≤—Å–µ–≥–æ —Å—É—â–µ–≥–æ"
 *
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç Meta Muse –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:
 * - –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø—Ä–æ–µ–∫—Ç–∞ (ID: 2)
 * - –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ 151 —Ö—ç—à—Ç–µ–≥–∞
 * - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
 */

import { initializeDBConnection, NeonDB } from "../db/neonDB";
import { projectsTable, hashtagsTable, usersTable } from "../db/schema";
import { MetaMuseHashtagStrategy } from "../strategy/meta-muse-hashtag-strategy";
import { NeonAdapter } from "../adapters/neon-adapter";
import { eq } from "drizzle-orm";
import dotenv from "dotenv";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

interface InitStats {
  projectCreated: boolean;
  hashtagsCreated: number;
  hashtagsSkipped: number;
  errors: string[];
}

/**
 * üê≠ Meta Muse Project Initializer
 */
export class MetaMuseProjectInitializer {
  private db: NeonDB;
  private stats: InitStats;

  constructor() {
    this.stats = {
      projectCreated: false,
      hashtagsCreated: 0,
      hashtagsSkipped: 0,
      errors: [],
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
   */
  private async ensureUser(): Promise<string> {
    try {
      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingUsers = await this.db.select().from(usersTable).limit(1);

      if (existingUsers.length > 0) {
        console.log(
          `üë§ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${existingUsers[0].id}`
        );
        return existingUsers[0].id;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Meta Muse
      const newUser = await this.db
        .insert(usersTable)
        .values({
          telegram_id: 999999999, // –§–∏–∫—Ç–∏–≤–Ω—ã–π ID –¥–ª—è Meta Muse
          username: "meta_muse_client",
          first_name: "Meta",
          last_name: "Muse",
          subscription_level: "premium",
          created_at: new Date(),
          updated_at: new Date(),
        })
        .returning({ id: usersTable.id });

      console.log(
        `üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è Meta Muse: ${newUser[0].id}`
      );
      return newUser[0].id;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      this.stats.errors.push(`–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error}`);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ Meta Muse
   */
  private async ensureProject(userId: string): Promise<number> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç —Å ID = 2
      const existingProject = await this.db
        .select()
        .from(projectsTable)
        .where(eq(projectsTable.id, 2))
        .limit(1);

      if (existingProject.length > 0) {
        console.log(`üìä –ü—Ä–æ–µ–∫—Ç Meta Muse —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: 2)`);
        console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${existingProject[0].name}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${existingProject[0].description}`);
        return 2;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
      const newProject = await this.db
        .insert(projectsTable)
        .values({
          id: 2, // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º ID = 2
          user_id: userId,
          name: "Meta Muse",
          description:
            "–ê–Ω–∏–º–µ –º—ã—à—å - AI-–∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä –ø—Ä–æ–µ–∫—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º 151 —Ö—ç—à—Ç–µ–≥–∞ –≤ 6 –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö",
          industry: "AI & Digital Influencers",
          is_active: true,
          created_at: new Date(),
          updated_at: new Date(),
        })
        .returning({ id: projectsTable.id });

      this.stats.projectCreated = true;
      console.log(`üìä –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç Meta Muse (ID: ${newProject[0].id})`);
      return newProject[0].id;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:", error);
      this.stats.errors.push(`–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ${error}`);
      throw error;
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  private async addHashtagsToDatabase(projectId: number): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ö—ç—à—Ç–µ–≥–æ–≤ –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
      const adapter = new NeonAdapter(this.db);
      const strategy = new MetaMuseHashtagStrategy(adapter, projectId);
      const config = strategy.createHashtagConfig();

      console.log(
        `\nüè∑Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ${config.totalHashtags} —Ö—ç—à—Ç–µ–≥–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`
      );

      for (const category of config.categories) {
        console.log(
          `\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name} (${category.hashtags.length} —Ö—ç—à—Ç–µ–≥–æ–≤)`
        );

        for (const hashtag of category.hashtags) {
          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–∞
            const existingHashtag = await this.db
              .select()
              .from(hashtagsTable)
              .where(eq(hashtagsTable.tag_name, hashtag))
              .where(eq(hashtagsTable.project_id, projectId))
              .limit(1);

            if (existingHashtag.length > 0) {
              console.log(`   ‚ö†Ô∏è ${hashtag} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
              this.stats.hashtagsSkipped++;
              continue;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ö—ç—à—Ç–µ–≥
            await this.db.insert(hashtagsTable).values({
              project_id: projectId,
              tag_name: hashtag,
              notes: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name}`,
              is_active: true,
              added_at: new Date(),
              created_at: new Date(),
              updated_at: new Date(),
            });

            console.log(`   ‚úÖ ${hashtag} –¥–æ–±–∞–≤–ª–µ–Ω`);
            this.stats.hashtagsCreated++;
          } catch (error: any) {
            if (
              error.message?.includes("duplicate") ||
              error.message?.includes("unique")
            ) {
              console.log(`   ‚ö†Ô∏è ${hashtag} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥—É–±–ª–∏–∫–∞—Ç)`);
              this.stats.hashtagsSkipped++;
            } else {
              console.error(`   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ${hashtag}:`, error);
              this.stats.errors.push(`–•—ç—à—Ç–µ–≥ ${hashtag}: ${error}`);
            }
          }
        }
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö—ç—à—Ç–µ–≥–æ–≤:", error);
      this.stats.errors.push(`–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–æ–≤: ${error}`);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  private generateInitReport(): void {
    console.log(`\nüéâ –û–¢–ß–ï–¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò Meta Muse`);
    console.log(`‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`);
    console.log(`üÜî Project ID: 2`);
    console.log(
      `üìä –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: ${this.stats.projectCreated ? "–î–∞" : "–ù–µ—Ç (—É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª)"}`
    );
    console.log(`üè∑Ô∏è –•—ç—à—Ç–µ–≥–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${this.stats.hashtagsCreated}`);
    console.log(`‚ö†Ô∏è –•—ç—à—Ç–µ–≥–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${this.stats.hashtagsSkipped}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${this.stats.errors.length}`);

    if (this.stats.errors.length > 0) {
      console.log(`\n‚ùå –û–®–ò–ë–ö–ò:`);
      this.stats.errors.forEach((error, index) => {
        console.log(`${index + 1}. ${error}`);
      });
    }

    console.log(`\n‚úÖ –ì–û–¢–û–í–û –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:`);
    console.log(`1. üß™ –î–µ–º–æ-–∑–∞–ø—É—Å–∫: bun run src/scripts/meta-muse-demo.ts`);
    console.log(
      `2. üï∑Ô∏è –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫: bun run src/scripts/meta-muse-automated-scraper.ts`
    );
    console.log(
      `3. ‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è: bun run src/scripts/meta-muse-scheduler.ts generate`
    );
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
   */
  async initialize(): Promise<void> {
    try {
      console.log(`üïâÔ∏è Meta Muse Project Initialization - –ó–ê–ü–£–°–ö`);
      console.log(`‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`);
      console.log(`üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString()}`);
      console.log(`üÜî Target Project ID: 2`);

      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      this.db = await initializeDBConnection();
      console.log(`üîó –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞`);

      // –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = await this.ensureUser();

      // –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
      const projectId = await this.ensureProject(userId);

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–æ–≤
      await this.addHashtagsToDatabase(projectId);

      // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
      this.generateInitReport();

      console.log(`\nüéâ Meta Muse Project –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ! üê≠‚ö°`);
    } catch (error) {
      console.error(`\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:`, error);
      this.stats.errors.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error}`);
      this.generateInitReport();
      process.exit(1);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞
   */
  async checkStatus(): Promise<void> {
    try {
      console.log(`üïâÔ∏è Meta Muse Project Status Check`);
      console.log(`‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`);

      this.db = await initializeDBConnection();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç
      const project = await this.db
        .select()
        .from(projectsTable)
        .where(eq(projectsTable.id, 2))
        .limit(1);

      if (project.length === 0) {
        console.log(`‚ùå –ü—Ä–æ–µ–∫—Ç Meta Muse (ID: 2) –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        console.log(
          `üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é: bun run src/scripts/meta-muse-init-project.ts`
        );
        return;
      }

      console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω:`);
      console.log(`   ID: ${project[0].id}`);
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${project[0].name}`);
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${project[0].description}`);
      console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${project[0].is_active}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö—ç—à—Ç–µ–≥–∏
      const hashtags = await this.db
        .select()
        .from(hashtagsTable)
        .where(eq(hashtagsTable.project_id, 2));

      console.log(`\nüè∑Ô∏è –•—ç—à—Ç–µ–≥–∏: ${hashtags.length} —à—Ç.`);

      if (hashtags.length > 0) {
        console.log(
          `   –ü—Ä–∏–º–µ—Ä—ã: ${hashtags
            .slice(0, 5)
            .map((h) => h.tag_name)
            .join(", ")}...`
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
      const reels = await this.db
        .select()
        .from(hashtagsTable)
        .where(eq(hashtagsTable.project_id, 2));

      console.log(`üì± –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${reels.length} –∑–∞–ø–∏—Å–µ–π`);

      console.log(`\nüöÄ –ì–û–¢–û–í –ö –ó–ê–ü–£–°–ö–£!`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:`, error);
    }
  }
}

/**
 * CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 */
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  const initializer = new MetaMuseProjectInitializer();

  switch (command) {
    case "init":
      await initializer.initialize();
      break;

    case "status":
      await initializer.checkStatus();
      break;

    case "help":
    default:
      console.log(`üïâÔ∏è Meta Muse Project Initializer Commands:

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  init    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ —Ö—ç—à—Ç–µ–≥–∏ –≤ –±–∞–∑–µ
  status  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
  help    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  bun run src/scripts/meta-muse-init-project.ts init
  bun run src/scripts/meta-muse-init-project.ts status

üïâÔ∏è –î–∞ –ø—Ä–µ–±—É–¥–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö! üê≠‚ö°`);
      break;
  }
}

// –ó–∞–ø—É—Å–∫ CLI
if (require.main === module) {
  main().catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
    process.exit(1);
  });
}
