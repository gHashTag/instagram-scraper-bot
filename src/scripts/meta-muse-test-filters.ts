#!/usr/bin/env bun

/**
 * üß™ Meta Muse Test Filters
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */

import { ApifyClient } from "apify-client";

// üîß Configuration
const MIN_VIEWS = 50000; // –ú–∏–Ω–∏–º—É–º 50K –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
const DAYS_BACK = 14; // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏
const TWO_WEEKS_AGO = new Date(Date.now() - DAYS_BACK * 24 * 60 * 60 * 1000);

// üåê Initialize Apify
const apifyClient = new ApifyClient({ token: process.env.APIFY_TOKEN! });

// üéØ Filter function for quality content
function passesQualityFilter(item: any): boolean {
  // Check views count
  const views = (item.viewsCount as number) || 0;
  if (views < MIN_VIEWS) {
    return false;
  }

  // Check date (last 2 weeks)
  if (item.timestamp) {
    const postDate = new Date(item.timestamp as string);
    if (postDate < TWO_WEEKS_AGO) {
      return false;
    }
  }

  return true;
}

async function testFilters(): Promise<void> {
  console.log("üß™ Meta Muse Test Filters - –ó–ê–ü–£–°–ö");
  console.log("‚ïê".repeat(50));
  console.log(`üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString()}`);
  console.log(`üéØ –§–ò–õ–¨–¢–†–´:`);
  console.log(
    `   üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${DAYS_BACK} –¥–Ω–µ–π (—Å ${TWO_WEEKS_AGO.toLocaleDateString()})`
  );
  console.log(`   üëÄ –ú–∏–Ω–∏–º—É–º ${MIN_VIEWS.toLocaleString()} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`);

  try {
    // Test with a popular hashtag
    const testHashtag = "AI";
    console.log(`\nüè∑Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–∞: #${testHashtag}`);

    // Run Apify scraper
    const run = await apifyClient
      .actor("apify/instagram-hashtag-scraper")
      .call({
        hashtags: [testHashtag],
        resultsLimit: 20,
        addParentData: false,
      });

    console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫—Ä–µ–ø–∏–Ω–≥–∞...`);

    // Get results
    const { items } = await apifyClient
      .dataset(run.defaultDatasetId)
      .listItems();

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${items.length} –ø–æ—Å—Ç–æ–≤ –¥–ª—è #${testHashtag}`);

    // Apply filters
    const filteredItems = items.filter(passesQualityFilter);
    const filteredCount = items.length - filteredItems.length;

    console.log(
      `üéØ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${filteredItems.length} –ø–æ—Å—Ç–æ–≤ (–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: ${filteredCount})`
    );

    // Show examples
    console.log("\nüìã –ü–†–ò–ú–ï–†–´ –ü–û–°–¢–û–í:");

    items.slice(0, 5).forEach((item, index) => {
      const views = (item.viewsCount as number) || 0;
      const date = item.timestamp ? new Date(item.timestamp as string) : null;
      const passed = passesQualityFilter(item);

      console.log(
        `\n${index + 1}. ${passed ? "‚úÖ" : "‚ùå"} ${item.ownerUsername || "Unknown"}`
      );
      console.log(`   üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${views.toLocaleString()}`);
      console.log(`   üìÖ –î–∞—Ç–∞: ${date?.toLocaleDateString() || "Unknown"}`);
      console.log(`   üéØ –§–∏–ª—å—Ç—Ä: ${passed ? "–ü–†–û–®–ï–õ" : "–ù–ï –ü–†–û–®–ï–õ"}`);

      if (!passed) {
        if (views < MIN_VIEWS) {
          console.log(`   ‚ùå –ú–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (${views} < ${MIN_VIEWS})`);
        }
        if (date && date < TWO_WEEKS_AGO) {
          console.log(
            `   ‚ùå –°—Ç–∞—Ä—ã–π –ø–æ—Å—Ç (${date.toLocaleDateString()} < ${TWO_WEEKS_AGO.toLocaleDateString()})`
          );
        }
      }
    });

    console.log("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:");
    console.log(
      `   üìä –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${Math.round((filteredItems.length / items.length) * 100)}%`
    );
    console.log(`   ‚úÖ –ü—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä: ${filteredItems.length} –ø–æ—Å—Ç–æ–≤`);
    console.log(`   ‚ùå –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: ${filteredCount} –ø–æ—Å—Ç–æ–≤`);

    if (filteredItems.length > 0) {
      console.log("\nüèÜ –§–ò–õ–¨–¢–†–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!");
      console.log("üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–±–æ—Ä—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞");
    } else {
      console.log("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –§–∏–ª—å—Ç—Ä—ã —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ!");
      console.log("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∏–∑–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è");
    }
  } catch (error) {
    console.error("\nüí• –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:", error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  testFilters().catch(console.error);
}

export { testFilters };
