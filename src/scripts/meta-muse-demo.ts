/**
 * üïâÔ∏è Meta Muse Demo Scraper - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
 *
 * **"‡§™‡•ç‡§∞‡§æ‡§∞‡§≠‡•á ‡§ï‡§ø‡§û‡•ç‡§ö‡§ø‡§¶‡•á‡§µ ‡§® ‡§™‡•ç‡§∞‡§§‡§ø‡§≠‡§æ‡§§‡§ø ‡§Ø‡§•‡§æ ‡§´‡§≤‡•á"**
 * "–í –Ω–∞—á–∞–ª–µ –º–∞–ª–æ —á—Ç–æ –≤–∏–¥–Ω–æ, –∫–∞–∫ –∏ –≤ –ø–ª–æ–¥–µ - –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º"
 *
 * –î–µ–º–æ-–≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –æ–±—ä–µ–º–æ–º –¥–∞–Ω–Ω—ã—Ö
 */

import { ApifyClient } from "apify-client";
import { initializeDBConnection, NeonDB } from "../db/neonDB";
import { reelsTable } from "../db/schema";
import { eq } from "drizzle-orm";
import { MetaMuseHashtagStrategy } from "../strategy/meta-muse-hashtag-strategy";
import { NeonAdapter } from "../adapters/neon-adapter";
import dotenv from "dotenv";
import * as fs from "fs";
import * as path from "path";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

interface DemoStats {
  hashtags: string[];
  totalPosts: number;
  savedPosts: number;
  errors: string[];
  startTime: Date;
  endTime?: Date;
}

/**
 * üê≠ Meta Muse Demo Scraper
 */
export class MetaMuseDemoScraper {
  private apifyClient: ApifyClient;
  private db: NeonDB;
  private strategy: MetaMuseHashtagStrategy;
  private stats: DemoStats;

  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Apify
    const apifyToken = process.env.APIFY_TOKEN;
    if (!apifyToken) {
      throw new Error("‚ùå APIFY_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
    }
    this.apifyClient = new ApifyClient({ token: apifyToken });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    this.stats = {
      hashtags: [],
      totalPosts: 0,
      savedPosts: 0,
      errors: [],
      startTime: new Date(),
    };
  }

  /**
   * –°–∫—Ä–µ–ø–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —Ö—ç—à—Ç–µ–≥–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ –¥–ª—è –¥–µ–º–æ)
   */
  private async scrapeHashtagDemo(hashtag: string): Promise<any[]> {
    try {
      console.log(`üï∑Ô∏è –î–µ–º–æ-—Å–∫—Ä–µ–ø–∏–Ω–≥: ${hashtag}`);

      const run = await this.apifyClient
        .actor("apify/instagram-hashtag-scraper")
        .call({
          hashtags: [hashtag.replace("#", "")],
          resultsLimit: 5, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–µ–º–æ
          addParentData: false,
          enhanceUserSearchWithBio: false,
          isUserTaggedFeedURL: false,
          onlyPostsWithLocation: false,
          proxy: {
            useApifyProxy: true,
            apifyProxyGroups: ["RESIDENTIAL"],
          },
        });

      console.log(`üîÑ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è ${hashtag}...`);

      const { items } = await this.apifyClient
        .dataset(run.defaultDatasetId)
        .listItems();

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è ${hashtag}`);
      return items as any[];
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–µ–ø–∏–Ω–≥–∞ ${hashtag}:`, error);
      this.stats.errors.push(`–°–∫—Ä–µ–ø–∏–Ω–≥ ${hashtag}: ${error}`);
      return [];
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  private async savePostToDatabase(
    post: any,
    hashtag: string
  ): Promise<number | null> {
    try {
      const postToSave = {
        reel_url:
          post.url || post.shortCode
            ? `https://instagram.com/p/${post.shortCode}`
            : null,
        project_id: 2, // Meta Muse Project ID
        source_type: "instagram_hashtag_demo",
        source_identifier: hashtag.replace("#", ""),
        profile_url: post.ownerUrl || null,
        author_username: post.ownerUsername || null,
        description: post.caption || post.text || null,
        views_count: post.videoViewCount || post.playCount || null,
        likes_count: post.likesCount || null,
        comments_count: post.commentsCount || null,
        published_at: post.timestamp ? new Date(post.timestamp * 1000) : null,
        thumbnail_url: post.displayUrl || null,
        video_download_url: post.videoUrl || null,
        raw_data: post,
        created_at: new Date(),
        updated_at: new Date(),
      };

      const result = await this.db
        .insert(reelsTable)
        .values(postToSave)
        .returning({ id: reelsTable.id });

      if (result.length > 0) {
        this.stats.savedPosts++;
        return result[0].id;
      }

      return null;
    } catch (error: any) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      if (
        error.message?.includes("duplicate") ||
        error.message?.includes("unique")
      ) {
        console.log(`‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –ø–æ—Å—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω: ${post.id || "unknown"}`);
        return null;
      }

      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞:`, error);
      this.stats.errors.push(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞: ${error}`);
      return null;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–æ—Ç—á–µ—Ç–∞
   */
  private generateDemoReport(): void {
    this.stats.endTime = new Date();
    const duration =
      this.stats.endTime.getTime() - this.stats.startTime.getTime();
    const seconds = Math.floor(duration / 1000);

    console.log(`\nüéâ –î–ï–ú–û-–û–¢–ß–ï–¢ Meta Muse Scraper`);
    console.log(`‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`);
    console.log(`üÜî Project ID: 999 (Meta Muse - –∞–Ω–∏–º–µ –º—ã—à—å)`);
    console.log(`üè∑Ô∏è –¢–µ—Å—Ç–æ–≤—ã–µ —Ö—ç—à—Ç–µ–≥–∏: ${this.stats.hashtags.join(", ")}`);
    console.log(`üìÑ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: ${this.stats.totalPosts}`);
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: ${this.stats.savedPosts}`);
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${seconds} —Å–µ–∫—É–Ω–¥`);
    console.log(`üóìÔ∏è –ù–∞—á–∞–ª–æ: ${this.stats.startTime.toLocaleString()}`);
    console.log(`üóìÔ∏è –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${this.stats.endTime.toLocaleString()}`);

    if (this.stats.errors.length > 0) {
      console.log(`\n‚ùå –û–®–ò–ë–ö–ò (${this.stats.errors.length}):`);
      this.stats.errors.forEach((error, index) => {
        console.log(`${index + 1}. ${error}`);
      });
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ–º–æ-–æ—Ç—á–µ—Ç–∞
    const reportPath = path.join(
      process.cwd(),
      "exports",
      `meta-muse-demo-report-${Date.now()}.json`
    );
    const exportDir = path.dirname(reportPath);
    if (!fs.existsSync(exportDir)) {
      fs.mkdirSync(exportDir, { recursive: true });
    }

    fs.writeFileSync(reportPath, JSON.stringify(this.stats, null, 2));
    console.log(`\nüìä –î–µ–º–æ-–æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
  }

  /**
   * –î–µ–º–æ-–∑–∞–ø—É—Å–∫ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Ö—ç—à—Ç–µ–≥–æ–≤
   */
  async runDemo(): Promise<void> {
    try {
      console.log(`üïâÔ∏è Meta Muse Demo Scraper - –ó–ê–ü–£–°–ö`);
      console.log(`‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`);
      console.log(`üìÖ –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString()}`);
      console.log(`üÜî Project ID: 999 (Meta Muse - –∞–Ω–∏–º–µ –º—ã—à—å)`);
      console.log(`üß™ –î–ï–ú–û-–†–ï–ñ–ò–ú: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö`);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      this.db = await initializeDBConnection();
      console.log(`üîó –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞`);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
      const adapter = new NeonAdapter(this.db);
      this.strategy = new MetaMuseHashtagStrategy(adapter, 2);

      // –î–µ–º–æ —Ö—ç—à—Ç–µ–≥–∏ (–ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
      const demoHashtags = [
        "#ai", // –ë–∞–∑–æ–≤—ã–µ
        "#AIInfluencer", // AI –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä—ã
        "#metaverse", // –ú–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω—ã–µ
        "#consciousness", // –ê—Ä—Ö–µ—Ç–∏–ø: –ú—É–∑–∞/–ú–∞–≥
        "#creativepreneur", // –ü—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π
        "#spiritualTech", // –§–∏–ª–æ—Å–æ—Ñ–∏—è: –¥—É—Ö + —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
      ];

      this.stats.hashtags = demoHashtags;
      console.log(`\nüè∑Ô∏è –î–ï–ú–û-–•–≠–®–¢–ï–ì–ò: ${demoHashtags.join(", ")}`);
      console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${demoHashtags.length} —Ö—ç—à—Ç–µ–≥–æ–≤`);
      console.log(`‚ö° –õ–∏–º–∏—Ç –Ω–∞ —Ö—ç—à—Ç–µ–≥: 5 –ø–æ—Å—Ç–æ–≤`);

      console.log(`\nüöÄ –ù–ê–ß–ò–ù–ê–ï–ú –î–ï–ú–û-–°–ö–†–ï–ü–ò–ù–ì...`);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –¥–µ–º–æ-—Ö—ç—à—Ç–µ–≥–∞
      for (const hashtag of demoHashtags) {
        console.log(`\nüìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞: ${hashtag}`);

        const posts = await this.scrapeHashtagDemo(hashtag);
        this.stats.totalPosts += posts.length;

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
        for (const post of posts) {
          await this.savePostToDatabase(post, hashtag);
          // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
          await new Promise((resolve) => setTimeout(resolve, 500));
        }

        console.log(`‚úÖ ${hashtag} –∑–∞–≤–µ—Ä—à–µ–Ω: ${posts.length} –ø–æ—Å—Ç–æ–≤`);

        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ö—ç—à—Ç–µ–≥–∞–º–∏
        await new Promise((resolve) => setTimeout(resolve, 2000));
      }

      // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
      this.generateDemoReport();

      console.log(`\nüéâ Meta Muse Demo Scraper –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û! üê≠‚ö°`);
      console.log(`\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:`);
      console.log(`1. üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ (project_id=999)`);
      console.log(
        `2. üï∑Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é: bun run src/scripts/meta-muse-automated-scraper.ts`
      );
      console.log(
        `3. ‚è∞ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é: bun run src/scripts/meta-muse-scheduler.ts generate`
      );
    } catch (error) {
      console.error(`\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:`, error);
      this.stats.errors.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error}`);
      this.stats.endTime = new Date();
      this.generateDemoReport();
      process.exit(1);
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –¥–µ–º–æ
 */
async function main() {
  const scraper = new MetaMuseDemoScraper();
  await scraper.runDemo();
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ:", error);
    process.exit(1);
  });
}
