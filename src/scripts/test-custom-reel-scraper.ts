/**
 * –¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ Instagram Reel Scraper (ID: xMc5Ga1oCONPmWJIa)
 * –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Reels
 */

import { ApifyClient } from "apify-client";
import dotenv from "dotenv";

dotenv.config();

const args = process.argv.slice(2);
const username = args[0] || "med_yu_med";
const apifyToken = process.env.APIFY_TOKEN;

if (!apifyToken) {
  console.error("APIFY_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
  process.exit(1);
}

async function testCustomReelScraper() {
  console.log(`üé¨ –¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ Instagram Reel Scraper`);
  console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}`);
  console.log(`üîë –¢–æ–∫–µ–Ω: ${apifyToken}`);
  console.log(`üÜî –°–∫—Ä–µ–ø–µ—Ä ID: xMc5Ga1oCONPmWJIa`);

  const client = new ApifyClient({ token: apifyToken });

  try {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
    const input = {
      username: [username],
      resultsLimit: 30,
    };

    console.log(`\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:`);
    console.log(`   Username: [${username}]`);
    console.log(`   Results Limit: 30`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–æ—Ä –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const run = await client.actor("xMc5Ga1oCONPmWJIa").call(input);

    console.log(`‚úÖ –ê–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
    console.log(`üÜî Run ID: ${run.id}`);
    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${run.status}`);

    if (run.status === "SUCCEEDED") {
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ dataset
      console.log(`\nüì• –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ dataset...`);
      const { items } = await client.dataset(run.defaultDatasetId).listItems();

      console.log(`üìä –ü–û–õ–£–ß–ï–ù–û –≠–õ–ï–ú–ï–ù–¢–û–í: ${items.length}`);

      if (items.length > 0) {
        console.log(`\nüé¨ –ü–ï–†–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:`);
        const firstItem = items[0];

        // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
        console.log("üìã –î–û–°–¢–£–ü–ù–´–ï –ü–û–õ–Ø:");
        Object.keys(firstItem).forEach((key) => {
          const value = firstItem[key];
          if (typeof value === "string" && value.length > 100) {
            console.log(`   ${key}: ${value.substring(0, 100)}...`);
          } else {
            console.log(`   ${key}: ${value}`);
          }
        });

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è Instagram –¥–∞–Ω–Ω—ã—Ö
        console.log(`\nüîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´:`);
        console.log(
          `   ID: ${firstItem.id || firstItem.shortCode || "–Ω–µ –Ω–∞–π–¥–µ–Ω"}`
        );
        console.log(`   URL: ${firstItem.url || "–Ω–µ –Ω–∞–π–¥–µ–Ω"}`);
        console.log(
          `   –¢–∏–ø: ${firstItem.type || firstItem.productType || "–Ω–µ —É–∫–∞–∑–∞–Ω"}`
        );
        console.log(`   –õ–∞–π–∫–∏: ${firstItem.likesCount || "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"}`);
        console.log(
          `   –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${firstItem.videoViewCount || firstItem.playCount || "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"}`
        );
        console.log(
          `   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${firstItem.commentsCount || "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"}`
        );
        console.log(
          `   –î–∞—Ç–∞: ${firstItem.timestamp || firstItem.takenAtTimestamp || "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}`
        );
        console.log(
          `   –í–ª–∞–¥–µ–ª–µ—Ü: ${firstItem.ownerUsername || firstItem.owner?.username || "–Ω–µ —É–∫–∞–∑–∞–Ω"}`
        );

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        console.log(`\nüé• –í–°–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ (–ø–µ—Ä–≤—ã–µ 5):`);
        items.slice(0, 5).forEach((item, i) => {
          console.log(`\n${i + 1}. ${item.url || item.shortCode || item.id}`);
          console.log(
            `   –¢–∏–ø: ${item.type || item.productType || "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"}`
          );
          console.log(`   –õ–∞–π–∫–∏: ${(item.likesCount || 0).toLocaleString()}`);
          console.log(
            `   –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${(item.videoViewCount || item.playCount || 0).toLocaleString()}`
          );
          console.log(
            `   –î–∞—Ç–∞: ${item.timestamp || item.takenAtTimestamp || "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}`
          );

          if (item.caption) {
            const caption =
              typeof item.caption === "string"
                ? item.caption
                : item.caption.text || "";
            console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${caption.substring(0, 50)}...`);
          }
        });

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
        const totalLikes = items.reduce(
          (sum, item) => sum + (item.likesCount || 0),
          0
        );
        const totalViews = items.reduce(
          (sum, item) => sum + (item.videoViewCount || item.playCount || 0),
          0
        );
        const avgLikes = Math.round(totalLikes / items.length);
        const avgViews = Math.round(totalViews / items.length);

        console.log(`   –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${items.length}`);
        console.log(`   –û–±—â–∏–µ –ª–∞–π–∫–∏: ${totalLikes.toLocaleString()}`);
        console.log(`   –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${totalViews.toLocaleString()}`);
        console.log(`   –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏: ${avgLikes.toLocaleString()}`);
        console.log(`   –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${avgViews.toLocaleString()}`);

        // –ò—â–µ–º Reels
        const reels = items.filter(
          (item) =>
            item.type === "Reel" ||
            item.type === "ReelVideo" ||
            item.productType === "clips" ||
            item.url?.includes("/reel/") ||
            item.__typename === "XDTGraphSidecar" // Instagram Reel type
        );

        console.log(`\nüé¨ –ù–ê–ô–î–ï–ù–û REELS: ${reels.length}`);

        if (reels.length > 0) {
          const viralReels = reels.filter((reel) => {
            const views =
              reel.videoViewCount || reel.playCount || reel.likesCount || 0;
            return views >= 5000;
          });

          console.log(`üî• –í–ò–†–£–°–ù–´–ï REELS (5K+): ${viralReels.length}`);

          viralReels.slice(0, 3).forEach((reel, i) => {
            const views =
              reel.videoViewCount || reel.playCount || reel.likesCount || 0;
            console.log(
              `   ${i + 1}. ${views.toLocaleString()} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ - ${reel.url}`
            );
          });
        }
      } else {
        console.log(`‚ùå –ù–ï–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}`);
      }
    } else {
      console.log(`‚ùå –û–®–ò–ë–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø:`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${run.status}`);
      console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${run.statusMessage || "–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"}`);
    }
  } catch (error: any) {
    console.error(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:`, error.message || error);
    if (error.statusCode) {
      console.log(`   HTTP –∫–æ–¥: ${error.statusCode}`);
    }
  }
}

testCustomReelScraper().catch(console.error);
