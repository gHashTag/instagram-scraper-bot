/**
 * –ú–∞—Å—Å–æ–≤—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥ –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —Å —Ä–∞–±–æ—á–∏–º Instagram Reel Scraper
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∞–∫—Ç–æ—Ä ID: xMc5Ga1oCONPmWJIa
 */

import { ApifyClient } from "apify-client";
import { initializeDBConnection, getDB } from "../db/neonDB";
import { competitorsTable, reelsTable } from "../db/schema";
import { eq } from "drizzle-orm";
import dotenv from "dotenv";

dotenv.config();

const apifyToken = process.env.APIFY_TOKEN;
const projectId = parseInt(process.env.DEFAULT_PROJECT_ID || "1");

if (!apifyToken) {
  console.error("APIFY_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
initializeDBConnection();
const db = getDB();

interface InstagramReel {
  id: string;
  shortCode: string;
  url: string;
  caption?: string;
  hashtags?: string;
  likesCount: number;
  videoPlayCount: number;
  commentsCount: number;
  timestamp: string;
  ownerUsername: string;
  videoUrl?: string;
  displayUrl?: string;
  videoDuration?: number;
  productType: string;
}

async function scrapeCompetitorReels(
  username: string
): Promise<InstagramReel[]> {
  console.log(`\nüé¨ –°–∫—Ä–∞–ø–∏–Ω–≥ —Ä–µ–∫–ª–æ–≤ –¥–ª—è: @${username}`);

  const client = new ApifyClient({ token: apifyToken });

  const input = {
    username: [username],
    resultsLimit: 50, // –ë–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  };

  try {
    const run = await client.actor("xMc5Ga1oCONPmWJIa").call(input);

    if (run.status !== "SUCCEEDED") {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: ${run.status}`);
      return [];
    }

    const { items } = await client.dataset(run.defaultDatasetId).listItems();
    console.log(`   üìä –ü–æ–ª—É—á–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${items.length}`);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ reels –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
    const reelsData: InstagramReel[] = items
      .filter((item: any) => item.productType === "clips") // –¢–æ–ª—å–∫–æ reels
      .map((item: any) => ({
        id: item.id,
        shortCode: item.shortCode,
        url: item.url,
        caption: item.caption || "",
        hashtags: item.hashtags || "",
        likesCount: item.likesCount || 0,
        videoPlayCount: item.videoPlayCount || 0,
        commentsCount: item.commentsCount || 0,
        timestamp: item.timestamp,
        ownerUsername: item.ownerUsername,
        videoUrl: item.videoUrl,
        displayUrl: item.displayUrl,
        videoDuration: item.videoDuration || 0,
        productType: item.productType,
      }))
      .sort((a, b) => b.videoPlayCount - a.videoPlayCount); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º

    return reelsData;
  } catch (error: any) {
    console.error(`   ‚ùå –û—à–∏–±–∫–∞ API: ${error.message}`);
    return [];
  }
}

async function saveReelsToDatabase(
  competitorId: number,
  username: string,
  reelsData: InstagramReel[]
): Promise<number> {
  let savedCount = 0;

  for (const reel of reelsData) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π reel –ø–æ URL
      const existingReel = await db
        .select()
        .from(reelsTable)
        .where(eq(reelsTable.reel_url, reel.url))
        .limit(1);

      if (existingReel.length > 0) {
        console.log(`   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): ${reel.shortCode}`);
        continue;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π reel —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª–µ–π
      await db.insert(reelsTable).values({
        project_id: projectId,
        source_type: "competitor",
        source_identifier: competitorId.toString(),
        reel_url: reel.url,
        profile_url: `https://instagram.com/${reel.ownerUsername}`,
        author_username: reel.ownerUsername,
        description: reel.caption || "",
        views_count: reel.videoPlayCount,
        likes_count: reel.likesCount,
        comments_count: reel.commentsCount,
        published_at: new Date(reel.timestamp),
        thumbnail_url: reel.displayUrl,
        video_download_url: reel.videoUrl,
        raw_data: reel, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      });

      savedCount++;
      console.log(
        `   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: ${reel.shortCode} (${reel.videoPlayCount.toLocaleString()} –ø—Ä–æ—Å–º.)`
      );
    } catch (error: any) {
      console.error(
        `   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${reel.shortCode}: ${error.message}`
      );
    }
  }

  return savedCount;
}

async function massScrapingCompetitors() {
  console.log(`üöÄ –ú–ê–°–°–û–í–´–ô –°–ö–†–ê–ü–ò–ù–ì –ö–û–ù–ö–£–†–ï–ù–¢–û–í`);
  console.log(`üîë –¢–æ–∫–µ–Ω: ${apifyToken}`);
  console.log(`üèóÔ∏è  –ü—Ä–æ–µ–∫—Ç ID: ${projectId}`);
  console.log(`===============================\n`);

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã
  const competitorsList = await db
    .select()
    .from(competitorsTable)
    .where(eq(competitorsTable.project_id, projectId));

  console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${competitorsList.length}`);

  let totalSaved = 0;
  let totalScraped = 0;

  for (const competitor of competitorsList) {
    const username = competitor.username.replace("@", "");
    console.log(`\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: @${username} (ID: ${competitor.id})`);

    const reelsData = await scrapeCompetitorReels(username);
    totalScraped += reelsData.length;

    if (reelsData.length > 0) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
      console.log(`\nüî• –¢–û–ü-3 REELS –æ—Ç @${username}:`);
      reelsData.slice(0, 3).forEach((reel, i) => {
        console.log(
          `   ${i + 1}. ${reel.videoPlayCount.toLocaleString()} –ø—Ä–æ—Å–º. - ${reel.shortCode}`
        );
      });

      // –§–∏–ª—å—Ç—Ä—É–µ–º viral content (50K+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
      const viralReels = reelsData.filter(
        (reel) => reel.videoPlayCount >= 50000
      );
      console.log(
        `\nüåü VIRAL CONTENT (50K+): ${viralReels.length} –∏–∑ ${reelsData.length}`
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
      const savedCount = await saveReelsToDatabase(
        competitor.id,
        username,
        reelsData
      );
      totalSaved += savedCount;

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
      await db
        .update(competitorsTable)
        .set({
          last_scraped_at: new Date(),
          updated_at: new Date(),
        })
        .where(eq(competitorsTable.id, competitor.id));

      console.log(`   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${savedCount} –Ω–æ–≤—ã—Ö reels —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ`);
    } else {
      console.log(`   ‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è @${username}`);
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise((resolve) => setTimeout(resolve, 2000));
  }

  console.log(`\nüéâ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
  console.log(`   üìä –í—Å–µ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${competitorsList.length}`);
  console.log(`   üé¨ –í—Å–µ–≥–æ reels –ø–æ–ª—É—á–µ–Ω–æ: ${totalScraped}`);
  console.log(`   üíæ –í—Å–µ–≥–æ reels —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${totalSaved}`);
  console.log(`   üåü –ì–æ—Ç–æ–≤–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ viral content (50K+)!`);
}

if (require.main === module) {
  massScrapingCompetitors()
    .then(() => {
      console.log("\n‚úÖ –ú–∞—Å—Å–æ–≤—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!");
      process.exit(0);
    })
    .catch((error) => {
      console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
      process.exit(1);
    });
}

export { massScrapingCompetitors };
