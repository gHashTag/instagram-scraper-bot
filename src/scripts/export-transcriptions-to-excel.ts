/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ Reels —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏ –≤ Excel
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * bun run src/scripts/export-transcriptions-to-excel.ts <projectId> [minViews] [daysBack] [outputPath]
 *
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
 * - projectId: ID –ø—Ä–æ–µ–∫—Ç–∞
 * - minViews: (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50000)
 * - daysBack: (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
 * - outputPath: (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é exports/transcriptions_<timestamp>.xlsx)
 */

import { logger } from "../logger";
import dotenv from "dotenv";
import * as fs from "fs";
import * as path from "path";
import ExcelJS from "exceljs";
import { format } from "date-fns";
import { ru } from "date-fns/locale";
import { NeonAdapter } from "../adapters/neon-adapter";
import { ReelContent, Competitor } from "../types";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
if (args.length < 1) {
  logger.error(
    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: bun run src/scripts/export-transcriptions-to-excel.ts <projectId> [minViews] [daysBack] [outputPath]"
  );
  process.exit(1);
}

const projectId = parseInt(args[0], 10);
const minViews = args[1] ? parseInt(args[1], 10) : 50000;
const daysBack = args[2] ? parseInt(args[2], 10) : 30;
const timestamp = new Date().toISOString().replace(/:/g, "-");
const defaultFilename = `transcriptions_${timestamp}.xlsx`;
const outputPath =
  args[3] || path.join(process.cwd(), "exports", defaultFilename);

if (isNaN(projectId) || isNaN(minViews) || isNaN(daysBack)) {
  logger.error("–û—à–∏–±–∫–∞: projectId, minViews –∏ daysBack –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏");
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const outputDir = path.dirname(outputPath);
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(date: Date | string | null): string {
  if (!date) return "";
  const dateObj = typeof date === "string" ? new Date(date) : date;
  return format(dateObj, "d MMMM yyyy", { locale: ru });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
function formatNumber(num: number | null): string {
  if (num === null || isNaN(num)) return "0";
  return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
function getViewsEmoji(views: number | null): string {
  if (!views) return "üëÄ";
  if (views >= 1000000) return "üî•";
  if (views >= 500000) return "‚≠ê";
  if (views >= 100000) return "üëç";
  return "üëÄ";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–π–∫–æ–≤
function getLikesEmoji(likes: number | null): string {
  if (!likes) return "üëç";
  if (likes >= 100000) return "‚ù§Ô∏è";
  if (likes >= 50000) return "üíñ";
  if (likes >= 10000) return "üíï";
  return "üëç";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
function getCommentsEmoji(comments: number | null): string {
  if (!comments) return "üí≠";
  if (comments >= 1000) return "üí¨";
  if (comments >= 500) return "üìù";
  if (comments >= 100) return "‚úèÔ∏è";
  return "üí≠";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π
function isRealTranscription(transcript: string | null): boolean {
  if (!transcript) return false;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª—É—à–µ–∫
  return (
    !transcript.includes("–°—É–±—Ç–∏—Ç—Ä—ã –¥–µ–ª–∞–ª") &&
    !transcript.includes("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å—É–±—Ç–∏—Ç—Ä—ã") &&
    transcript.length > 10
  );
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    const adapter = new NeonAdapter();
    await adapter.initialize();
    logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î Neon —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.");

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    const projectResult = await adapter.executeQuery(
      "SELECT * FROM projects WHERE id = $1",
      [projectId]
    );
    if (
      !projectResult ||
      !projectResult.rows ||
      projectResult.rows.length === 0
    ) {
      logger.error(`–ü—Ä–æ–µ–∫—Ç —Å ID ${projectId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      process.exit(1);
    }
    const project = projectResult.rows[0];

    logger.info(
      `–≠–∫—Å–ø–æ—Ä—Ç Reels —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId} (${project.name}) —Å –º–∏–Ω–∏–º—É–º ${minViews} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${daysBack} –¥–Ω–µ–π`
    );
    logger.info(`–§–∞–π–ª –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${outputPath}`);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const competitorsData = await adapter.getCompetitorsByProjectId(projectId);
    const competitors: Competitor[] = competitorsData;

    logger.info(
      `–ù–∞–π–¥–µ–Ω–æ ${competitors.length} –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}`
    );

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const dateDaysAgo = new Date();
    dateDaysAgo.setDate(dateDaysAgo.getDate() - daysBack);

    // –ü–æ–ª—É—á–∞–µ–º Reels —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    const query = `
      SELECT
        id,
        project_id,
        source_type,
        source_identifier AS source_id,
        reel_url AS url,
        profile_url,
        author_username,
        description,
        views_count AS views,
        likes_count AS likes,
        comments_count AS comments_count,
        published_at,
        transcript,
        raw_data,
        created_at,
        updated_at,
        instagram_id,
        author_id,
        duration,
        thumbnail_url,
        audio_url,
        transcript_status,
        transcript_updated_at,
        marketing_score,
        engagement_rate_video,
        engagement_rate_all,
        view_to_like_ratio,
        comments_to_likes_ratio,
        recency
      FROM reels
      WHERE project_id = $1
        AND source_type = 'competitor'
        AND views_count >= $2
        AND published_at >= $3
      ORDER BY views_count DESC
    `;
    const reelsResult = await adapter.executeQuery(query, [
      projectId,
      minViews,
      dateDaysAgo.toISOString(),
    ]);
    const reels: ReelContent[] = reelsResult.rows as ReelContent[];

    logger.info(
      `–ù–∞–π–¥–µ–Ω–æ ${reels.length} Reels —Å –º–∏–Ω–∏–º—É–º ${minViews} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${daysBack} –¥–Ω–µ–π`
    );

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Reels —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏
    const reelsWithRealTranscriptions = reels.filter((reel) =>
      isRealTranscription(reel.transcript ?? null)
    );
    logger.info(
      `Reels —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏: ${reelsWithRealTranscriptions.length}`
    );
    logger.info(
      `Reels –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: ${reels.length - reelsWithRealTranscriptions.length}`
    );

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º Reels –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º
    const reelsByCompetitor: Record<number, ReelContent[]> = {};
    for (const reel of reels) {
      const competitorId = parseInt(reel.source_id, 10);
      if (!isNaN(competitorId)) {
        if (!reelsByCompetitor[competitorId]) {
          reelsByCompetitor[competitorId] = [];
        }
        reelsByCompetitor[competitorId].push(reel);
      } else {
        logger.warn(
          `Skipping reel ${reel.id} in grouping because source_id is not a valid number: ${reel.source_id}`
        );
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥—É Excel
    const workbook = new ExcelJS.Workbook();
    workbook.creator = "Instagram Scraper Bot";
    workbook.lastModifiedBy = "Instagram Scraper Bot";
    workbook.created = new Date();
    workbook.modified = new Date();

    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const summarySheet = workbook.addWorksheet("üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è");

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
    summarySheet.columns = [
      { header: "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", key: "metric", width: 30 },
      { header: "–ó–Ω–∞—á–µ–Ω–∏–µ", key: "value", width: 20 },
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    summarySheet.mergeCells("A1:B1");
    const titleCell = summarySheet.getCell("A1");
    titleCell.value = `üìä –û—Ç—á–µ—Ç –ø–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º Reels –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∑–∞ ${formatDate(dateDaysAgo)} - ${formatDate(new Date())}`;
    titleCell.font = { size: 16, bold: true, color: { argb: "FF0070C0" } };
    titleCell.alignment = { horizontal: "center", vertical: "middle" };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    summarySheet.addRow(["üìã –ü—Ä–æ–µ–∫—Ç", `${project.name} (ID: ${projectId})`]);
    summarySheet.addRow([
      "üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤",
      competitors.length.toString(),
    ]);
    summarySheet.addRow(["üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Reels", reels.length.toString()]);
    summarySheet.addRow([
      "üìù Reels —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏",
      reelsWithRealTranscriptions.length.toString(),
    ]);
    summarySheet.addRow([
      "‚ùå Reels –±–µ–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π",
      (reels.length - reelsWithRealTranscriptions.length).toString(),
    ]);
    summarySheet.addRow([
      "üëÄ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
      formatNumber(minViews),
    ]);
    summarySheet.addRow([
      "üìÖ –ü–µ—Ä–∏–æ–¥",
      `${formatDate(dateDaysAgo)} - ${formatDate(new Date())}`,
    ]);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
    const totalViews = reels.reduce((sum, reel) => sum + (reel.views ?? 0), 0);
    const avgViews = Math.round(totalViews / reels.length);
    const maxViews = Math.max(...reels.map((reel) => reel.views ?? 0));
    const minViewsFound = Math.min(...reels.map((reel) => reel.views ?? 0));

    summarySheet.addRow([
      "üëÅÔ∏è –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
      formatNumber(totalViews),
    ]);
    summarySheet.addRow([
      "üìä –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
      formatNumber(avgViews),
    ]);
    summarySheet.addRow([
      "üîù –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
      formatNumber(maxViews),
    ]);
    summarySheet.addRow([
      "‚¨áÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
      formatNumber(minViewsFound),
    ]);

    // –°—Ç–∏–ª–∏–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    for (let i = 2; i <= summarySheet.rowCount; i++) {
      const row = summarySheet.getRow(i);
      row.getCell(1).font = { bold: true, color: { argb: "FF0070C0" } };
      row.getCell(2).font = { bold: true };
      row.height = 25;
    }

    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏ –≤—Å–µ—Ö Reels
    const allTranscriptionsSheet = workbook.addWorksheet("üìù –í—Å–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏");

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
    allTranscriptionsSheet.columns = [
      { header: "‚Ññ", key: "index", width: 5 },
      { header: "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç", key: "competitor", width: 20 },
      { header: "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", key: "views", width: 15 },
      { header: "–õ–∞–π–∫–∏", key: "likes", width: 15 },
      { header: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", key: "comments", width: 15 },
      { header: "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", key: "date", width: 20 },
      { header: "URL", key: "url", width: 50 },
      { header: "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è", key: "transcript", width: 100 },
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    allTranscriptionsSheet.mergeCells("A1:H1");
    const allTranscriptionsTitle = allTranscriptionsSheet.getCell("A1");
    allTranscriptionsTitle.value = "üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤—Å–µ—Ö Reels";
    allTranscriptionsTitle.font = {
      size: 16,
      bold: true,
      color: { argb: "FF0070C0" },
    };
    allTranscriptionsTitle.alignment = {
      horizontal: "center",
      vertical: "middle",
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ Reels —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è–º–∏
    let rowIndex = 0;
    for (const reel of reels) {
      const competitorId = parseInt(reel.source_id, 10);
      let competitor: Competitor | undefined = undefined;
      if (!isNaN(competitorId)) {
        competitor = competitors.find((c) => c.id === competitorId);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
      const hasRealTranscription = isRealTranscription(reel.transcript ?? null);

      allTranscriptionsSheet.addRow({
        index: ++rowIndex,
        competitor: competitor ? competitor.username : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
        views: `${getViewsEmoji(reel.views ?? 0)} ${formatNumber(reel.views ?? 0)}`,
        likes: `${getLikesEmoji(reel.likes ?? 0)} ${formatNumber(reel.likes ?? 0)}`,
        comments: `${getCommentsEmoji(reel.comments_count ?? 0)} ${formatNumber(reel.comments_count ?? 0)}`,
        date: formatDate(reel.published_at),
        url: reel.url,
        transcript: hasRealTranscription
          ? reel.transcript
          : "‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏",
      });

      // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –≤—ã–¥–µ–ª—è–µ–º —è—á–µ–π–∫—É –∫—Ä–∞—Å–Ω—ã–º
      if (!hasRealTranscription) {
        const row = allTranscriptionsSheet.getRow(rowIndex + 2); // +2 –∏–∑-–∑–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Å—Ç—Ä–æ–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        row.getCell(8).font = { color: { argb: "FFFF0000" } };
      }
    }

    // –°—Ç–∏–ª–∏–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    const headerRow = allTranscriptionsSheet.getRow(2);
    headerRow.eachCell((cell) => {
      cell.font = { bold: true, color: { argb: "FFFFFFFF" } };
      cell.fill = {
        type: "pattern",
        pattern: "solid",
        fgColor: { argb: "FF0070C0" },
      };
      cell.alignment = { horizontal: "center", vertical: "middle" };
    });

    // –°—Ç–∏–ª–∏–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    for (let i = 3; i <= allTranscriptionsSheet.rowCount; i++) {
      const row = allTranscriptionsSheet.getRow(i);
      row.height = 25;
      row.getCell(1).alignment = { horizontal: "center", vertical: "middle" };
      row.getCell(3).alignment = { horizontal: "right", vertical: "middle" };
      row.getCell(4).alignment = { horizontal: "right", vertical: "middle" };
      row.getCell(5).alignment = { horizontal: "right", vertical: "middle" };
      row.getCell(6).alignment = { horizontal: "center", vertical: "middle" };
      row.getCell(8).alignment = { vertical: "top", wrapText: true };

      // –î–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–µ–¥—É—é—â—É—é—Å—è –∑–∞–ª–∏–≤–∫—É —Å—Ç—Ä–æ–∫
      if (i % 2 === 0) {
        row.eachCell((cell) => {
          cell.fill = {
            type: "pattern",
            pattern: "solid",
            fgColor: { argb: "FFF2F2F2" },
          };
        });
      }
    }

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
    for (const competitor of competitors) {
      const competitorReels = reelsByCompetitor[competitor.id] || [];
      if (competitorReels.length === 0) continue;

      // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
      const competitorSheet = workbook.addWorksheet(
        `üë§ ${competitor.username}`
      );

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
      competitorSheet.columns = [
        { header: "‚Ññ", key: "index", width: 5 },
        { header: "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", key: "views", width: 15 },
        { header: "–õ–∞–π–∫–∏", key: "likes", width: 15 },
        { header: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", key: "comments", width: 15 },
        { header: "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", key: "date", width: 20 },
        { header: "URL", key: "url", width: 50 },
        { header: "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è", key: "transcript", width: 100 },
      ];

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      competitorSheet.mergeCells("A1:G1");
      const competitorTitle = competitorSheet.getCell("A1");
      competitorTitle.value = `üë§ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç: ${competitor.username} (${competitor.full_name || ""})`;
      competitorTitle.font = {
        size: 16,
        bold: true,
        color: { argb: "FF0070C0" },
      };
      competitorTitle.alignment = { horizontal: "center", vertical: "middle" };

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º Reels –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
      const sortedCompetitorReels = [...competitorReels].sort(
        (a: ReelContent, b: ReelContent) => (b.views ?? 0) - (a.views ?? 0)
      );

      // –î–æ–±–∞–≤–ª—è–µ–º Reels –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
      for (let i = 0; i < sortedCompetitorReels.length; i++) {
        const reel = sortedCompetitorReels[i];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        const hasRealTranscription = isRealTranscription(
          reel.transcript ?? null
        );

        competitorSheet.addRow({
          index: i + 1,
          views: `${getViewsEmoji(reel.views ?? 0)} ${formatNumber(reel.views ?? 0)}`,
          likes: `${getLikesEmoji(reel.likes ?? 0)} ${formatNumber(reel.likes ?? 0)}`,
          comments: `${getCommentsEmoji(reel.comments_count ?? 0)} ${formatNumber(reel.comments_count ?? 0)}`,
          date: formatDate(new Date(reel.published_at)),
          url: reel.url,
          transcript: hasRealTranscription
            ? reel.transcript
            : "‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏",
        });

        // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –≤—ã–¥–µ–ª—è–µ–º —è—á–µ–π–∫—É –∫—Ä–∞—Å–Ω—ã–º
        if (!hasRealTranscription) {
          const row = competitorSheet.getRow(i + 3); // +3 –∏–∑-–∑–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Å—Ç—Ä–æ–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
          row.getCell(7).font = { color: { argb: "FFFF0000" } };
        }
      }

      // –°—Ç–∏–ª–∏–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
      const competitorHeaderRow = competitorSheet.getRow(2);
      competitorHeaderRow.eachCell((cell) => {
        cell.font = { bold: true, color: { argb: "FFFFFFFF" } };
        cell.fill = {
          type: "pattern",
          pattern: "solid",
          fgColor: { argb: "FF0070C0" },
        };
        cell.alignment = { horizontal: "center", vertical: "middle" };
      });

      // –°—Ç–∏–ª–∏–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É
      for (let i = 3; i <= competitorSheet.rowCount; i++) {
        const row = competitorSheet.getRow(i);
        row.height = 25;
        row.getCell(1).alignment = { horizontal: "center", vertical: "middle" };
        row.getCell(2).alignment = { horizontal: "right", vertical: "middle" };
        row.getCell(3).alignment = { horizontal: "right", vertical: "middle" };
        row.getCell(4).alignment = { horizontal: "right", vertical: "middle" };
        row.getCell(5).alignment = { horizontal: "center", vertical: "middle" };
        row.getCell(7).alignment = { vertical: "top", wrapText: true };

        // –î–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–µ–¥—É—é—â—É—é—Å—è –∑–∞–ª–∏–≤–∫—É —Å—Ç—Ä–æ–∫
        if (i % 2 === 0) {
          row.eachCell((cell) => {
            cell.fill = {
              type: "pattern",
              pattern: "solid",
              fgColor: { argb: "FFF2F2F2" },
            };
          });
        }
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–∏–≥—É Excel
    await workbook.xlsx.writeFile(outputPath);
    logger.info(`–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputPath}`);
  } catch (error) {
    logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞:", error);
    process.exit(1);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è NeonAdapter
    // const adapter = new NeonAdapter(); // –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤—ã—à–µ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    // await adapter.close(); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ adapter –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch((error) => {
  logger.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
  process.exit(1);
});
