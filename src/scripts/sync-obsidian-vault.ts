#!/usr/bin/env bun

/**
 * üîÑ Sync Obsidian Vault
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤ Obsidian vault
 */

import { db } from "../db/index";
import {
  projectsTable,
  competitorsTable,
  hashtagsTable,
  reelsTable,
} from "../db/schema";
import { eq, desc, sql, and } from "drizzle-orm";
import { ObsidianDashboardManager } from "../obsidian-dashboard-manager";
import fs from "fs";
import path from "path";

// üîß Configuration
const PROJECT_ID = parseInt(process.argv[2] || "1"); // Default to project 1 (Coco Age)
const VAULT_BASE_PATH =
  process.env.OBSIDIAN_VAULT_PATH || path.join(process.cwd(), "vaults");

interface ProjectInfo {
  id: number;
  name: string;
  vaultPath: string;
  description: string;
}

// üìä Project configurations
const PROJECTS: Record<number, ProjectInfo> = {
  1: {
    id: 1,
    name: "Coco Age",
    vaultPath: path.join(VAULT_BASE_PATH, "coco-age"),
    description: "–≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∫—Ä–∞—Å–æ—Ç–∞",
  },
  2: {
    id: 2,
    name: "Meta Muse",
    vaultPath: path.join(VAULT_BASE_PATH, "meta-muse-project"),
    description: "AI-–∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä –ø—Ä–æ–µ–∫—Ç",
  },
  3: {
    id: 3,
    name: "TrendWatching",
    vaultPath: path.join(VAULT_BASE_PATH, "trendwatching"),
    description: "AI & Tech —Ç—Ä–µ–Ω–¥—ã",
  },
};

async function syncObsidianVault(): Promise<void> {
  console.log("üîÑ Sync Obsidian Vault - –ó–ê–ü–£–°–ö");
  console.log("‚ïê".repeat(50));

  const project = PROJECTS[PROJECT_ID];
  if (!project) {
    throw new Error(`‚ùå –ü—Ä–æ–µ–∫—Ç —Å ID ${PROJECT_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }

  console.log(`üìä –ü—Ä–æ–µ–∫—Ç: ${project.name} (ID: ${PROJECT_ID})`);
  console.log(`üìÅ Vault Path: ${project.vaultPath}`);

  try {
    // 1. Ensure vault directory exists
    if (!fs.existsSync(project.vaultPath)) {
      fs.mkdirSync(project.vaultPath, { recursive: true });
      console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è vault: ${project.vaultPath}`);
    }

    // 2. Get project data from database
    console.log("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

    const [projectData] = await db
      .select()
      .from(projectsTable)
      .where(eq(projectsTable.id, PROJECT_ID))
      .limit(1);

    if (!projectData) {
      throw new Error(`‚ùå –ü—Ä–æ–µ–∫—Ç —Å ID ${PROJECT_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
    }

    // 3. Get competitors data
    const competitors = await db
      .select()
      .from(competitorsTable)
      .where(eq(competitorsTable.project_id, PROJECT_ID));

    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${competitors.length}`);

    // 4. Get hashtags data
    const hashtags = await db
      .select()
      .from(hashtagsTable)
      .where(eq(hashtagsTable.project_id, PROJECT_ID));

    console.log(`üè∑Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ö—ç—à—Ç–µ–≥–æ–≤: ${hashtags.length}`);

    // 5. Get reels statistics
    const reelsStats = await db
      .select({
        totalPosts: sql<number>`count(*)`,
        viralPosts: sql<number>`count(*) filter (where ${reelsTable.views_count} >= 75000)`,
        avgViews: sql<number>`avg(${reelsTable.views_count})`,
        avgLikes: sql<number>`avg(${reelsTable.likes_count})`,
      })
      .from(reelsTable)
      .where(eq(reelsTable.project_id, PROJECT_ID));

    const stats = reelsStats[0];
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∏–ª—Å–æ–≤:`);
    console.log(`   üì• –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: ${stats.totalPosts}`);
    console.log(`   üî• –í–∏—Ä—É—Å–Ω—ã—Ö: ${stats.viralPosts}`);
    console.log(`   üìà –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${Math.round(stats.avgViews || 0)}`);
    console.log(`   üí¨ –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏: ${Math.round(stats.avgLikes || 0)}`);

    // 6. Get top competitors with their best posts
    const competitorsWithStats = await Promise.all(
      competitors.map(async (competitor: any) => {
        const competitorReels = await db
          .select()
          .from(reelsTable)
          .where(
            and(
              eq(reelsTable.project_id, PROJECT_ID),
              eq(reelsTable.source_identifier, competitor.username)
            )
          )
          .orderBy(desc(reelsTable.views_count))
          .limit(1);

        const topPost = competitorReels[0];
        const allReels = await db
          .select({
            avgViews: sql<number>`avg(${reelsTable.views_count})`,
          })
          .from(reelsTable)
          .where(
            and(
              eq(reelsTable.project_id, PROJECT_ID),
              eq(reelsTable.source_identifier, competitor.username)
            )
          );

        return {
          username: competitor.username,
          posts: competitorReels.length,
          topPost: topPost
            ? {
                views: topPost.views_count || 0,
                likes: topPost.likes_count || 0,
                description: topPost.description || "",
                date: topPost.published_at?.toISOString().split("T")[0] || "",
              }
            : {
                views: 0,
                likes: 0,
                description: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                date: "",
              },
          avgViews: Math.round(allReels[0]?.avgViews || 0),
        };
      })
    );

    // 7. Get hashtag statistics
    const hashtagsWithStats = await Promise.all(
      hashtags.slice(0, 10).map(async (hashtag: any) => {
        const hashtagReels = await db
          .select({
            count: sql<number>`count(*)`,
            avgViews: sql<number>`avg(${reelsTable.views_count})`,
          })
          .from(reelsTable)
          .where(
            and(
              eq(reelsTable.project_id, PROJECT_ID),
              sql`${reelsTable.description} ILIKE ${`%${hashtag.tag_name}%`}`
            )
          );

        const stats = hashtagReels[0];
        return {
          tag: hashtag.tag_name.replace("#", ""),
          posts: stats.count || 0,
          avgViews: Math.round(stats.avgViews || 0),
          trend: "stable" as const,
        };
      })
    );

    // 8. Prepare dashboard data
    const dashboardData = {
      totalPosts: stats.totalPosts || 0,
      viralPosts: stats.viralPosts || 0,
      avgViews: Math.round(stats.avgViews || 0),
      avgLikes: Math.round(stats.avgLikes || 0),
      hashtags: hashtagsWithStats,
      competitors: competitorsWithStats,
    };

    // 9. Initialize Obsidian Dashboard Manager
    const dashboardManager = new ObsidianDashboardManager(
      project.vaultPath,
      project.name
    );

    // 10. Update dashboard
    console.log("\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Obsidian dashboard...");
    await dashboardManager.updateMainDashboard(dashboardData);

    // 11. Update competitor pages
    console.log("üë• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...");
    await dashboardManager.updateCompetitorPages(dashboardData);

    // 12. Create summary files
    await createSummaryFiles(project, dashboardData);

    console.log("\n‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!");
    console.log(`üìÅ Vault –æ–±–Ω–æ–≤–ª–µ–Ω: ${project.vaultPath}`);
    console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${competitors.length + 3}`); // dashboard + competitors + summary files
  } catch (error) {
    console.error("‚ùå –û–®–ò–ë–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:", error);
    process.exit(1);
  }
}

async function createSummaryFiles(
  project: ProjectInfo,
  data: any
): Promise<void> {
  // Create project overview
  const overviewPath = path.join(
    project.vaultPath,
    `${project.name} - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞.md`
  );
  const overviewContent = `# ${project.name} - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞

## üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- **–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤:** ${data.totalPosts.toLocaleString()}
- **–í–∏—Ä—É—Å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:** ${data.viralPosts.toLocaleString()}
- **–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã:** ${data.avgViews.toLocaleString()}
- **–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:** ${data.competitors.length}
- **–•—ç—à—Ç–µ–≥–æ–≤:** ${data.hashtags.length}

## üîó –ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏
- [[üë• –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã]]
- [[üè∑Ô∏è –•—ç—à—Ç–µ–≥–∏]]
- [[üìä –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞]]

*–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString("ru-RU")}*
`;

  fs.writeFileSync(overviewPath, overviewContent);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${path.basename(overviewPath)}`);

  // Create competitors summary
  const competitorsPath = path.join(project.vaultPath, "üë• –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã.md");
  const competitorsContent = `# üë• –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã

## –¢–æ–ø –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

${data.competitors
  .map(
    (c: any, i: number) => `
### ${i + 1}. @${c.username}
- **–ü–æ—Å—Ç–æ–≤:** ${c.posts}
- **–õ—É—á—à–∏–π –ø–æ—Å—Ç:** ${c.topPost.views.toLocaleString()} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
- **–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã:** ${c.avgViews.toLocaleString()}
- **–ê–Ω–∞–ª–∏–∑:** [[Competitors/${c.username}]]
`
  )
  .join("\n")}

*–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString("ru-RU")}*
`;

  fs.writeFileSync(competitorsPath, competitorsContent);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${path.basename(competitorsPath)}`);
}

// Run if called directly
if (require.main === module) {
  syncObsidianVault().catch((error) => {
    console.error("üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
    process.exit(1);
  });
}

export { syncObsidianVault };
