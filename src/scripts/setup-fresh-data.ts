/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö - –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ —Ö—ç—à—Ç–µ–≥–æ–≤
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npm run setup-fresh-data
 */

import dotenv from "dotenv";
import { initializeDBConnection } from "../db/neonDB";
import { competitorsTable, hashtagsTable } from "../db/schema";
import { eq, and } from "drizzle-orm";
import { logger } from "../logger";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (–±–µ–∑ lips_for_kiss)
const COMPETITORS = [
  {
    username: "clinicajoelleofficial",
    profile_url: "https://www.instagram.com/clinicajoelleofficial",
    full_name: "Clinica Joelle Official",
    notes: "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞ —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã"
  },
  {
    username: "kayaclinicarabia",
    profile_url: "https://www.instagram.com/kayaclinicarabia/",
    full_name: "Kaya Clinic Arabia",
    notes: "–°–µ—Ç—å –∫–ª–∏–Ω–∏–∫ –∫—Ä–∞—Å–æ—Ç—ã –∏ —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã"
  },
  {
    username: "ziedasclinic",
    profile_url: "https://www.instagram.com/ziedasclinic?igsh=ZTAxeWZhY3VzYml2",
    full_name: "Zieda's Clinic",
    notes: "–ö–ª–∏–Ω–∏–∫–∞ —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã"
  },
  {
    username: "med_yu_med",
    profile_url: "https://www.instagram.com/med_yu_med?igsh=YndwbmQzMHlrbTFh",
    full_name: "Med Yu Med",
    notes: "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã"
  },
  {
    username: "milena_aesthetic_clinic",
    profile_url: "https://www.instagram.com/milena_aesthetic_clinic/",
    full_name: "Milena Aesthetic Clinic",
    notes: "–ö–ª–∏–Ω–∏–∫–∞ —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã"
  },
  {
    username: "graise.aesthetics",
    profile_url: "https://www.instagram.com/graise.aesthetics",
    full_name: "Graise Aesthetics",
    notes: "–¶–µ–Ω—Ç—Ä —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã"
  }
];

// –•—ç—à—Ç–µ–≥–∏ —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–ª—è 2025)
const HASHTAGS = [
  "aestheticmedicine",
  "aestheticclinic", 
  "cosmetology",
  "hydrafacial",
  "botox",
  "fillers",
  "beautyclinic",
  "skincare",
  "prpfacial",
  "rfmicroneedling",
  "skinrejuvenation",
  "facialtreatment",
  "aesthetictreatment"
];

async function setupFreshData() {
  try {
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö...");
    
    const db = initializeDBConnection();
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç Coco Age (ID: 1)
    const projectId = 1;
    
    logger.info("üë• –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...");
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    for (const competitor of COMPETITORS) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç
        const existing = await db
          .select()
          .from(competitorsTable)
          .where(
            and(
              eq(competitorsTable.project_id, projectId),
              eq(competitorsTable.username, competitor.username)
            )
          );
        
        if (existing.length > 0) {
          logger.info(`  ‚úÖ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç @${competitor.username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          continue;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
        await db.insert(competitorsTable).values({
          project_id: projectId,
          username: competitor.username,
          profile_url: competitor.profile_url,
          full_name: competitor.full_name,
          notes: competitor.notes,
          is_active: true
        });
        
        logger.info(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç @${competitor.username}`);
      } catch (error) {
        logger.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ @${competitor.username}:`, error);
      }
    }
    
    logger.info("üè∑Ô∏è –ó–∞–≥—Ä—É–∂–∞–µ–º —Ö—ç—à—Ç–µ–≥–∏...");
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ö—ç—à—Ç–µ–≥–∏
    for (const hashtag of HASHTAGS) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ö—ç—à—Ç–µ–≥
        const existing = await db
          .select()
          .from(hashtagsTable)
          .where(
            and(
              eq(hashtagsTable.project_id, projectId),
              eq(hashtagsTable.tag_name, hashtag)
            )
          );
        
        if (existing.length > 0) {
          logger.info(`  ‚úÖ –•—ç—à—Ç–µ–≥ #${hashtag} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          continue;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ö—ç—à—Ç–µ–≥
        await db.insert(hashtagsTable).values({
          project_id: projectId,
          tag_name: hashtag,
          notes: `–•—ç—à—Ç–µ–≥ —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã`,
          is_active: true
        });
        
        logger.info(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ö—ç—à—Ç–µ–≥ #${hashtag}`);
      } catch (error) {
        logger.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ö—ç—à—Ç–µ–≥–∞ #${hashtag}:`, error);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const competitorsCount = await db
      .select()
      .from(competitorsTable)
      .where(eq(competitorsTable.project_id, projectId));
    
    const hashtagsCount = await db
      .select()
      .from(hashtagsTable)
      .where(eq(hashtagsTable.project_id, projectId));
    
    logger.info("üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    logger.info(`  üë• –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã: ${competitorsCount.length}`);
    logger.info(`  üè∑Ô∏è –•—ç—à—Ç–µ–≥–∏: ${hashtagsCount.length}`);
    
    logger.info("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    
  } catch (error) {
    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
setupFreshData();
