#!/usr/bin/env node

/**
 * üïâÔ∏è GENERATE REAL OBSIDIAN REPORTS - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * 
 * –°–æ–∑–¥–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥—ã Obsidian —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã –≤–º–µ—Å—Ç–æ —Ñ–µ–π–∫–æ–≤
 */

import { config } from 'dotenv';
import { initializeDBConnection, getDB, NeonDB } from '../db/neonDB';
import { sql, eq, desc } from 'drizzle-orm';
import * as schema from '../db/schema';
import { logger } from '../logger';
import { writeFileSync, mkdirSync } from 'fs';
import { join } from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

interface ReelData {
  id: number;
  reel_url: string;
  author_username: string;
  description: string;
  views_count: number;
  likes_count: number;
  comments_count: number;
  published_at: Date;
  competitor_username?: string;
}

interface CompetitorStats {
  username: string;
  reelsCount: number;
  avgViews: number;
  maxViews: number;
  topReel: ReelData | null;
}

async function getRealDataFromDB(db: NeonDB): Promise<{
  totalReels: number;
  viralReels: number;
  competitors: CompetitorStats[];
  topReels: ReelData[];
}> {
  try {
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalStats = await db
      .select({
        total: sql<number>`count(*)`,
        viral: sql<number>`count(*) filter (where views_count >= 50000)`
      })
      .from(schema.reelsTable);

    // –¢–æ–ø Reels (–±–µ–∑ JOIN –ø–æ–∫–∞, —Ç–∞–∫ –∫–∞–∫ —Å–≤—è–∑—å —á–µ—Ä–µ–∑ source_identifier)
    const topReelsData = await db
      .select({
        id: schema.reelsTable.id,
        reel_url: schema.reelsTable.reel_url,
        author_username: schema.reelsTable.author_username,
        description: schema.reelsTable.description,
        views_count: schema.reelsTable.views_count,
        likes_count: schema.reelsTable.likes_count,
        comments_count: schema.reelsTable.comments_count,
        published_at: schema.reelsTable.published_at,
        source_type: schema.reelsTable.source_type,
        source_identifier: schema.reelsTable.source_identifier
      })
      .from(schema.reelsTable)
      .orderBy(desc(schema.reelsTable.views_count))
      .limit(20);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    const allCompetitors = await db
      .select()
      .from(schema.competitorsTable);

    const competitorStatsData = [];
    for (const competitor of allCompetitors) {
      const reelsStats = await db
        .select({
          count: sql<number>`count(*)`,
          avgViews: sql<number>`avg(views_count)`,
          maxViews: sql<number>`max(views_count)`
        })
        .from(schema.reelsTable)
        .where(sql`source_type = 'competitor' AND source_identifier = ${competitor.id.toString()}`);

      if (reelsStats[0].count > 0) {
        competitorStatsData.push({
          username: competitor.username,
          reelsCount: reelsStats[0].count,
          avgViews: reelsStats[0].avgViews || 0,
          maxViews: reelsStats[0].maxViews || 0
        });
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø Reel –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
    const competitors: CompetitorStats[] = [];
    for (const comp of competitorStatsData) {
      // –ù–∞—Ö–æ–¥–∏–º ID –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –ø–æ username
      const competitor = allCompetitors.find(c => c.username === comp.username);
      if (!competitor) continue;

      const topReel = await db
        .select({
          id: schema.reelsTable.id,
          reel_url: schema.reelsTable.reel_url,
          author_username: schema.reelsTable.author_username,
          description: schema.reelsTable.description,
          views_count: schema.reelsTable.views_count,
          likes_count: schema.reelsTable.likes_count,
          comments_count: schema.reelsTable.comments_count,
          published_at: schema.reelsTable.published_at
        })
        .from(schema.reelsTable)
        .where(sql`source_type = 'competitor' AND source_identifier = ${competitor.id.toString()}`)
        .orderBy(desc(schema.reelsTable.views_count))
        .limit(1);

      competitors.push({
        username: comp.username,
        reelsCount: comp.reelsCount,
        avgViews: Math.round(comp.avgViews || 0),
        maxViews: comp.maxViews || 0,
        topReel: topReel[0] || null
      });
    }

    return {
      totalReels: totalStats[0].total,
      viralReels: totalStats[0].viral,
      competitors,
      topReels: topReelsData.map(reel => ({
        ...reel,
        views_count: reel.views_count || 0,
        likes_count: reel.likes_count || 0,
        comments_count: reel.comments_count || 0,
        published_at: reel.published_at || new Date(),
        competitor_username: reel.source_type === 'competitor' ? `competitor_${reel.source_identifier}` : undefined
      }))
    };

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

function generateMainDashboard(data: any): string {
  const currentDate = new Date().toLocaleDateString('ru-RU');
  
  return `# ü••‚ú® –ì–õ–ê–í–ù–´–ô –î–ê–®–ë–û–†–î - Coco Age

> **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** ${currentDate}  
> **–°—Ç–∞—Ç—É—Å:** üü¢ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã

## üìä **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê**

### üéØ **–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**
- **üì• –í—Å–µ–≥–æ Reels:** ${data.totalReels}
- **üî• –í–∏—Ä—É—Å–Ω—ã—Ö (50K+):** ${data.viralReels}
- **üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤–∏—Ä—É—Å–Ω—ã—Ö:** ${Math.round((data.viralReels / data.totalReels) * 100)}%
- **üè¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:** ${data.competitors.length}

## üèÜ **–¢–û–ü –ö–û–ù–ö–£–†–ï–ù–¢–´**

${data.competitors.map((comp: CompetitorStats, index: number) => `
### ${index + 1}. @${comp.username}
- **üìä Reels:** ${comp.reelsCount}
- **üëÅÔ∏è –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã:** ${comp.avgViews.toLocaleString()}
- **üèÜ –ú–∞–∫—Å–∏–º—É–º:** ${comp.maxViews.toLocaleString()}

${comp.topReel ? `**üî• –õ—É—á—à–∏–π Reel:**
- **–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:** ${comp.topReel.views_count.toLocaleString()}
- **–õ–∞–π–∫–∏:** ${comp.topReel.likes_count.toLocaleString()}
- **–û–ø–∏—Å–∞–Ω–∏–µ:** ${comp.topReel.description?.substring(0, 100) || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}...
- **–°—Å—ã–ª–∫–∞:** [–û—Ç–∫—Ä—ã—Ç—å](${comp.topReel.reel_url})` : '**–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ Reels**'}
`).join('\n')}

## üî• **–¢–û–ü –í–ò–†–£–°–ù–´–ï REELS**

${data.topReels.slice(0, 10).map((reel: ReelData, index: number) => `
### ${index + 1}. ${reel.views_count.toLocaleString()} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
- **–ê–≤—Ç–æ—Ä:** @${reel.author_username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
- **–õ–∞–π–∫–∏:** ${reel.likes_count.toLocaleString()}
- **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:** ${reel.comments_count.toLocaleString()}
- **–î–∞—Ç–∞:** ${reel.published_at.toLocaleDateString('ru-RU')}
- **–û–ø–∏—Å–∞–Ω–∏–µ:** ${reel.description?.substring(0, 150) || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}...
- **–°—Å—ã–ª–∫–∞:** [–û—Ç–∫—Ä—ã—Ç—å Reel](${reel.reel_url})
`).join('\n')}

## üö® **–ü–†–û–ë–õ–ï–ú–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò**

### ‚ùå **–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:**
- üö® –°–∫—Ä–∞–ø–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ 1 —ç–ª–µ–º–µ–Ω—Ç –≤–º–µ—Å—Ç–æ 100
- üö® –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö —Å –≤—ã—Å–æ–∫–∏–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏
- üö® –ù—É–∂–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö

### üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
1. **–ù–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π —Å–∫—Ä–∞–ø–µ—Ä** —Å –±–æ–ª—å—à–∏–º –æ–±—ä–µ–º–æ–º –¥–∞–Ω–Ω—ã—Ö
2. **–°–Ω–∏–∑–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤** —Å 50K –¥–æ 10K –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
3. **–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤** –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
4. **–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∞–ø–∏–Ω–≥** –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤

---

**üïâÔ∏è –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã**
`;
}

async function generateObsidianReports(db: NeonDB): Promise<void> {
  logger.info('üìù –ì–ï–ù–ï–†–ê–¶–ò–Ø OBSIDIAN –û–¢–ß–ï–¢–û–í –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const realData = await getRealDataFromDB(db);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const vaultPath = '/Users/playra/instagram-scraper-bot/vaults/coco-age';
    mkdirSync(vaultPath, { recursive: true });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
    const mainDashboard = generateMainDashboard(realData);
    writeFileSync(join(vaultPath, 'ü••‚ú® –ì–õ–ê–í–ù–´–ô –î–ê–®–ë–û–†–î.md'), mainDashboard, 'utf8');

    logger.info('‚úÖ –ì–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    for (const competitor of realData.competitors) {
      const competitorPage = `# üè¢ ${competitor.username}

## üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**
- **Reels:** ${competitor.reelsCount}
- **–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã:** ${competitor.avgViews.toLocaleString()}
- **–ú–∞–∫—Å–∏–º—É–º:** ${competitor.maxViews.toLocaleString()}

${competitor.topReel ? `## üî• **–õ—É—á—à–∏–π Reel**
- **–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:** ${competitor.topReel.views_count.toLocaleString()}
- **–õ–∞–π–∫–∏:** ${competitor.topReel.likes_count.toLocaleString()}
- **–î–∞—Ç–∞:** ${competitor.topReel.published_at.toLocaleDateString('ru-RU')}
- **–°—Å—ã–ª–∫–∞:** [–û—Ç–∫—Ä—ã—Ç—å](${competitor.topReel.reel_url})

### –û–ø–∏—Å–∞–Ω–∏–µ:
${competitor.topReel.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}` : '## ‚ùå **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ Reels**'}

---
**–û–±–Ω–æ–≤–ª–µ–Ω–æ:** ${new Date().toLocaleDateString('ru-RU')}
`;

      const competitorsDir = join(vaultPath, 'Competitors');
      mkdirSync(competitorsDir, { recursive: true });
      writeFileSync(join(competitorsDir, `${competitor.username}.md`), competitorPage, 'utf8');
    }

    logger.info(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${realData.competitors.length} —Å—Ç—Ä–∞–Ω–∏—Ü –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤`);

    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
    const problemsReport = `# üö® –û–¢–ß–ï–¢ –û –ü–†–û–ë–õ–ï–ú–ê–• –°–ö–†–ê–ü–ò–ù–ì–ê

## ‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:**

1. **–°–∫—Ä–∞–ø–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ 1 —ç–ª–µ–º–µ–Ω—Ç**
   - –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º: 100 Reels
   - –ü–æ–ª—É—á–∞–µ–º: 1 Reel
   - –°—Ç–∞—Ç—É—Å: üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞

2. **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å 50K+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤**
   - –í—Å–µ–≥–æ Reels: ${realData.totalReels}
   - –í–∏—Ä—É—Å–Ω—ã—Ö (50K+): ${realData.viralReels}
   - –ü—Ä–æ—Ü–µ–Ω—Ç: ${Math.round((realData.viralReels / realData.totalReels) * 100)}%

3. **–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –Ω–∏–∑–∫–æ–µ**
   - –ú–∞–ª–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
   - –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤–æ–∑–º–æ–∂–Ω–æ 2024 –≥–æ–¥)

## üí° **–†–µ—à–µ–Ω–∏—è:**

1. **–ù–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–∫—Ä–∞–ø–µ—Ä—ã**
2. **–°–Ω–∏–∑–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º**
3. **–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤**
4. **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Apify**

---
**–î–∞—Ç–∞:** ${new Date().toLocaleDateString('ru-RU')}
`;

    const reportsDir = join(vaultPath, 'Reports');
    mkdirSync(reportsDir, { recursive: true });
    writeFileSync(join(reportsDir, '–ü—Ä–æ–±–ª–µ–º—ã —Å–∫—Ä–∞–ø–∏–Ω–≥–∞.md'), problemsReport, 'utf8');

    logger.info('‚úÖ –û—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–æ–∑–¥–∞–Ω');
    logger.info(`üìÅ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${vaultPath}`);

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤:', error);
    throw error;
  }
}

async function main(): Promise<void> {
  try {
    logger.info('üïâÔ∏è –ì–ï–ù–ï–†–ê–¶–ò–Ø OBSIDIAN –û–¢–ß–ï–¢–û–í –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    await initializeDBConnection();
    const db = getDB();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
    await generateObsidianReports(db);

    logger.info('\nüéâ –í–°–ï –ì–û–¢–û–í–û! Obsidian –æ—Ç—á–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    logger.info('üìÇ –û—Ç–∫—Ä–æ–π—Ç–µ vaults/coco-age/ü••‚ú® –ì–õ–ê–í–ù–´–ô –î–ê–®–ë–û–†–î.md –≤ Obsidian');

  } catch (error) {
    logger.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}
