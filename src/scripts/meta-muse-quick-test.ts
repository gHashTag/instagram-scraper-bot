#!/usr/bin/env bun

/**
 * üïâÔ∏è Meta Muse Quick Test Script
 * –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∫—Ä–µ–ø–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ —Ö—ç—à—Ç–µ–≥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
 */

import { drizzle } from "drizzle-orm/neon-http";
import { neon } from "@neondatabase/serverless";
import { eq, and } from "drizzle-orm";
import {
  usersTable,
  projectsTable,
  hashtagsTable,
  reelsTable,
} from "../db/schema";
import { ApifyClient } from "apify-client";

// üîß Configuration
const PROJECT_ID = 2;

// üåê Initialize database
const sql = neon(process.env.DATABASE_URL!);
const db = drizzle(sql);

// üåê Initialize Apify client
const apifyClient = new ApifyClient({
  token: process.env.APIFY_TOKEN || process.env.APIFY_API_TOKEN!,
});

async function quickTest(): Promise<void> {
  console.log("üïâÔ∏è Meta Muse Quick Test - –ó–ê–ü–£–°–ö");
  console.log("‚ïê".repeat(40));
  console.log(`üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString()}`);

  try {
    // Test environment variables
    console.log("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:");
    console.log(
      `‚úÖ DATABASE_URL: ${process.env.DATABASE_URL ? "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}`
    );
    console.log(
      `‚úÖ APIFY_TOKEN: ${process.env.APIFY_TOKEN ? "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}`
    );
    console.log(
      `‚úÖ OPENAI_API_KEY: ${process.env.OPENAI_API_KEY ? "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}`
    );

    // Test database connection
    console.log("\nüóÑÔ∏è –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:");
    const [user] = await db.select().from(usersTable).limit(1);
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user?.email || "N/A"}`);

    // Get project
    const [project] = await db
      .select()
      .from(projectsTable)
      .where(eq(projectsTable.id, PROJECT_ID))
      .limit(1);
    console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω: ${project?.name || "N/A"}`);

    // Get one hashtag for testing
    const [testHashtag] = await db
      .select()
      .from(hashtagsTable)
      .where(
        and(
          eq(hashtagsTable.project_id, PROJECT_ID),
          eq(hashtagsTable.is_active, true)
        )
      )
      .limit(1);

    if (!testHashtag) {
      throw new Error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
    }

    console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ö—ç—à—Ç–µ–≥: ${testHashtag.tag_name}`);

    // Test Apify scraping
    console.log("\nüï∑Ô∏è –¢–µ—Å—Ç Apify —Å–∫—Ä–µ–ø–∏–Ω–≥–∞:");
    console.log(`üè∑Ô∏è –°–∫—Ä–µ–ø–∏–Ω–≥: ${testHashtag.tag_name}`);

    const run = await apifyClient
      .actor("apify/instagram-hashtag-scraper")
      .call({
        hashtags: [testHashtag.tag_name.replace("#", "")],
        resultsLimit: 3, // –¢–æ–ª—å–∫–æ 3 –ø–æ—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
        addParentData: false,
      });

    console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫—Ä–µ–ø–∏–Ω–≥–∞...`);
    console.log(`üÜî Run ID: ${run.id}`);

    // Get results
    const { items } = await apifyClient
      .dataset(run.defaultDatasetId)
      .listItems();

    console.log(
      `üìä –ù–∞–π–¥–µ–Ω–æ ${items.length} –ø–æ—Å—Ç–æ–≤ –¥–ª—è ${testHashtag.tag_name}`
    );

    if (items.length > 0) {
      console.log("\nüì± –ü—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞:");
      const firstItem = items[0];
      console.log(`üÜî ID: ${firstItem.id}`);
      console.log(`üìù Caption: ${firstItem.caption?.substring(0, 100)}...`);
      console.log(`üë§ Author: ${firstItem.ownerUsername}`);
      console.log(`‚ù§Ô∏è Likes: ${firstItem.likesCount}`);
      console.log(`üí¨ Comments: ${firstItem.commentsCount}`);
      console.log(`üëÄ Views: ${firstItem.viewsCount}`);
      console.log(`üîó URL: ${firstItem.url}`);

      // Save one test reel
      try {
        const [existing] = await db
          .select()
          .from(reelsTable)
          .where(eq(reelsTable.reel_url, firstItem.url))
          .limit(1);

        if (!existing) {
          await db.insert(reelsTable).values({
            project_id: PROJECT_ID,
            reel_url: firstItem.url,
            source_type: "hashtag",
            source_identifier: testHashtag.tag_name,
            author_username: firstItem.ownerUsername || "",
            description: firstItem.caption || "",
            views_count: firstItem.viewsCount || 0,
            likes_count: firstItem.likesCount || 0,
            comments_count: firstItem.commentsCount || 0,
            published_at: firstItem.timestamp
              ? new Date(firstItem.timestamp)
              : null,
            thumbnail_url: firstItem.displayUrl || null,
            video_download_url: firstItem.videoUrl || null,
            raw_data: firstItem,
            created_at: new Date(),
            updated_at: new Date(),
          });
          console.log(`üíæ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
        } else {
          console.log(`‚ö†Ô∏è –ü–æ—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error}`);
      }
    }

    console.log("\n‚úÖ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!");
    console.log(
      "üöÄ Apify —Ä–∞–±–æ—Ç–∞–µ—Ç, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –≤—Å—ë –≥–æ—Ç–æ–≤–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–∫—Ä–µ–ø–∏–Ω–≥–∞!"
    );
  } catch (error) {
    console.error("\nüí• –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:", error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  quickTest().catch(console.error);
}

export { quickTest };
