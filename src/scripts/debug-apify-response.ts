/**
 * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Apify
 */

import dotenv from "dotenv";
import { ApifyClient } from "apify-client";
import { logger } from "../logger";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function debugApifyResponse() {
  try {
    const APIFY_TOKEN = process.env.APIFY_TOKEN;
    
    if (!APIFY_TOKEN) {
      logger.error("‚ùå –û—à–∏–±–∫–∞: APIFY_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
      process.exit(1);
    }
    
    logger.info("üîç –û–¢–õ–ê–î–ö–ê –û–¢–í–ï–¢–ê –û–¢ APIFY");
    
    const apifyClient = new ApifyClient({
      token: APIFY_TOKEN,
    });
    
    const input = {
      search: '#aestheticclinic',
      searchType: 'hashtag',
      searchLimit: 250,
      resultsType: 'posts',
      resultsLimit: 5, // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 5 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      proxy: {
        useApifyProxy: true,
        apifyProxyGroups: ['RESIDENTIAL'],
      },
    };
    
    logger.info("üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:", input);
    
    const run = await apifyClient.actor("apify/instagram-scraper").call(input);
    
    logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞...");
    const { items } = await apifyClient.dataset(run.defaultDatasetId).listItems();
    
    logger.info(`üìã –ü–û–õ–£–ß–ï–ù–û ${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç Apify`);
    
    if (items.length > 0) {
      logger.info("üîç –ê–ù–ê–õ–ò–ó –ü–ï–†–í–û–ì–û –≠–õ–ï–ú–ï–ù–¢–ê:");
      const firstItem = items[0];
      
      logger.info("üìù –í—Å–µ –ø–æ–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:");
      Object.keys(firstItem).forEach(key => {
        const value = firstItem[key];
        const type = typeof value;
        const preview = type === 'string' && value.length > 50
          ? value.substring(0, 50) + '...'
          : value;
        logger.info(`  ${key}: ${type} = ${preview}`);
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Å—Ç—ã –≤–Ω—É—Ç—Ä–∏
      if (firstItem.topPosts && Array.isArray(firstItem.topPosts)) {
        logger.info(`\nüî• –ù–ê–ô–î–ï–ù–´ TOP POSTS: ${firstItem.topPosts.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        if (firstItem.topPosts.length > 0) {
          const firstPost = firstItem.topPosts[0];
          logger.info("üìù –ü–æ–ª—è –ø–µ—Ä–≤–æ–≥–æ TOP POST:");
          Object.keys(firstPost).forEach(key => {
            const value = firstPost[key];
            const type = typeof value;
            const preview = type === 'string' && value.length > 50
              ? value.substring(0, 50) + '...'
              : value;
            logger.info(`    ${key}: ${type} = ${preview}`);
          });
        }
      }

      if (firstItem.latestPosts && Array.isArray(firstItem.latestPosts)) {
        logger.info(`\nüìÖ –ù–ê–ô–î–ï–ù–´ LATEST POSTS: ${firstItem.latestPosts.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        if (firstItem.latestPosts.length > 0) {
          const firstPost = firstItem.latestPosts[0];
          logger.info("üìù –ü–æ–ª—è –ø–µ—Ä–≤–æ–≥–æ LATEST POST:");
          Object.keys(firstPost).forEach(key => {
            const value = firstPost[key];
            const type = typeof value;
            const preview = type === 'string' && value.length > 50
              ? value.substring(0, 50) + '...'
              : value;
            logger.info(`    ${key}: ${type} = ${preview}`);
          });
        }
      }
      
      logger.info("\nüé¨ –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ï–ô –î–õ–Ø REELS:");
      logger.info(`  type: ${firstItem.type}`);
      logger.info(`  productType: ${firstItem.productType}`);
      logger.info(`  isVideo: ${firstItem.isVideo}`);
      logger.info(`  videoViewCount: ${firstItem.videoViewCount}`);
      logger.info(`  videoPlayCount: ${firstItem.videoPlayCount}`);
      logger.info(`  viewsCount: ${firstItem.viewsCount}`);
      logger.info(`  likesCount: ${firstItem.likesCount}`);
      logger.info(`  commentsCount: ${firstItem.commentsCount}`);
      logger.info(`  timestamp: ${firstItem.timestamp}`);
      logger.info(`  url: ${firstItem.url}`);
      logger.info(`  ownerUsername: ${firstItem.ownerUsername}`);
      
      logger.info("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú:");
      const typeStats = {};
      const videoStats = {};
      const viewsStats = [];
      
      items.forEach(item => {
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        const type = item.type || 'undefined';
        typeStats[type] = (typeStats[type] || 0) + 1;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–¥–µ–æ
        const isVideo = item.isVideo;
        videoStats[isVideo] = (videoStats[isVideo] || 0) + 1;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
        const views = item.videoViewCount || item.videoPlayCount || item.viewsCount || 0;
        if (views > 0) {
          viewsStats.push(views);
        }
      });
      
      logger.info("  –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", typeStats);
      logger.info("  –í–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç:", videoStats);
      
      if (viewsStats.length > 0) {
        viewsStats.sort((a, b) => b - a);
        logger.info(`  –ü—Ä–æ—Å–º–æ—Ç—Ä—ã (—Ç–æ–ø 10): ${viewsStats.slice(0, 10).join(', ')}`);
        logger.info(`  –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${Math.max(...viewsStats)}`);
        logger.info(`  –ú–∏–Ω–∏–º—É–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${Math.min(...viewsStats)}`);
        logger.info(`  –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${Math.round(viewsStats.reduce((a, b) => a + b, 0) / viewsStats.length)}`);
      } else {
        logger.info("  ‚ùå –ù–ï–¢ –î–ê–ù–ù–´–• –û –ü–†–û–°–ú–û–¢–†–ê–•!");
      }
      
      logger.info("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:");
      if (viewsStats.length === 0) {
        logger.info("  ‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—è");
      } else {
        const maxViews = Math.max(...viewsStats);
        if (maxViews < 50000) {
          logger.info(`  üìâ –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ ${maxViews} < 50K - —Å–Ω–∏–∑—å—Ç–µ –ø–æ—Ä–æ–≥`);
        } else {
          logger.info(`  ‚úÖ –ï—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å 50K+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`);
        }
      }
    }
    
  } catch (error) {
    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
debugApifyResponse();
