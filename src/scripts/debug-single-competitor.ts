/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Apify
 */

import { ApifyClient } from "apify-client";
import dotenv from "dotenv";

dotenv.config();

const args = process.argv.slice(2);
if (args.length < 1) {
  console.error(
    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: bun run src/scripts/debug-single-competitor.ts <username>"
  );
  process.exit(1);
}

const username = args[0];
const apifyToken = process.env.APIFY_TOKEN;

if (!apifyToken) {
  console.error("APIFY_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
  process.exit(1);
}

async function debugCompetitor() {
  console.log(`üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞: ${username}`);
  console.log(`üîë –¢–æ–∫–µ–Ω: ${apifyToken}`);

  const client = new ApifyClient({ token: apifyToken });

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–æ—Ä
    const run = await client.actor("apify/instagram-scraper").call({
      username: [`https://www.instagram.com/${username}`],
      resultsLimit: 50,
      proxy: {
        useApifyProxy: true,
        apifyProxyGroups: ["RESIDENTIAL"],
      },
    });

    console.log(`‚úÖ –ê–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω, ID: ${run.id}`);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const { items } = await client.dataset(run.defaultDatasetId).listItems();

    console.log(`üìä –ü–û–õ–£–ß–ï–ù–û –≠–õ–ï–ú–ï–ù–¢–û–í: ${items.length}`);

    if (items.length > 0) {
      console.log(`\nüé¨ –ü–ï–†–í–´–ô –≠–õ–ï–ú–ï–ù–¢:`);
      const firstItem = items[0];

      console.log(`- –¢–∏–ø: ${firstItem.type || "–Ω–µ —É–∫–∞–∑–∞–Ω"}`);
      console.log(`- URL: ${firstItem.url || "–Ω–µ —É–∫–∞–∑–∞–Ω"}`);
      console.log(`- –î–∞—Ç–∞: ${firstItem.timestamp || "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}`);
      console.log(
        `- –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${firstItem.viewsCount || firstItem.likesCount || "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"}`
      );
      console.log(`- –í–ª–∞–¥–µ–ª–µ—Ü: ${firstItem.ownerUsername || "–Ω–µ —É–∫–∞–∑–∞–Ω"}`);
      console.log(
        `- –û–ø–∏—Å–∞–Ω–∏–µ: ${firstItem.caption ? firstItem.caption.substring(0, 100) + "..." : "–Ω–µ—Ç"}`
      );

      console.log(`\nüìã –í–°–ï –ü–û–õ–Ø:`);
      console.log(JSON.stringify(firstItem, null, 2));

      // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ reels
      const reels = items.filter(
        (item) =>
          item.type === "Video" ||
          item.type === "Reel" ||
          item.url?.includes("/reel/") ||
          item.videoUrl
      );

      console.log(`\nüé• –ù–ê–ô–î–ï–ù–û REELS: ${reels.length}`);

      if (reels.length > 0) {
        console.log(`\nüé¨ –ü–ï–†–í–´–ô REEL:`);
        const firstReel = reels[0];
        console.log(`- URL: ${firstReel.url}`);
        console.log(
          `- –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${firstReel.viewsCount || firstReel.likesCount || "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"}`
        );
        console.log(`- –î–∞—Ç–∞: ${firstReel.timestamp}`);
      }
    } else {
      console.log(`‚ùå –ù–ï–¢ –î–ê–ù–ù–´–• –û–¢ APIFY`);
    }
  } catch (error) {
    console.error(`‚ùå –û–®–ò–ë–ö–ê:`, error);
  }
}

debugCompetitor().catch(console.error);
