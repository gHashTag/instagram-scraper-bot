/**
 * üïâÔ∏è Meta Muse Automated Scraper - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞ 2 –Ω–µ–¥–µ–ª–∏
 *
 * **"‡§ï‡§∞‡•ç‡§Æ‡§£‡•ç‡§Ø‡•á‡§µ‡§æ‡§ß‡§ø‡§ï‡§æ‡§∞‡§∏‡•ç‡§§‡•á ‡§Æ‡§æ ‡§´‡§≤‡•á‡§∑‡•Å ‡§ï‡§¶‡§æ‡§ö‡§®"**
 * "–¢—ã –∏–º–µ–µ—à—å –ø—Ä–∞–≤–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–æ –Ω–µ –Ω–∞ –ø–ª–æ–¥—ã –¥–µ–π—Å—Ç–≤–∏—è"
 *
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç:
 * 1. –†–µ–∞–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Apify –ø–æ –≤—Å–µ–º 151 —Ö—ç—à—Ç–µ–≥—É
 * 2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 14 –¥–Ω–µ–π
 * 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * 4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –≤–∏–¥–µ–æ
 * 5. –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
 */

import { ApifyClient } from "apify-client";
import { initializeDBConnection, NeonDB } from "../db/neonDB";
import { reelsTable } from "../db/schema";
import { eq } from "drizzle-orm";
import { MetaMuseHashtagStrategy } from "../strategy/meta-muse-hashtag-strategy";
import { NeonAdapter } from "../adapters/neon-adapter";

import OpenAI from "openai";
import dotenv from "dotenv";
import * as fs from "fs";
import * as path from "path";
import { exec } from "child_process";
import { promisify } from "util";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const execAsync = promisify(exec);

interface ScrapingStats {
  totalHashtags: number;
  processedHashtags: number;
  totalPosts: number;
  processedPosts: number;
  transcribedPosts: number;
  errors: string[];
  startTime: Date;
  endTime?: Date;
}

interface DailyBatch {
  day: number;
  date: Date;
  hashtags: string[];
  category: string;
}

/**
 * üê≠‚ö° Meta Muse –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–µ–ø–µ—Ä
 */
export class MetaMuseAutomatedScraper {
  private apifyClient: ApifyClient;
  private openai: OpenAI | null = null;

  private db: NeonDB;
  private strategy: MetaMuseHashtagStrategy;
  private stats: ScrapingStats;

  // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  private tempDir = path.join(process.cwd(), "temp");
  private videosDir = path.join(this.tempDir, "videos");
  private audioDir = path.join(this.tempDir, "audio");

  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Apify
    const apifyToken = process.env.APIFY_TOKEN;
    if (!apifyToken) {
      throw new Error("‚ùå APIFY_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
    }
    this.apifyClient = new ApifyClient({ token: apifyToken });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    const openaiKey = process.env.OPENAI_API_KEY;
    if (openaiKey) {
      this.openai = new OpenAI({ apiKey: openaiKey });
    } else {
      console.warn(
        "‚ö†Ô∏è OpenAI API key –Ω–µ –Ω–∞–π–¥–µ–Ω. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞."
      );
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    this.db = {} as NeonDB; // –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ run()
    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä, —Ä–µ–∞–ª—å–Ω—ã–π –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ run()
    this.strategy = {} as MetaMuseHashtagStrategy;

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    this.ensureDirectories();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    this.stats = {
      totalHashtags: 0,
      processedHashtags: 0,
      totalPosts: 0,
      processedPosts: 0,
      transcribedPosts: 0,
      errors: [],
      startTime: new Date(),
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
   */
  private ensureDirectories(): void {
    [this.tempDir, this.videosDir, this.audioDir].forEach((dir) => {
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
        console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
      }
    });
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –±–∞—Ç—á–µ–π –Ω–∞ 14 –¥–Ω–µ–π
   */
  private createDailyBatches(): DailyBatch[] {
    const config = this.strategy.createHashtagConfig();
    const batches: DailyBatch[] = [];

    let currentDay = 1;
    const startDate = new Date();

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö—ç—à—Ç–µ–≥–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ 14 –¥–Ω—è–º
    config.categories.forEach((category) => {
      const hashtagsPerDay = Math.ceil(category.hashtags.length / 14);

      for (let i = 0; i < category.hashtags.length; i += hashtagsPerDay) {
        const dayHashtags = category.hashtags.slice(i, i + hashtagsPerDay);
        const batchDate = new Date(startDate);
        batchDate.setDate(startDate.getDate() + (currentDay - 1));

        batches.push({
          day: currentDay,
          date: batchDate,
          hashtags: dayHashtags,
          category: category.name,
        });

        currentDay = (currentDay % 14) + 1;
      }
    });

    return batches;
  }

  /**
   * –°–∫—Ä–µ–ø–∏–Ω–≥ —á–µ—Ä–µ–∑ Apify –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ö—ç—à—Ç–µ–≥–∞
   */
  private async scrapeHashtag(
    hashtag: string,
    category: string
  ): Promise<any[]> {
    try {
      console.log(`üï∑Ô∏è –°–∫—Ä–µ–ø–∏–Ω–≥ —Ö—ç—à—Ç–µ–≥–∞: ${hashtag} (${category})`);

      const run = await this.apifyClient
        .actor("apify/instagram-hashtag-scraper")
        .call({
          hashtags: [hashtag.replace("#", "")],
          resultsLimit: 100, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–µ–ø–∏–Ω–≥–∞
          addParentData: false,
          enhanceUserSearchWithBio: false,
          isUserTaggedFeedURL: false,
          onlyPostsWithLocation: false,
          proxy: {
            useApifyProxy: true,
            apifyProxyGroups: ["RESIDENTIAL"],
          },
        });

      console.log(`üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫—Ä–µ–ø–∏–Ω–≥–∞ –¥–ª—è ${hashtag}...`);

      const { items } = await this.apifyClient
        .dataset(run.defaultDatasetId)
        .listItems();

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è ${hashtag}`);
      return items as any[];
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–µ–ø–∏–Ω–≥–∞ ${hashtag}:`, error);
      this.stats.errors.push(`–°–∫—Ä–µ–ø–∏–Ω–≥ ${hashtag}: ${error}`);
      return [];
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  private async savePostToDatabase(
    post: any,
    hashtag: string,
    category: string
  ): Promise<number | null> {
    try {
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã reelsTable
      const postToSave = {
        reel_url:
          post.url || post.shortCode
            ? `https://instagram.com/p/${post.shortCode}`
            : null,
        project_id: 2, // Meta Muse Project ID
        source_type: "instagram_hashtag",
        source_identifier: hashtag.replace("#", ""),
        profile_url: post.ownerUrl || null,
        author_username: post.ownerUsername || null,
        description: post.caption || post.text || null,
        views_count: post.videoViewCount || post.playCount || null,
        likes_count: post.likesCount || null,
        comments_count: post.commentsCount || null,
        published_at: post.timestamp ? new Date(post.timestamp * 1000) : null,
        thumbnail_url: post.displayUrl || null,
        video_download_url: post.videoUrl || null,
        raw_data: post,
        created_at: new Date(),
        updated_at: new Date(),
      };

      const result = await this.db
        .insert(reelsTable)
        .values(postToSave)
        .returning({ id: reelsTable.id });

      if (result.length > 0) {
        this.stats.processedPosts++;
        return result[0].id;
      }

      return null;
    } catch (error: any) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      if (
        error.message?.includes("duplicate") ||
        error.message?.includes("unique")
      ) {
        console.log(`‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –ø–æ—Å—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω: ${post.id || "unknown"}`);
        return null;
      }

      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞:`, error);
      this.stats.errors.push(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞: ${error}`);
      return null;
    }
  }

  /**
   * –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≤–∏–¥–µ–æ –ø–æ—Å—Ç–∞
   */
  private async transcribePost(post: any, postId: number): Promise<void> {
    if (!this.openai || !post.videoUrl) {
      return;
    }

    try {
      console.log(`üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –ø–æ—Å—Ç–∞ ID: ${postId}`);

      // –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
      const videoPath = path.join(this.videosDir, `post_${postId}.mp4`);
      await execAsync(`curl -L -o "${videoPath}" "${post.videoUrl}"`);

      if (!fs.existsSync(videoPath)) {
        throw new Error("–í–∏–¥–µ–æ –Ω–µ —Å–∫–∞—á–∞–ª–æ—Å—å");
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
      const audioPath = path.join(this.audioDir, `post_${postId}.mp3`);
      await execAsync(
        `ffmpeg -i "${videoPath}" -q:a 0 -map a "${audioPath}" -y`
      );

      if (!fs.existsSync(audioPath)) {
        throw new Error("–ê—É–¥–∏–æ –Ω–µ –∏–∑–≤–ª–µ–∫–ª–æ—Å—å");
      }

      // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ OpenAI Whisper
      const audioBuffer = fs.readFileSync(audioPath);
      const audioFile = new File([audioBuffer], `audio_${postId}.mp3`, {
        type: "audio/mpeg",
      });

      const transcription = await this.openai.audio.transcriptions.create({
        file: audioFile,
        model: "whisper-1",
        language: "ru",
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.db
        .update(reelsTable)
        .set({
          transcript: transcription.text,
          updated_at: new Date(),
        })
        .where(eq(reelsTable.id, postId));

      console.log(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ—Å—Ç–∞ ${postId}`);
      this.stats.transcribedPosts++;

      // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      fs.unlinkSync(videoPath);
      fs.unlinkSync(audioPath);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ ${postId}:`, error);
      this.stats.errors.push(`–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –ø–æ—Å—Ç–∞ ${postId}: ${error}`);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –±–∞—Ç—á–∞
   */
  private async processDailyBatch(batch: DailyBatch): Promise<void> {
    console.log(`\nüìÖ –î–µ–Ω—å ${batch.day} (${batch.date.toLocaleDateString()})`);
    console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${batch.category}`);
    console.log(`üè∑Ô∏è –•—ç—à—Ç–µ–≥–∏: ${batch.hashtags.join(", ")}`);
    console.log("‚ïê".repeat(60));

    for (const hashtag of batch.hashtags) {
      // –°–∫—Ä–µ–ø–∏–Ω–≥ —Ö—ç—à—Ç–µ–≥–∞
      const posts = await this.scrapeHashtag(hashtag, batch.category);
      this.stats.totalPosts += posts.length;
      this.stats.processedHashtags++;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
      for (const post of posts) {
        const postId = await this.savePostToDatabase(
          post,
          hashtag,
          batch.category
        );

        if (postId && post.videoUrl) {
          await this.transcribePost(post, postId);
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
        await new Promise((resolve) => setTimeout(resolve, 1000));
      }

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ö—ç—à—Ç–µ–≥–∞–º–∏
      await new Promise((resolve) => setTimeout(resolve, 3000));
    }

    console.log(`‚úÖ –î–µ–Ω—å ${batch.day} –∑–∞–≤–µ—Ä—à–µ–Ω!`);
    this.printCurrentStats();
  }

  /**
   * –ü–µ—á–∞—Ç—å —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private printCurrentStats(): void {
    const elapsed = Date.now() - this.stats.startTime.getTime();
    const hours = Math.floor(elapsed / (1000 * 60 * 60));
    const minutes = Math.floor((elapsed % (1000 * 60 * 60)) / (1000 * 60));

    console.log(`\nüìä –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`);
    console.log(
      `üè∑Ô∏è –•—ç—à—Ç–µ–≥–∏: ${this.stats.processedHashtags}/${this.stats.totalHashtags}`
    );
    console.log(
      `üìÑ –ü–æ—Å—Ç—ã: ${this.stats.processedPosts}/${this.stats.totalPosts}`
    );
    console.log(`üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: ${this.stats.transcribedPosts}`);
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è: ${hours}—á ${minutes}–º`);
    console.log(`‚ùå –û—à–∏–±–∫–∏: ${this.stats.errors.length}`);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  private generateFinalReport(): void {
    this.stats.endTime = new Date();
    const duration =
      this.stats.endTime.getTime() - this.stats.startTime.getTime();
    const hours = Math.floor(duration / (1000 * 60 * 60));
    const minutes = Math.floor((duration % (1000 * 60 * 60)) / (1000 * 60));

    console.log(`\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ Meta Muse Scraper`);
    console.log(`‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`);
    console.log(`üÜî Project ID: 999`);
    console.log(
      `üè∑Ô∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ö—ç—à—Ç–µ–≥–æ–≤: ${this.stats.processedHashtags}/${this.stats.totalHashtags}`
    );
    console.log(`üìÑ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: ${this.stats.totalPosts}`);
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: ${this.stats.processedPosts}`);
    console.log(`üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ: ${this.stats.transcribedPosts}`);
    console.log(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${hours}—á ${minutes}–º`);
    console.log(`üóìÔ∏è –ù–∞—á–∞–ª–æ: ${this.stats.startTime.toLocaleString()}`);
    console.log(`üóìÔ∏è –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${this.stats.endTime.toLocaleString()}`);

    if (this.stats.errors.length > 0) {
      console.log(`\n‚ùå –û–®–ò–ë–ö–ò (${this.stats.errors.length}):`);
      this.stats.errors.slice(0, 10).forEach((error, index) => {
        console.log(`${index + 1}. ${error}`);
      });
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
    const reportPath = path.join(
      process.cwd(),
      "exports",
      `meta-muse-report-${Date.now()}.json`
    );
    const exportDir = path.dirname(reportPath);
    if (!fs.existsSync(exportDir)) {
      fs.mkdirSync(exportDir, { recursive: true });
    }

    fs.writeFileSync(reportPath, JSON.stringify(this.stats, null, 2));
    console.log(`\nüìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
   */
  async run(): Promise<void> {
    try {
      console.log(`üïâÔ∏è Meta Muse Automated Scraper - –ó–ê–ü–£–°–ö`);
      console.log(`‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`);
      console.log(`üìÖ –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString()}`);
      console.log(`üÜî Project ID: 999 (Meta Muse - –∞–Ω–∏–º–µ –º—ã—à—å)`);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      this.db = await initializeDBConnection();
      console.log(`üîó –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞`);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
      const adapter = new NeonAdapter(this.db);
      this.strategy = new MetaMuseHashtagStrategy(adapter, 2);

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ö—ç—à—Ç–µ–≥–æ–≤
      const config = this.strategy.createHashtagConfig();
      this.stats.totalHashtags = config.totalHashtags;

      console.log(`\nüìä –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ö–†–ï–ü–ò–ù–ì–ê:`);
      console.log(`üè∑Ô∏è –í—Å–µ–≥–æ —Ö—ç—à—Ç–µ–≥–æ–≤: ${config.totalHashtags}`);
      console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${config.categories.length}`);
      config.categories.forEach((cat) => {
        console.log(`   ‚Ä¢ ${cat.name}: ${cat.hashtags.length} —Ö—ç—à—Ç–µ–≥–æ–≤`);
      });

      // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞—Ç—á–µ–π –Ω–∞ 14 –¥–Ω–µ–π
      const dailyBatches = this.createDailyBatches();
      console.log(`\nüìÖ –ü–õ–ê–ù –ù–ê 14 –î–ù–ï–ô:`);
      console.log(`üî¢ –í—Å–µ–≥–æ –±–∞—Ç—á–µ–π: ${dailyBatches.length}`);

      // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
      dailyBatches.forEach((batch, index) => {
        if (index < 5) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–Ω–µ–π
          console.log(
            `   –î–µ–Ω—å ${batch.day}: ${batch.hashtags.length} —Ö—ç—à—Ç–µ–≥–æ–≤ (${batch.category})`
          );
        }
      });
      if (dailyBatches.length > 5) {
        console.log(`   ... –∏ –µ—â–µ ${dailyBatches.length - 5} –¥–Ω–µ–π`);
      }

      console.log(`\nüöÄ –ù–ê–ß–ò–ù–ê–ï–ú –°–ö–†–ï–ü–ò–ù–ì...`);

      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –±–∞—Ç—á–µ–π
      for (const batch of dailyBatches) {
        await this.processDailyBatch(batch);

        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–Ω—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
        if (batch !== dailyBatches[dailyBatches.length - 1]) {
          console.log(`\nüò¥ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–Ω–µ–º (30 —Å–µ–∫—É–Ω–¥)...`);
          await new Promise((resolve) => setTimeout(resolve, 30000));
        }
      }

      // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
      this.generateFinalReport();

      console.log(`\nüéâ Meta Muse Automated Scraper –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û! üê≠‚ö°`);
    } catch (error) {
      console.error(`\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:`, error);
      this.stats.errors.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error}`);
      this.stats.endTime = new Date();
      this.generateFinalReport();
      process.exit(1);
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
 */
async function main() {
  const scraper = new MetaMuseAutomatedScraper();
  await scraper.run();
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:", error);
    process.exit(1);
  });
}
