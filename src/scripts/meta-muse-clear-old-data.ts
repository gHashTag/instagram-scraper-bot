#!/usr/bin/env bun

/**
 * üßπ Meta Muse Clear Old Data
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö Meta Muse –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å –Ω–æ–≤—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
 */

import { drizzle } from "drizzle-orm/neon-http";
import { neon } from "@neondatabase/serverless";
import { eq, count } from "drizzle-orm";
import { hashtagsTable, reelsTable } from "../db/schema";

// üîß Configuration
const PROJECT_ID = 2;

// üåê Initialize database
const sql = neon(process.env.DATABASE_URL!);
const db = drizzle(sql);

async function clearOldData(): Promise<void> {
  console.log("üßπ Meta Muse Clear Old Data - –ó–ê–ü–£–°–ö");
  console.log("‚ïê".repeat(50));
  console.log(`üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString()}`);
  console.log(`üÜî Project ID: ${PROJECT_ID}`);

  try {
    // 1. Check current data
    console.log("\nüìä –¢–ï–ö–£–©–ò–ï –î–ê–ù–ù–´–ï:");

    const currentReels = await db
      .select({ count: count() })
      .from(reelsTable)
      .where(eq(reelsTable.project_id, PROJECT_ID));

    const currentHashtags = await db
      .select({ count: count() })
      .from(hashtagsTable)
      .where(eq(hashtagsTable.project_id, PROJECT_ID));

    console.log(`üì± –†–∏–ª—Å–æ–≤: ${currentReels[0].count}`);
    console.log(`üè∑Ô∏è –•—ç—à—Ç–µ–≥–æ–≤: ${currentHashtags[0].count}`);

    // 2. Confirm deletion
    console.log("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï –¥–∞–Ω–Ω—ã–µ Meta Muse!");
    console.log("üéØ –ü—Ä–∏—á–∏–Ω–∞: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (2 –Ω–µ–¥–µ–ª–∏ + 50K –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)");

    // 3. Delete reels first (foreign key constraint)
    console.log("\nüóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –†–ò–õ–°–û–í...");
    await db.delete(reelsTable).where(eq(reelsTable.project_id, PROJECT_ID));

    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ä–∏–ª—Å–æ–≤: ${currentReels[0].count}`);

    // 4. Delete hashtags
    console.log("\nüóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –•–≠–®–¢–ï–ì–û–í...");
    await db
      .delete(hashtagsTable)
      .where(eq(hashtagsTable.project_id, PROJECT_ID));

    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ö—ç—à—Ç–µ–≥–æ–≤: ${currentHashtags[0].count}`);

    // 5. Verify cleanup
    console.log("\nüîç –ü–†–û–í–ï–†–ö–ê –û–ß–ò–°–¢–ö–ò:");

    const remainingReels = await db
      .select({ count: count() })
      .from(reelsTable)
      .where(eq(reelsTable.project_id, PROJECT_ID));

    const remainingHashtags = await db
      .select({ count: count() })
      .from(hashtagsTable)
      .where(eq(hashtagsTable.project_id, PROJECT_ID));

    console.log(`üì± –û—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ä–∏–ª—Å–æ–≤: ${remainingReels[0].count}`);
    console.log(`üè∑Ô∏è –û—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ö—ç—à—Ç–µ–≥–æ–≤: ${remainingHashtags[0].count}`);

    if (remainingReels[0].count === 0 && remainingHashtags[0].count === 0) {
      console.log("\n‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!");
      console.log("üéØ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:");
      console.log("   üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏");
      console.log("   üëÄ –ë–æ–ª—å—à–µ 50,000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤");
    } else {
      console.log("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!");
    }
  } catch (error) {
    console.error("\nüí• –û–®–ò–ë–ö–ê –û–ß–ò–°–¢–ö–ò:", error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  clearOldData().catch(console.error);
}

export { clearOldData };
