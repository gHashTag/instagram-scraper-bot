#!/usr/bin/env node

/**
 * üïâÔ∏è RUN STRATEGY - –ó–∞–ø—É—Å–∫ Instagram —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
 * 
 * –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–≤
 * 
 * –ü—Ä–∏–º–µ—Ä—ã:
 * npm run strategy viral
 * npm run strategy popular 15000
 * npm run strategy custom aestheticclinic,botox competitor1,competitor2 50000
 */

import { StrategyManager } from '../strategy-manager';
import { MultiStrategyManager } from '../multi-strategy-manager';
import { logger } from '../logger';

function printUsage() {
  console.log(`
üïâÔ∏è MULTI-CLIENT STRATEGY RUNNER

–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê–ú–ò:
  npm run strategy clients                    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  npm run strategy switch <–∫–ª–∏–µ–Ω—Ç>            # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
  npm run strategy run-all                    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

–ö–õ–ò–ï–ù–¢–´:
  aesthetics     - –≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞
  trendwatching  - AI —Ç—Ä–µ–Ω–¥—ã –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã

–†–ê–ë–û–¢–ê –° –¢–ï–ö–£–©–ò–ú –ö–õ–ò–ï–ù–¢–û–ú:
  npm run strategy status                     # –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  npm run strategy run                        # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
  npm run strategy <–ø—Ä–µ—Å–µ—Ç> [–º–∏–Ω–ü—Ä–æ—Å–º–æ—Ç—Ä—ã]    # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç

–ü–†–ï–°–ï–¢–´:
  viral     - –í–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (50K+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, 7 –¥–Ω–µ–π)
  popular   - –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (10K+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, 30 –¥–Ω–µ–π)
  trending  - –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (5K+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, 14 –¥–Ω–µ–π)
  research  - –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (1K+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, 90 –¥–Ω–µ–π)

–ü–†–ò–ú–ï–†–´:
  npm run strategy switch trendwatching
  npm run strategy viral
  npm run strategy run-all
  npm run strategy custom "ai,technology" "evolving.ai,theaipage" 50000
  `);
}

async function runStrategy() {
  try {
    const args = process.argv.slice(2);

    if (args.length === 0) {
      printUsage();
      process.exit(1);
    }

    const command = args[0];
    const multiManager = MultiStrategyManager.getInstance();

    switch (command) {
      case 'clients':
        multiManager.showAllClients();
        break;

      case 'switch':
        {
          if (args.length < 2) {
            logger.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è');
            logger.info('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: aesthetics, trendwatching');
            process.exit(1);
          }

          const clientId = args[1];
          multiManager.switchClient(clientId);
          multiManager.getCurrentStrategy().showStatus();
        }
        break;

      case 'run-all':
        logger.info('üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –°–¢–†–ê–¢–ï–ì–ò–ô');
        await multiManager.runAllStrategies();
        break;

      case 'viral':
      case 'popular':
      case 'trending':
      case 'research':
        {
          const minViews = args[1] ? parseInt(args[1]) : undefined;

          logger.info(`üöÄ –ó–ê–ü–£–°–ö –ü–†–ï–°–ï–¢–ê: ${command.toUpperCase()}`);

          const strategy = multiManager.getCurrentStrategy();
          strategy.applyPreset(command);

          if (minViews) {
            strategy.setMinViews(minViews);
          }

          strategy.showStatus().saveConfig();

          // –ó–∞–ø—É—Å–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
          await multiManager.runCurrentStrategy();
        }
        break;

      case 'custom':
        {
          if (args.length < 3) {
            logger.error('‚ùå –î–ª—è custom –Ω—É–∂–Ω—ã —Ö—ç—à—Ç–µ–≥–∏ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã');
            printUsage();
            process.exit(1);
          }

          const hashtags = args[1].split(',').map(h => h.trim());
          const competitors = args[2].split(',').map(c => c.trim()).filter(c => c);
          const minViews = args[3] ? parseInt(args[3]) : undefined;

          logger.info('üöÄ –ö–ê–°–¢–û–ú–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê');

          const strategy = multiManager.getCurrentStrategy();
          strategy.quickSetup('viral', hashtags, competitors, minViews);
          strategy.saveConfig();

          // –ó–∞–ø—É—Å–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
          await multiManager.runCurrentStrategy();
        }
        break;

      case 'setup':
        {
          if (args.length < 4) {
            logger.error('‚ùå –î–ª—è setup –Ω—É–∂–Ω—ã: –ø—Ä–µ—Å–µ—Ç, —Ö—ç—à—Ç–µ–≥–∏, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã');
            printUsage();
            process.exit(1);
          }

          const preset = args[1];
          const hashtags = args[2].split(',').map(h => h.trim());
          const competitors = args[3].split(',').map(c => c.trim()).filter(c => c);
          const minViews = args[4] ? parseInt(args[4]) : undefined;

          logger.info('üöÄ –ë–´–°–¢–†–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê');

          const strategy = multiManager.getCurrentStrategy();
          strategy.quickSetup(preset, hashtags, competitors, minViews);
          strategy.saveConfig();

          logger.info('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm run strategy run –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.');
        }
        break;

      case 'status':
        {
          const currentClient = multiManager.getCurrentClient();
          if (currentClient) {
            logger.info(`\nüë§ –¢–ï–ö–£–©–ò–ô –ö–õ–ò–ï–ù–¢: ${currentClient.name}`);
            multiManager.getCurrentStrategy().showStatus();
          } else {
            logger.error('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω —Ç–µ–∫—É—â–∏–π –∫–ª–∏–µ–Ω—Ç');
          }
        }
        break;

      case 'run':
        logger.info('üöÄ –ó–ê–ü–£–°–ö –¢–ï–ö–£–©–ï–ô –°–¢–†–ê–¢–ï–ì–ò–ò');
        await multiManager.runCurrentStrategy();
        break;

      default:
        logger.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
        printUsage();
        process.exit(1);
    }

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:', error);
    process.exit(1);
  }
}

/**
 * –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
 */
async function executeStrategy(strategyManager: StrategyManager) {
  const config = strategyManager.getStrategy();
  
  logger.info('\nüîÑ –í–´–ü–û–õ–ù–ï–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ò...');
  
  // 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
  logger.info('üìã 1. –ü–û–î–ì–û–¢–û–í–ö–ê');
  logger.info(`  üìä –†–µ–∂–∏–º: ${config.scraping.mode}`);
  logger.info(`  üëÅÔ∏è –ú–∏–Ω. –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${config.scraping.minViews.toLocaleString()}`);
  logger.info(`  üè∑Ô∏è –•—ç—à—Ç–µ–≥–æ–≤: ${config.sources.hashtags.length}`);
  logger.info(`  üè¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${config.sources.competitors.length}`);
  
  // 2. –°–∫—Ä–∞–ø–∏–Ω–≥ —Ö—ç—à—Ç–µ–≥–æ–≤
  if (config.sources.hashtags.length > 0) {
    logger.info('\nüè∑Ô∏è 2. –°–ö–†–ê–ü–ò–ù–ì –•–≠–®–¢–ï–ì–û–í');
    for (const hashtag of config.sources.hashtags) {
      logger.info(`  üîç –°–∫—Ä–∞–ø–∏–Ω–≥ #${hashtag.tag} (–ª–∏–º–∏—Ç: ${hashtag.limit})`);
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∞–ø–µ—Ä–∞
      await mockScrapeHashtag(hashtag.tag, hashtag.limit, config.scraping.minViews);
    }
  }
  
  // 3. –°–∫—Ä–∞–ø–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
  if (config.sources.competitors.length > 0) {
    logger.info('\nüè¢ 3. –°–ö–†–ê–ü–ò–ù–ì –ö–û–ù–ö–£–†–ï–ù–¢–û–í');
    for (const competitor of config.sources.competitors) {
      logger.info(`  üîç –°–∫—Ä–∞–ø–∏–Ω–≥ @${competitor.username} (–ª–∏–º–∏—Ç: ${competitor.limit})`);
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∞–ø–µ—Ä–∞
      await mockScrapeCompetitor(competitor.username, competitor.limit, config.scraping.minViews);
    }
  }
  
  // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç
  logger.info('\nüìä 4. –û–ë–†–ê–ë–û–¢–ö–ê –ò –≠–ö–°–ü–û–†–¢');
  
  if (config.output.database.enabled) {
    logger.info('  üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
  }
  
  if (config.output.excel.enabled) {
    logger.info('  üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel...');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel
  }
  
  if (config.output.obsidian.enabled) {
    logger.info('  üìù –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Obsidian...');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Obsidian
  }
  
  if (config.output.notifications.telegram.enabled) {
    logger.info('  üì± –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  }
  
  logger.info('\nüéâ –°–¢–†–ê–¢–ï–ì–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!');
  
  // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  logger.info('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  logger.info('  üì• –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: 47');
  logger.info('  ‚úÖ –ü—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã: 23');
  logger.info('  üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: 23');
  logger.info('  üìÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: 1 —Ñ–∞–π–ª');
  logger.info('  üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: 5');
}

/**
 * –ú–æ–∫-—Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Ö—ç—à—Ç–µ–≥–∞
 */
async function mockScrapeHashtag(hashtag: string, limit: number, minViews: number) {
  // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∞–ø–µ—Ä–∞
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  const found = Math.floor(Math.random() * 10) + 5;
  const filtered = Math.floor(found * 0.6);
  
  logger.info(`    üì• –ù–∞–π–¥–µ–Ω–æ: ${found}, ‚úÖ –ü—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä: ${filtered}`);
}

/**
 * –ú–æ–∫-—Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
 */
async function mockScrapeCompetitor(username: string, limit: number, minViews: number) {
  // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∞–ø–µ—Ä–∞
  await new Promise(resolve => setTimeout(resolve, 800));
  
  const found = Math.floor(Math.random() * 8) + 3;
  const filtered = Math.floor(found * 0.7);
  
  logger.info(`    üì• –ù–∞–π–¥–µ–Ω–æ: ${found}, ‚úÖ –ü—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä: ${filtered}`);
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
runStrategy();
