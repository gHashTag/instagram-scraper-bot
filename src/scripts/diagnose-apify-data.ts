/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Apify
 */

import dotenv from "dotenv";
import { ApifyClient } from "apify-client";
import { logger } from "../logger";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function diagnoseApifyData() {
  try {
    const APIFY_TOKEN = process.env.APIFY_TOKEN;
    
    if (!APIFY_TOKEN) {
      logger.error("‚ùå –û—à–∏–±–∫–∞: APIFY_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
      process.exit(1);
    }
    
    logger.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ù–´–• –û–¢ APIFY");
    
    const apifyClient = new ApifyClient({
      token: APIFY_TOKEN,
    });
    
    const input = {
      search: '#aestheticclinic',
      searchType: 'hashtag',
      searchLimit: 250,
      resultsType: 'posts',
      resultsLimit: 10, // –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      proxy: {
        useApifyProxy: true,
        apifyProxyGroups: ['RESIDENTIAL'],
      },
    };
    
    logger.info("üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:", input);
    
    const run = await apifyClient.actor("apify/instagram-scraper").call(input);
    
    logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞...");
    const { items } = await apifyClient.dataset(run.defaultDatasetId).listItems();
    
    logger.info(`üìã –ü–û–õ–£–ß–ï–ù–û ${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç Apify`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
    let allPosts: any[] = [];
    items.forEach((item: any, index: number) => {
      if (item.topPosts && Array.isArray(item.topPosts)) {
        allPosts.push(...item.topPosts);
      }
      if (item.latestPosts && Array.isArray(item.latestPosts)) {
        allPosts.push(...item.latestPosts);
      }
    });
    
    logger.info(`üìä –í–°–ï–ì–û –ü–û–°–¢–û–í: ${allPosts.length}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    logger.info("\nüîç –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô –ü–†–û–°–ú–û–¢–†–û–í:");
    
    const viewsFields = [
      'videoViewCount',
      'videoPlayCount', 
      'viewsCount',
      'playCount',
      'views',
      'likesCount'
    ];
    
    const fieldStats = {};
    
    allPosts.forEach((post, index) => {
      if (index < 10) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        logger.info(`\nüìù –ü–û–°–¢ ${index + 1} (@${post.ownerUsername}):`);
        logger.info(`  Type: ${post.type}, ProductType: ${post.productType}`);
        logger.info(`  Likes: ${post.likesCount}, Comments: ${post.commentsCount}`);
        logger.info(`  Date: ${post.timestamp}`);
        
        viewsFields.forEach(field => {
          const value = post[field];
          if (value !== undefined) {
            logger.info(`  ${field}: ${value}`);
            fieldStats[field] = (fieldStats[field] || 0) + 1;
          }
        });
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –ø–æ—Å—Ç–∞–º
      viewsFields.forEach(field => {
        if (post[field] !== undefined) {
          fieldStats[field] = (fieldStats[field] || 0) + 1;
        }
      });
    });
    
    logger.info("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–û–õ–Ø–ú –ü–†–û–°–ú–û–¢–†–û–í:");
    Object.entries(fieldStats).forEach(([field, count]) => {
      logger.info(`  ${field}: –Ω–∞–π–¥–µ–Ω–æ –≤ ${count} –∏–∑ ${allPosts.length} –ø–æ—Å—Ç–æ–≤`);
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    logger.info("\nüé¨ –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –ö–û–ù–¢–ï–ù–¢–ê:");
    const typeStats = {};
    const productTypeStats = {};
    const videoStats = {};
    
    allPosts.forEach(post => {
      const type = post.type || 'undefined';
      const productType = post.productType || 'undefined';
      const isVideo = post.isVideo || false;
      
      typeStats[type] = (typeStats[type] || 0) + 1;
      productTypeStats[productType] = (productTypeStats[productType] || 0) + 1;
      videoStats[isVideo] = (videoStats[isVideo] || 0) + 1;
    });
    
    logger.info("  –ü–æ —Ç–∏–ø–∞–º:", typeStats);
    logger.info("  –ü–æ productType:", productTypeStats);
    logger.info("  –ü–æ isVideo:", videoStats);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∞–π–∫–∏ –∫–∞–∫ –º–µ—Ç—Ä–∏–∫—É –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    logger.info("\n‚ù§Ô∏è –ê–ù–ê–õ–ò–ó –õ–ê–ô–ö–û–í –ö–ê–ö –ú–ï–¢–†–ò–ö–ò:");
    const likes = allPosts
      .filter(post => post.likesCount && post.likesCount > 0)
      .map(post => post.likesCount)
      .sort((a, b) => b - a);
    
    if (likes.length > 0) {
      logger.info(`  –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ —Å –ª–∞–π–∫–∞–º–∏: ${likes.length}`);
      logger.info(`  –¢–æ–ø-10 –ø–æ –ª–∞–π–∫–∞–º: ${likes.slice(0, 10).join(', ')}`);
      logger.info(`  –ú–∞–∫—Å–∏–º—É–º –ª–∞–π–∫–æ–≤: ${Math.max(...likes)}`);
      logger.info(`  –ú–µ–¥–∏–∞–Ω–∞ –ª–∞–π–∫–æ–≤: ${likes[Math.floor(likes.length / 2)]}`);
      logger.info(`  –°—Ä–µ–¥–Ω–µ–µ –ª–∞–π–∫–æ–≤: ${Math.round(likes.reduce((a, b) => a + b, 0) / likes.length)}`);
      
      // –°–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –∏–º–µ—é—Ç –ª–∞–π–∫–∏, —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã–µ 50K –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
      const threshold50k = Math.ceil(50000 / 15); // 3334 –ª–∞–π–∫–∞
      const above50k = likes.filter(l => l >= threshold50k).length;
      logger.info(`  –ü–æ—Å—Ç–æ–≤ —Å ${threshold50k}+ –ª–∞–π–∫–æ–≤ (‚âà50K –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤): ${above50k}`);
      
      const threshold10k = Math.ceil(10000 / 15); // 667 –ª–∞–π–∫–æ–≤
      const above10k = likes.filter(l => l >= threshold10k).length;
      logger.info(`  –ü–æ—Å—Ç–æ–≤ —Å ${threshold10k}+ –ª–∞–π–∫–æ–≤ (‚âà10K –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤): ${above10k}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã
    logger.info("\nüìÖ –ê–ù–ê–õ–ò–ó –î–ê–¢:");
    const dates = allPosts
      .filter(post => post.timestamp)
      .map(post => new Date(post.timestamp))
      .sort((a, b) => b.getTime() - a.getTime());
    
    if (dates.length > 0) {
      const now = new Date();
      const monthAgo = new Date();
      monthAgo.setDate(monthAgo.getDate() - 30);
      
      const recentPosts = dates.filter(date => date >= monthAgo).length;
      
      logger.info(`  –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ —Å –¥–∞—Ç–∞–º–∏: ${dates.length}`);
      logger.info(`  –°–∞–º—ã–π –Ω–æ–≤—ã–π: ${dates[0].toISOString()}`);
      logger.info(`  –°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π: ${dates[dates.length - 1].toISOString()}`);
      logger.info(`  –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: ${recentPosts} –ø–æ—Å—Ç–æ–≤`);
    }
    
    logger.info("\nüéØ –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:");
    
    if (fieldStats.videoViewCount || fieldStats.videoPlayCount || fieldStats.viewsCount) {
      logger.info("  ‚úÖ –ï—Å—Ç—å –ø–æ–ª—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö!");
    } else {
      logger.info("  ‚ùå –ù–µ—Ç –ø–æ–ª–µ–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∞–π–∫–∏ –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –º–µ—Ç—Ä–∏–∫—É");
    }
    
    const videoPosts = allPosts.filter(post => 
      post.type === 'Video' || post.productType === 'clips'
    ).length;
    
    logger.info(`  üé¨ –í–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${videoPosts} –∏–∑ ${allPosts.length} –ø–æ—Å—Ç–æ–≤`);
    
    if (videoPosts < allPosts.length * 0.3) {
      logger.info("  ‚ö†Ô∏è –ú–ê–õ–û –í–ò–î–ï–û –ö–û–ù–¢–ï–ù–¢–ê! –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞");
    }
    
  } catch (error) {
    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
diagnoseApifyData();
