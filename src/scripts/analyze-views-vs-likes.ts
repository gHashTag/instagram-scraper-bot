/**
 * –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ –ª–∞–π–∫–æ–≤
 */

import dotenv from "dotenv";
import { ApifyClient } from "apify-client";
import { logger } from "../logger";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function analyzeViewsVsLikes() {
  try {
    const APIFY_TOKEN = process.env.APIFY_TOKEN;
    
    if (!APIFY_TOKEN) {
      logger.error("‚ùå –û—à–∏–±–∫–∞: APIFY_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
      process.exit(1);
    }
    
    logger.info("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–°–ú–û–¢–†–û–í VS –õ–ê–ô–ö–û–í");
    
    const apifyClient = new ApifyClient({
      token: APIFY_TOKEN,
    });
    
    const input = {
      search: '#aestheticclinic',
      searchType: 'hashtag',
      searchLimit: 250,
      resultsType: 'posts',
      resultsLimit: 5,
      proxy: {
        useApifyProxy: true,
        apifyProxyGroups: ['RESIDENTIAL'],
      },
    };
    
    logger.info("üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:", input);
    
    const run = await apifyClient.actor("apify/instagram-scraper").call(input);
    
    logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞...");
    const { items } = await apifyClient.dataset(run.defaultDatasetId).listItems();
    
    logger.info(`üìã –ü–û–õ–£–ß–ï–ù–û ${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç Apify`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
    let allPosts: any[] = [];
    items.forEach((item: any, index: number) => {
      if (item.topPosts && Array.isArray(item.topPosts)) {
        allPosts.push(...item.topPosts);
      }
      if (item.latestPosts && Array.isArray(item.latestPosts)) {
        allPosts.push(...item.latestPosts);
      }
    });
    
    logger.info(`üìä –í–°–ï–ì–û –ü–û–°–¢–û–í: ${allPosts.length}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 20 –ø–æ—Å—Ç–æ–≤ –¥–µ—Ç–∞–ª—å–Ω–æ
    logger.info("\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–ï–†–í–´–• 20 –ü–û–°–¢–û–í:");
    
    const analysisData = [];
    
    for (let i = 0; i < Math.min(20, allPosts.length); i++) {
      const post = allPosts[i];
      
      const data = {
        index: i + 1,
        username: post.ownerUsername,
        type: post.type,
        productType: post.productType,
        likesCount: post.likesCount,
        commentsCount: post.commentsCount,
        videoViewCount: post.videoViewCount,
        videoPlayCount: post.videoPlayCount,
        viewsCount: post.viewsCount,
        playCount: post.playCount,
        timestamp: post.timestamp,
        url: post.url
      };
      
      // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ –Ω–∞—à–µ–π –ª–æ–≥–∏–∫–µ
      let estimatedViews = 0;
      let viewsSource = 'none';
      
      if (post.videoViewCount && post.videoViewCount > 0) {
        estimatedViews = post.videoViewCount;
        viewsSource = 'videoViewCount';
      } else if (post.videoPlayCount && post.videoPlayCount > 0) {
        estimatedViews = post.videoPlayCount;
        viewsSource = 'videoPlayCount';
      } else if (post.likesCount && post.likesCount > 0) {
        estimatedViews = post.likesCount * 15;
        viewsSource = 'likesCount * 15';
      }
      
      data['estimatedViews'] = estimatedViews;
      data['viewsSource'] = viewsSource;
      
      // –í—ã—á–∏—Å–ª—è–µ–º engagement rate
      if (estimatedViews > 0 && post.likesCount > 0) {
        data['engagementRate'] = ((post.likesCount / estimatedViews) * 100).toFixed(2) + '%';
      } else {
        data['engagementRate'] = 'N/A';
      }
      
      analysisData.push(data);
      
      logger.info(`\nüìù –ü–û–°–¢ ${i + 1} (@${post.ownerUsername}):`);
      logger.info(`  Type: ${post.type}, ProductType: ${post.productType}`);
      logger.info(`  –õ–∞–π–∫–∏: ${post.likesCount || 'N/A'}`);
      logger.info(`  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${post.commentsCount || 'N/A'}`);
      logger.info(`  videoViewCount: ${post.videoViewCount || 'N/A'}`);
      logger.info(`  videoPlayCount: ${post.videoPlayCount || 'N/A'}`);
      logger.info(`  viewsCount: ${post.viewsCount || 'N/A'}`);
      logger.info(`  playCount: ${post.playCount || 'N/A'}`);
      logger.info(`  üìä –ù–∞—à–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${estimatedViews} (–∏—Å—Ç–æ—á–Ω–∏–∫: ${viewsSource})`);
      logger.info(`  üìà Engagement: ${data['engagementRate']}`);
      logger.info(`  üìÖ –î–∞—Ç–∞: ${post.timestamp}`);
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    logger.info("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ò–°–¢–û–ß–ù–ò–ö–ê–ú –ü–†–û–°–ú–û–¢–†–û–í:");
    const sourceStats = {};
    analysisData.forEach(data => {
      const source = data.viewsSource;
      sourceStats[source] = (sourceStats[source] || 0) + 1;
    });
    
    Object.entries(sourceStats).forEach(([source, count]) => {
      logger.info(`  ${source}: ${count} –ø–æ—Å—Ç–æ–≤`);
    });
    
    // –ê–Ω–∞–ª–∏–∑ engagement rates
    logger.info("\nüìà –ê–ù–ê–õ–ò–ó ENGAGEMENT RATES:");
    const engagementRates = analysisData
      .filter(data => data.engagementRate !== 'N/A')
      .map(data => parseFloat(data.engagementRate.replace('%', '')));
    
    if (engagementRates.length > 0) {
      const avgEngagement = engagementRates.reduce((a, b) => a + b, 0) / engagementRates.length;
      const minEngagement = Math.min(...engagementRates);
      const maxEngagement = Math.max(...engagementRates);
      
      logger.info(`  –°—Ä–µ–¥–Ω–∏–π engagement: ${avgEngagement.toFixed(2)}%`);
      logger.info(`  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: ${minEngagement.toFixed(2)}%`);
      logger.info(`  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: ${maxEngagement.toFixed(2)}%`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      const uniqueRates = [...new Set(engagementRates.map(r => r.toFixed(1)))];
      if (uniqueRates.length < engagementRates.length / 2) {
        logger.info("  ‚ö†Ô∏è –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û: –ú–Ω–æ–≥–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö engagement rates!");
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
    logger.info("\nüéØ –í–´–í–û–î–´:");
    const realViewsCount = analysisData.filter(data => 
      data.viewsSource === 'videoViewCount' || data.viewsSource === 'videoPlayCount'
    ).length;
    
    const fakeViewsCount = analysisData.filter(data => 
      data.viewsSource === 'likesCount * 15'
    ).length;
    
    logger.info(`  ‚úÖ –ü–æ—Å—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏: ${realViewsCount}`);
    logger.info(`  ‚ùå –ü–æ—Å—Ç–æ–≤ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏: ${fakeViewsCount}`);
    
    if (fakeViewsCount > realViewsCount) {
      logger.info("  üö® –ü–†–û–ë–õ–ï–ú–ê: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö - –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ!");
      logger.info("  üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö");
    }
    
    if (realViewsCount > 0) {
      logger.info("  ‚úÖ –•–û–†–û–®–û: –ï—Å—Ç—å –ø–æ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏");
      logger.info("  üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏");
    }
    
  } catch (error) {
    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
analyzeViewsVsLikes();
