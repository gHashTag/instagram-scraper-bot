#!/usr/bin/env node

/**
 * üïâÔ∏è CLEAN AND SCRAPE FRESH - –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 * 
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è:
 * 1. –û—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –æ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (2024 –≥–æ–¥)
 * 2. –£–¥–∞–ª–µ–Ω–∏—è Lips For Kis –∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
 * 3. –°–∫—Ä–∞–ø–∏–Ω–≥–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π —Å 50K+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
 */

import { config } from 'dotenv';
import { initializeDBConnection, getDB, NeonDB } from '../db/neonDB';
import { sql, lt, eq } from 'drizzle-orm';
import * as schema from '../db/schema';
import { logger } from '../logger';
import { scrapeInstagramReels } from '../agent/instagram-scraper';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

async function cleanDatabase(db: NeonDB): Promise<void> {
  logger.info('üßπ –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•...');

  try {
    // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 2024 –≥–æ–¥
    const year2025Start = new Date('2025-01-01');
    const deletedOldData = await db
      .delete(schema.reelsTable)
      .where(lt(schema.reelsTable.created_at, year2025Start));

    logger.info(`‚úÖ –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–æ 2025 –≥–æ–¥–∞)`);

    // 2. –£–¥–∞–ª—è–µ–º Lips For Kis –∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const deletedLipsForKis = await db
      .delete(schema.competitorsTable)
      .where(sql`LOWER(username) LIKE '%lips%for%kis%' OR LOWER(username) LIKE '%lipsfor%kis%'`);

    logger.info(`‚úÖ –£–¥–∞–ª–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç Lips For Kis`);

    // 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const reelsCount = await db
      .select({ count: sql<number>`count(*)` })
      .from(schema.reelsTable);

    const competitorsCount = await db
      .select({ count: sql<number>`count(*)` })
      .from(schema.competitorsTable);

    logger.info(`üìä –û—Å—Ç–∞–ª–æ—Å—å –≤ –±–∞–∑–µ:`);
    logger.info(`  üì• Reels: ${reelsCount[0].count}`);
    logger.info(`  üè¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${competitorsCount[0].count}`);

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã:', error);
    throw error;
  }
}

async function scrapeViralContent(db: NeonDB): Promise<void> {
  logger.info('üî• –°–ö–†–ê–ü–ò–ù–ì –í–ò–†–£–°–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê (50K+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, 30 –¥–Ω–µ–π)...');

  const APIFY_TOKEN = process.env.APIFY_TOKEN;
  if (!APIFY_TOKEN) {
    throw new Error('APIFY_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const activeCompetitors = await db
      .select()
      .from(schema.competitorsTable)
      .where(eq(schema.competitorsTable.is_active, true));

    logger.info(`üè¢ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${activeCompetitors.length}`);

    let totalScraped = 0;

    // –°–∫—Ä–∞–ø–∏–º –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
    for (const competitor of activeCompetitors) {
      logger.info(`üîç –°–∫—Ä–∞–ø–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞: ${competitor.username}`);

      try {
        const reelsAdded = await scrapeInstagramReels(
          db,
          competitor.project_id,
          "competitor",
          competitor.id,
          competitor.profile_url,
          {
            limit: 100, // –ë–æ–ª—å—à–µ –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
            apifyToken: APIFY_TOKEN,
            minViews: 50000, // –¢–æ–ª—å–∫–æ –≤–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            maxAgeDays: 30   // –¢–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
          }
        );

        totalScraped += reelsAdded;
        logger.info(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${reelsAdded} –≤–∏—Ä—É—Å–Ω—ã—Ö Reels –¥–ª—è ${competitor.username}`);

        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 5000));

      } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ ${competitor.username}:`, error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–º
      }
    }

    logger.info(`üéâ –°–ö–†–ê–ü–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù! –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${totalScraped} –≤–∏—Ä—É—Å–Ω—ã—Ö Reels`);

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:', error);
    throw error;
  }
}

async function generateStatistics(db: NeonDB): Promise<void> {
  logger.info('üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò...');

  try {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
    const viewsStats = await db
      .select({
        total: sql<number>`count(*)`,
        viral50k: sql<number>`count(*) filter (where views_count >= 50000)`,
        viral100k: sql<number>`count(*) filter (where views_count >= 100000)`,
        avgViews: sql<number>`avg(views_count)`,
        maxViews: sql<number>`max(views_count)`
      })
      .from(schema.reelsTable);

    const stats = viewsStats[0];

    logger.info('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–°–ú–û–¢–†–û–í:');
    logger.info(`  üì• –í—Å–µ–≥–æ Reels: ${stats.total}`);
    logger.info(`  üî• 50K+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${stats.viral50k} (${Math.round((stats.viral50k / stats.total) * 100)}%)`);
    logger.info(`  üöÄ 100K+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${stats.viral100k} (${Math.round((stats.viral100k / stats.total) * 100)}%)`);
    logger.info(`  üìä –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${Math.round(stats.avgViews).toLocaleString()}`);
    logger.info(`  üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${stats.maxViews.toLocaleString()}`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º
    const competitorStats = await db
      .select({
        username: schema.competitorsTable.username,
        reelsCount: sql<number>`count(${schema.reelsTable.id})`,
        avgViews: sql<number>`avg(${schema.reelsTable.views_count})`,
        maxViews: sql<number>`max(${schema.reelsTable.views_count})`
      })
      .from(schema.competitorsTable)
      .leftJoin(schema.reelsTable, eq(schema.competitorsTable.id, schema.reelsTable.competitor_id))
      .groupBy(schema.competitorsTable.id, schema.competitorsTable.username)
      .having(sql`count(${schema.reelsTable.id}) > 0`)
      .orderBy(sql`avg(${schema.reelsTable.views_count}) desc`);

    logger.info('\nüè¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–û–ù–ö–£–†–ï–ù–¢–ê–ú:');
    competitorStats.forEach(comp => {
      logger.info(`  @${comp.username}: ${comp.reelsCount} Reels, ${Math.round(comp.avgViews || 0).toLocaleString()} —Å—Ä–µ–¥–Ω–∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

    const recentReels = await db
      .select({ count: sql<number>`count(*)` })
      .from(schema.reelsTable)
      .where(sql`created_at >= ${thirtyDaysAgo}`);

    const recentCount = recentReels[0].count;
    logger.info(`\n‚úÖ –°–≤–µ–∂–∏—Ö Reels (30 –¥–Ω–µ–π): ${recentCount}`);

    if (recentCount < 50) {
      logger.warn('‚ö†Ô∏è –ú–ê–õ–û –î–ê–ù–ù–´–•! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥');
    }

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    throw error;
  }
}

async function main(): Promise<void> {
  try {
    logger.info('üïâÔ∏è –ó–ê–ü–£–°–ö –û–ß–ò–°–¢–ö–ò –ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–•');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    await initializeDBConnection();
    const db = getDB();

    // 1. –û—á–∏—â–∞–µ–º –±–∞–∑—É –æ—Ç –º—É—Å–æ—Ä–∞
    await cleanDatabase(db);

    // 2. –°–∫—Ä–∞–ø–∏–º —Å–≤–µ–∂–∏–µ –≤–∏—Ä—É—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await scrapeViralContent(db);

    // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await generateStatistics(db);

    logger.info('\nüéâ –í–°–ï –ì–û–¢–û–í–û! –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤–µ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    logger.info('üìä –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');

  } catch (error) {
    logger.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}
