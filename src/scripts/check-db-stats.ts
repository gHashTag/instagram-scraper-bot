/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */

import dotenv from "dotenv";
import { initializeDBConnection } from "../db/neonDB";
import { reelsTable, competitorsTable, hashtagsTable } from "../db/schema";
import { sql } from "drizzle-orm";
import { logger } from "../logger";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function checkDBStats() {
  try {
    logger.info("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
    
    const db = initializeDBConnection();
    
    // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Reels
    const reelsCount = await db.select({ count: sql`count(*)` }).from(reelsTable);
    logger.info(`üé¨ –í—Å–µ–≥–æ Reels –≤ –±–∞–∑–µ: ${reelsCount[0].count}`);
    
    // –°—á–∏—Ç–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const competitorsCount = await db.select({ count: sql`count(*)` }).from(competitorsTable);
    logger.info(`üë• –í—Å–µ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${competitorsCount[0].count}`);
    
    // –°—á–∏—Ç–∞–µ–º —Ö—ç—à—Ç–µ–≥–∏
    const hashtagsCount = await db.select({ count: sql`count(*)` }).from(hashtagsTable);
    logger.info(`üè∑Ô∏è –í—Å–µ–≥–æ —Ö—ç—à—Ç–µ–≥–æ–≤: ${hashtagsCount[0].count}`);
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 Reels
    const recentReels = await db
      .select({
        id: reelsTable.id,
        author_username: reelsTable.author_username,
        views_count: reelsTable.views_count,
        created_at: reelsTable.created_at
      })
      .from(reelsTable)
      .orderBy(sql`created_at DESC`)
      .limit(5);
    
    logger.info(`üî• –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${recentReels.length} –∑–∞–ø–∏—Å–µ–π:`);
    recentReels.forEach((reel, i) => {
      logger.info(`  ${i+1}. @${reel.author_username} - ${reel.views_count} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (${reel.created_at})`);
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
    const viewsStats = await db
      .select({
        total_views: sql`sum(views_count)`,
        avg_views: sql`avg(views_count)`,
        max_views: sql`max(views_count)`,
        min_views: sql`min(views_count)`
      })
      .from(reelsTable);
    
    if (viewsStats[0].total_views) {
      logger.info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:");
      logger.info(`  –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${viewsStats[0].total_views}`);
      logger.info(`  –°—Ä–µ–¥–Ω–µ–µ: ${Math.round(Number(viewsStats[0].avg_views))}`);
      logger.info(`  –ú–∞–∫—Å–∏–º—É–º: ${viewsStats[0].max_views}`);
      logger.info(`  –ú–∏–Ω–∏–º—É–º: ${viewsStats[0].min_views}`);
    }
    
  } catch (error) {
    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
checkDBStats();
