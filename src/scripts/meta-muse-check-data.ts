#!/usr/bin/env bun

/**
 * üïâÔ∏è Meta Muse Data Check Script
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö Meta Muse –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

import { drizzle } from "drizzle-orm/neon-http";
import { neon } from "@neondatabase/serverless";
import { eq, and, count, desc } from "drizzle-orm";
import {
  usersTable,
  projectsTable,
  hashtagsTable,
  reelsTable,
} from "../db/schema";

// üîß Configuration
const PROJECT_ID = 2;

// üåê Initialize database
const sql = neon(process.env.DATABASE_URL!);
const db = drizzle(sql);

async function checkData(): Promise<void> {
  console.log("üïâÔ∏è Meta Muse Data Check - –ó–ê–ü–£–°–ö");
  console.log("‚ïê".repeat(50));
  console.log(`üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString()}`);
  console.log(`üÜî Project ID: ${PROJECT_ID}`);

  try {
    // 1. Check project
    console.log("\nüìä –ü–†–û–ï–ö–¢:");
    const [project] = await db
      .select()
      .from(projectsTable)
      .where(eq(projectsTable.id, PROJECT_ID))
      .limit(1);

    if (project) {
      console.log(`‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: ${project.name}`);
      console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${project.description}`);
      console.log(`üè≠ –ò–Ω–¥—É—Å—Ç—Ä–∏—è: ${project.industry}`);
      console.log(`üîÑ –ê–∫—Ç–∏–≤–µ–Ω: ${project.is_active ? "–î–∞" : "–ù–µ—Ç"}`);
      console.log(`üìÖ –°–æ–∑–¥–∞–Ω: ${project.created_at}`);
    } else {
      console.log("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
    }

    // 2. Check hashtags
    console.log("\nüè∑Ô∏è –•–≠–®–¢–ï–ì–ò:");
    const hashtagsCount = await db
      .select({ count: count() })
      .from(hashtagsTable)
      .where(eq(hashtagsTable.project_id, PROJECT_ID));

    console.log(`üìä –í—Å–µ–≥–æ —Ö—ç—à—Ç–µ–≥–æ–≤: ${hashtagsCount[0].count}`);

    // Get active hashtags
    const activeHashtags = await db
      .select()
      .from(hashtagsTable)
      .where(
        and(
          eq(hashtagsTable.project_id, PROJECT_ID),
          eq(hashtagsTable.is_active, true)
        )
      );

    console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–æ–≤: ${activeHashtags.length}`);

    // Show some hashtags by category
    const categories = [
      "basic",
      "ai_influencers",
      "metaverse_tech",
      "archetype_muse_magician_seer",
      "psycho_emotional_awakened_creators",
      "philosophy_spirit_tech",
    ];

    for (const category of categories) {
      const categoryHashtags = activeHashtags.filter((h) =>
        h.notes?.includes(category)
      );
      console.log(`   üìÇ ${category}: ${categoryHashtags.length} —Ö—ç—à—Ç–µ–≥–æ–≤`);
    }

    // 3. Check reels
    console.log("\nüì± –†–ò–õ–°–´:");
    const reelsCount = await db
      .select({ count: count() })
      .from(reelsTable)
      .where(eq(reelsTable.project_id, PROJECT_ID));

    console.log(`üìä –í—Å–µ–≥–æ —Ä–∏–ª—Å–æ–≤: ${reelsCount[0].count}`);

    // Get reels by source
    const reelsBySource = await db
      .select({
        source: reelsTable.source_identifier,
        count: count(),
      })
      .from(reelsTable)
      .where(eq(reelsTable.project_id, PROJECT_ID))
      .groupBy(reelsTable.source_identifier)
      .orderBy(desc(count()));

    console.log("\nüìà –†–∏–ª—Å—ã –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º (—Ç–æ–ø 10):");
    reelsBySource.slice(0, 10).forEach((item, index) => {
      console.log(`${index + 1}. ${item.source}: ${item.count} —Ä–∏–ª—Å–æ–≤`);
    });

    // 4. Check transcriptions
    console.log("\nüé§ –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–Ø:");
    const transcribedCount = await db
      .select({ count: count() })
      .from(reelsTable)
      .where(
        and(
          eq(reelsTable.project_id, PROJECT_ID)
          // transcript is not null
        )
      );

    console.log(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∏–ª—Å–æ–≤: ${transcribedCount[0].count}`);

    // 5. Recent reels
    console.log("\nüìÖ –ü–û–°–õ–ï–î–ù–ò–ï –†–ò–õ–°–´:");
    const recentReels = await db
      .select({
        id: reelsTable.id,
        url: reelsTable.reel_url,
        author: reelsTable.author_username,
        hashtag: reelsTable.source_identifier,
        likes: reelsTable.likes_count,
        views: reelsTable.views_count,
        created: reelsTable.created_at,
      })
      .from(reelsTable)
      .where(eq(reelsTable.project_id, PROJECT_ID))
      .orderBy(desc(reelsTable.created_at))
      .limit(5);

    recentReels.forEach((reel, index) => {
      console.log(`${index + 1}. ID: ${reel.id}`);
      console.log(`   üë§ –ê–≤—Ç–æ—Ä: ${reel.author}`);
      console.log(`   üè∑Ô∏è –•—ç—à—Ç–µ–≥: ${reel.hashtag}`);
      console.log(`   ‚ù§Ô∏è –õ–∞–π–∫–∏: ${reel.likes}`);
      console.log(`   üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${reel.views}`);
      console.log(`   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: ${reel.created}`);
      console.log(`   üîó URL: ${reel.url}`);
      console.log("");
    });

    // 6. Statistics by hashtag categories
    console.log("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:");

    for (const category of categories) {
      const categoryHashtags = activeHashtags.filter((h) =>
        h.notes?.includes(category)
      );
      const hashtagNames = categoryHashtags.map((h) => h.tag_name);

      if (hashtagNames.length > 0) {
        let totalReels = 0;
        for (const hashtagName of hashtagNames) {
          const reelsForHashtag = await db
            .select({ count: count() })
            .from(reelsTable)
            .where(
              and(
                eq(reelsTable.project_id, PROJECT_ID),
                eq(reelsTable.source_identifier, hashtagName)
              )
            );
          totalReels += reelsForHashtag[0].count;
        }

        console.log(`üìÇ ${category}:`);
        console.log(`   üè∑Ô∏è –•—ç—à—Ç–µ–≥–æ–≤: ${categoryHashtags.length}`);
        console.log(`   üì± –†–∏–ª—Å–æ–≤: ${totalReels}`);
        console.log(
          `   üìä –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ —Ö—ç—à—Ç–µ–≥: ${Math.round(totalReels / categoryHashtags.length)}`
        );
      }
    }

    console.log("\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!");
    console.log("üéØ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!");
  } catch (error) {
    console.error("\nüí• –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò:", error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  checkData().catch(console.error);
}

export { checkData };
