/**
 * –¢–µ—Å—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ Instagram Hashtag Scraper
 */

import { ApifyClient } from "apify-client";
import dotenv from "dotenv";

dotenv.config();

const apifyToken = process.env.APIFY_TOKEN;

if (!apifyToken) {
  console.error("APIFY_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
  process.exit(1);
}

async function testOwnInstagramScraper() {
  console.log(`üé¨ –¢–µ—Å—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ Instagram Hashtag Scraper`);
  console.log(`üîë –¢–æ–∫–µ–Ω: ${apifyToken}`);

  const client = new ApifyClient({ token: apifyToken });

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º –∞–∫—Ç–æ—Ä–µ
    const actorId = "JvHF7SFfNQl9VZSpC"; // instagram-hashtag-scraper
    const actorInfo = await client.actor(actorId).get();

    console.log(`\nüìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ê–ö–¢–û–†–ï:`);
    console.log(`   ID: ${actorInfo.id}`);
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${actorInfo.name}`);
    console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${actorInfo.description || "–Ω–µ—Ç"}`);
    console.log(
      `   –í–µ—Ä—Å–∏—è: ${actorInfo.defaultRunOptions?.build || "default"}`
    );

    // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏
    const runs = await client.actor(actorId).runs().list({ limit: 5 });
    console.log(`\nüìä –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ü–£–°–ö–ò (${runs.items.length}):`);
    runs.items.forEach((run, i) => {
      console.log(`   ${i + 1}. ${run.id} - ${run.status} (${run.startedAt})`);
      if (run.stats?.inputBodyLen) {
        console.log(`      –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${run.stats.inputBodyLen} –±–∞–π—Ç`);
      }
      if (run.stats?.outputBodyLen) {
        console.log(`      –†–µ–∑—É–ª—å—Ç–∞—Ç: ${run.stats.outputBodyLen} –±–∞–π—Ç`);
      }
    });

    // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–∫—Ç–æ—Ä —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log(`\nüöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í–û–ì–û –°–ö–†–ê–ü–ò–ù–ì–ê:`);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π –º–µ–¥–∏—Ü–∏–Ω–æ–π - –ø–æ–ø—É–ª—è—Ä–Ω–æ–π —Ç–µ–º–æ–π
    const testInputs = [
      {
        name: "–≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞",
        hashtags: ["estheticmedicine", "skincare", "beautytreatment"],
        resultsLimit: 10,
      },
      {
        name: "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è",
        hashtags: ["medicalcosmetology", "cosmetology", "antiaging"],
        resultsLimit: 10,
      },
    ];

    for (const testInput of testInputs) {
      try {
        console.log(`\nüîç –¢–µ—Å—Ç: ${testInput.name}`);
        console.log(`   –•–µ—à—Ç–µ–≥–∏: ${testInput.hashtags.join(", ")}`);

        const run = await client.actor(actorId).call(
          {
            hashtags: testInput.hashtags,
            resultsLimit: testInput.resultsLimit,
            // –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫—Ç–æ—Ä–∞)
            includeReels: true,
            onlyReels: true,
            minViews: 1000,
          },
          {
            waitSecs: 60, // –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            memory: 512, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å
          }
        );

        console.log(`   ‚úÖ –ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: ${run.id}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${run.status}`);

        if (run.status === "SUCCEEDED") {
          // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          const { items } = await client
            .dataset(run.defaultDatasetId)
            .listItems();
          console.log(`   üìä –ü–æ–ª—É—á–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${items.length}`);

          if (items.length > 0) {
            console.log(`\nüé¨ –ü–†–ò–ú–ï–†–´ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:`);
            items.slice(0, 3).forEach((item, i) => {
              console.log(
                `   ${i + 1}. ${item.url || item.shortCode || item.id}`
              );
              console.log(
                `      –¢–∏–ø: ${item.type || item.productType || "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"}`
              );
              console.log(`      –õ–∞–π–∫–∏: ${item.likesCount || "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"}`);
              console.log(
                `      –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${item.videoViewCount || item.playCount || "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"}`
              );
              console.log(`      –î–∞—Ç–∞: ${item.timestamp || "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}`);
              console.log(
                `      –û–ø–∏—Å–∞–Ω–∏–µ: ${item.caption ? item.caption.substring(0, 50) + "..." : "–Ω–µ—Ç"}`
              );
              console.log("");
            });

            // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Reels
            const reels = items.filter(
              (item) =>
                item.type === "ReelVideo" ||
                item.productType === "clips" ||
                item.url?.includes("/reel/")
            );

            console.log(`   üé¨ –ù–ê–ô–î–ï–ù–û REELS: ${reels.length}`);

            if (reels.length > 0) {
              console.log(`   üî• REELS –° –í–´–°–û–ö–ò–ú–ò –ü–†–û–°–ú–û–¢–†–ê–ú–ò:`);
              const viralReels = reels.filter((reel) => {
                const views =
                  reel.videoViewCount || reel.playCount || reel.likesCount || 0;
                return views >= 5000;
              });
              console.log(
                `      –í—Å–µ–≥–æ –≤–∏—Ä—É—Å–Ω—ã—Ö reels (5K+): ${viralReels.length}`
              );
            }
          }
        } else {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${run.status}`);
          if (run.statusMessage) {
            console.log(`      –°–æ–æ–±—â–µ–Ω–∏–µ: ${run.statusMessage}`);
          }
        }
      } catch (testError) {
        console.log(
          `   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ "${testInput.name}": ${testError.message}`
        );
      }
    }
  } catch (error) {
    console.error(`‚ùå –û–®–ò–ë–ö–ê:`, error.message);
  }
}

testOwnInstagramScraper().catch(console.error);
