#!/usr/bin/env bun

/**
 * üê≠ Meta Muse Daily Runner
 * –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */

import { execSync } from "child_process";
import { writeFileSync, existsSync, mkdirSync } from "fs";
import { join } from "path";

// üîß Configuration
const LOG_DIR = "logs";
const PROJECT_ID = 2;

// üìÖ Create log directory if it doesn't exist
if (!existsSync(LOG_DIR)) {
  mkdirSync(LOG_DIR, { recursive: true });
}

// üìù Setup logging
const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
const logFile = join(LOG_DIR, `meta-muse-daily-${timestamp}.log`);

function log(message: string): void {
  const timestampedMessage = `[${new Date().toISOString()}] ${message}`;
  console.log(timestampedMessage);

  // Append to log file
  try {
    writeFileSync(logFile, timestampedMessage + "\n", { flag: "a" });
  } catch (error) {
    console.error("Failed to write to log file:", error);
  }
}

async function runDailyMeta(): Promise<void> {
  log("üê≠ Meta Muse Daily Runner - –ó–ê–ü–£–°–ö");
  log("‚ïê".repeat(50));
  log(`üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString()}`);
  log(`üÜî Project ID: ${PROJECT_ID}`);
  log(`üìù –õ–æ–≥ —Ñ–∞–π–ª: ${logFile}`);

  try {
    // 1. Check environment
    log("\nüîç –ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø:");

    const requiredEnvVars = ["DATABASE_URL", "APIFY_TOKEN", "OPENAI_API_KEY"];
    for (const envVar of requiredEnvVars) {
      if (process.env[envVar]) {
        log(`‚úÖ ${envVar}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
      } else {
        throw new Error(`‚ùå ${envVar}: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
      }
    }

    // 2. Run database migrations
    log("\nüóÑÔ∏è –ú–ò–ì–†–ê–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•:");
    try {
      execSync("bun run db:migrate", { stdio: "pipe" });
      log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
    } catch (error) {
      log(`‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏–∏: ${error}`);
      // Continue anyway, migrations might not be needed
    }

    // 3. Run type check
    log("\nüîç –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–û–í:");
    try {
      execSync("bun run typecheck", { stdio: "pipe" });
      log("‚úÖ –¢–∏–ø—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∏ —Ç–∏–ø–æ–≤: ${error}`);
      throw new Error("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞");
    }

    // 4. Run Meta Muse scraping
    log("\nüê≠ –ó–ê–ü–£–°–ö META MUSE –°–ö–†–ê–ü–ò–ù–ì–ê:");
    log("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 3 —á–∞—Å–æ–≤)...");

    const startTime = Date.now();

    try {
      const output = execSync("bun run meta-muse:scrape", {
        stdio: "pipe",
        encoding: "utf8",
        timeout: 3 * 60 * 60 * 1000, // 3 hours timeout
      });

      const endTime = Date.now();
      const duration = Math.round((endTime - startTime) / 1000 / 60); // minutes

      log(`‚úÖ –°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration} –º–∏–Ω—É—Ç`);
      log("üìä –í—ã–≤–æ–¥ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:");
      log(output);
    } catch (error: any) {
      const endTime = Date.now();
      const duration = Math.round((endTime - startTime) / 1000 / 60);

      log(`‚ùå –°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π –ø–æ—Å–ª–µ ${duration} –º–∏–Ω—É—Ç`);
      log(`–û—à–∏–±–∫–∞: ${error.message}`);

      if (error.stdout) {
        log("üìä –ß–∞—Å—Ç–∏—á–Ω—ã–π –≤—ã–≤–æ–¥:");
        log(error.stdout);
      }

      throw error;
    }

    // 5. Generate data report
    log("\nüìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê:");
    try {
      const reportOutput = execSync("bun run meta-muse:check", {
        stdio: "pipe",
        encoding: "utf8",
      });

      log("‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:");
      log(reportOutput);

      // Save report to file
      const reportFile = join(LOG_DIR, `meta-muse-report-${timestamp}.txt`);
      writeFileSync(reportFile, reportOutput);
      log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportFile}`);
    } catch (error) {
      log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: ${error}`);
      // Continue anyway
    }

    // 6. Success summary
    log("\nüéâ –£–°–ü–ï–®–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï!");
    log("‚úÖ –í—Å–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
    log(`üìù –ü–æ–ª–Ω—ã–π –ª–æ–≥: ${logFile}`);
    log("üîÑ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞");
  } catch (error: any) {
    log("\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:");
    log(`‚ùå ${error.message}`);
    log(`üìù –ü–æ–ª–Ω—ã–π –ª–æ–≥ –æ—à–∏–±–∫–∏: ${logFile}`);

    // Exit with error code
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  runDailyMeta().catch((error) => {
    console.error("üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
    process.exit(1);
  });
}

export { runDailyMeta };
