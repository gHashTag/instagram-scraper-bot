/**
 * üîÑ –ü–û–õ–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–•
 *
 * 1. –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î
 * 2. –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ reels –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
 * 3. –ü–∞—Ä—Å–∏—Ç —Å–≤–µ–∂–∏–µ reels –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
 * 4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ reels –≤ Neon
 * 5. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç reels —Å –≤—ã—Å–æ–∫–∏–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * bun run src/scripts/full-refresh-strategy.ts [min_views] [max_reels_per_competitor] [max_transcribe]
 *
 * –ü—Ä–∏–º–µ—Ä:
 * bun run src/scripts/full-refresh-strategy.ts 50000 50 10
 */

import { ApifyClient } from "apify-client";
import { initializeDBConnection, getDB } from "../db/neonDB";
import { competitorsTable, reelsTable } from "../db/schema";
import { eq, and, gte, desc } from "drizzle-orm";
import dotenv from "dotenv";
import * as fs from "fs";
import * as path from "path";
import { exec } from "child_process";
import { promisify } from "util";
import OpenAI from "openai";

dotenv.config();

// –ü—Ä–æ–º–∏—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º exec
const execAsync = promisify(exec);

const apifyToken = process.env.APIFY_TOKEN;
const projectId = parseInt(process.env.DEFAULT_PROJECT_ID || "1");

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const minViews = parseInt(process.argv[2] || "0", 10); // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
const maxReelsPerCompetitor = parseInt(process.argv[3] || "1000", 10); // –ú–∞–∫—Å–∏–º—É–º reels –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ (1000 = –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ –ª–∏–º–∏—Ç–∞)
const maxTranscribeReels = parseInt(process.argv[4] || "1000", 10); // –ú–∞–∫—Å–∏–º—É–º reels –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ (1000 = –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ –ª–∏–º–∏—Ç–∞)

console.log("üîß –ü–ê–†–ê–ú–ï–¢–†–´ –ó–ê–ü–£–°–ö–ê:");
console.log(
  `   üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: ${minViews.toLocaleString()}`
);
console.log(
  `   üé¨ –ú–∞–∫—Å–∏–º—É–º reels –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞: ${maxReelsPerCompetitor === 1000 ? "–ë–ï–ó –õ–ò–ú–ò–¢–ê" : maxReelsPerCompetitor}`
);
console.log(
  `   üé§ –ú–∞–∫—Å–∏–º—É–º reels –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: ${maxTranscribeReels === 1000 ? "–í–°–ï –ü–û–î–•–û–î–Ø–©–ò–ï" : maxTranscribeReels}`
);
console.log("");

if (!apifyToken) {
  console.error("‚ùå APIFY_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
if (!OPENAI_API_KEY) {
  console.log("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞");
}

const openai = OPENAI_API_KEY ? new OpenAI({ apiKey: OPENAI_API_KEY }) : null;

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const tempDir = path.join(process.cwd(), "temp");
const videosDir = path.join(tempDir, "videos");
const audioDir = path.join(tempDir, "audio");

[tempDir, videosDir, audioDir].forEach((dir) => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
initializeDBConnection();
const db = getDB();

// –ú–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö reels
const newlyAddedReels: Array<{
  id: number;
  url: string;
  author: string;
  views: number;
}> = [];

interface Competitor {
  id: number;
  username: string;
  instagram_url: string;
  project_id: number;
}

interface InstagramReel {
  id: string;
  shortCode: string;
  url: string;
  caption?: string;
  hashtags?: string;
  likesCount: number;
  videoPlayCount: number;
  commentsCount: number;
  timestamp: string;
  ownerUsername: string;
  videoUrl: string;
  displayUrl: string;
  videoDuration?: number;
  productType: string;
}

async function getCompetitorsFromDB(): Promise<Competitor[]> {
  console.log("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

  const competitors = await db
    .select()
    .from(competitorsTable)
    .where(eq(competitorsTable.project_id, projectId));

  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${competitors.length}`);
  competitors.forEach((comp, index) => {
    console.log(`   ${index + 1}. @${comp.username} (ID: ${comp.id})`);
  });

  return competitors.map((comp) => ({
    id: comp.id,
    username: comp.username,
    instagram_url: comp.profile_url,
    project_id: comp.project_id,
  }));
}

async function clearOldReelsForCompetitors(): Promise<void> {
  console.log("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö reels –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...");

  const result = await db
    .delete(reelsTable)
    .where(
      and(
        eq(reelsTable.project_id, projectId),
        eq(reelsTable.source_type, "competitor")
      )
    );

  console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö reels: ${result.rowCount || 0}`);
}

async function scrapeCompetitorReels(competitor: Competitor): Promise<any[]> {
  console.log(`üé¨ –°–∫—Ä–∞–ø–∏–Ω–≥ —Ä–µ–∫–ª–æ–≤ –¥–ª—è: @${competitor.username}`);

  const client = new ApifyClient({ token: apifyToken });

  try {
    const input = {
      username: [competitor.username],
      resultsLimit: maxReelsPerCompetitor,
    };

    const run = await client.actor("xMc5Ga1oCONPmWJIa").call(input);
    const { items } = await client.dataset(run.defaultDatasetId).listItems();

    console.log(`   üìä –ü–æ–ª—É—á–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${items.length}`);

    if (items.length === 0) {
      console.log(`   ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è @${competitor.username}`);
      return [];
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–ø-3
    const sortedByViews = items
      .filter((item: any) => item.videoPlayCount > 0)
      .sort((a: any, b: any) => b.videoPlayCount - a.videoPlayCount);

    if (sortedByViews.length > 0) {
      console.log(`üî• –¢–û–ü-3 REELS –æ—Ç @${competitor.username}:`);
      sortedByViews.slice(0, 3).forEach((item: any, index: number) => {
        console.log(
          `   ${index + 1}. ${item.videoPlayCount.toLocaleString()} –ø—Ä–æ—Å–º. - ${item.shortCode}`
        );
      });

      const viralCount = sortedByViews.filter(
        (item: any) => item.videoPlayCount >= minViews
      ).length;
      console.log(
        `üåü VIRAL CONTENT (${minViews.toLocaleString()}+): ${viralCount} –∏–∑ ${items.length}`
      );
    }

    return items;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –¥–ª—è @${competitor.username}:`, error);
    return [];
  }
}

async function saveReelsToDB(
  reels: any[],
  competitorId: number
): Promise<number> {
  let savedCount = 0;

  for (const reel of reels) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç reel
      const existingReel = await db
        .select()
        .from(reelsTable)
        .where(eq(reelsTable.reel_url, reel.url))
        .limit(1);

      if (existingReel.length > 0) {
        console.log(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): ${reel.shortCode}`);
        continue;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π reel
      const insertResult = await db
        .insert(reelsTable)
        .values({
          reel_url: reel.url,
          project_id: projectId,
          source_type: "competitor",
          source_identifier: competitorId.toString(),
          profile_url: `https://instagram.com/${reel.ownerUsername}`,
          author_username: reel.ownerUsername,
          description: reel.caption || "",
          views_count: reel.videoPlayCount || 0,
          likes_count: reel.likesCount || 0,
          comments_count: reel.commentsCount || 0,
          published_at: new Date(reel.timestamp),
          thumbnail_url: reel.displayUrl,
          video_download_url: reel.videoUrl,
          raw_data: JSON.stringify(reel),
        })
        .returning({ id: reelsTable.id });

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º reel –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
      if (insertResult.length > 0) {
        newlyAddedReels.push({
          id: insertResult[0].id,
          url: reel.url,
          author: reel.ownerUsername,
          views: reel.videoPlayCount || 0,
        });
      }

      console.log(
        `   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: ${reel.shortCode} (${reel.videoPlayCount?.toLocaleString() || 0} –ø—Ä–æ—Å–º.)`
      );
      savedCount++;
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${reel.shortCode}:`, error);
    }
  }

  return savedCount;
}

async function updateCompetitorTimestamp(competitorId: number): Promise<void> {
  await db
    .update(competitorsTable)
    .set({
      last_scraped_at: new Date(),
      updated_at: new Date(),
    })
    .where(eq(competitorsTable.id, competitorId));
}

// === –§–£–ù–ö–¶–ò–ò –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–ò ===

async function downloadVideo(url: string): Promise<string> {
  try {
    console.log(`üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: ${url}`);

    const timestamp = Date.now();
    const outputPath = path.join(videosDir, `reel_video_${timestamp}.mp4`);

    if (fs.existsSync(outputPath)) {
      console.log(`   üìÅ –í–∏–¥–µ–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${outputPath}`);
      return outputPath;
    }

    const command = `yt-dlp "${url}" -o "${outputPath}" --no-warnings`;
    await execAsync(command);

    if (!fs.existsSync(outputPath)) {
      throw new Error(`–§–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–∞—á–∞–Ω: ${outputPath}`);
    }

    console.log(`   ‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: ${outputPath}`);
    return outputPath;
  } catch (error) {
    console.error(`   ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: ${error}`);
    throw error;
  }
}

async function extractAudio(videoPath: string): Promise<string> {
  try {
    console.log(`üéµ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ...`);

    const videoFileName = path.basename(videoPath, path.extname(videoPath));
    const audioPath = path.join(audioDir, `${videoFileName}.mp3`);

    if (fs.existsSync(audioPath)) {
      console.log(`   üìÅ –ê—É–¥–∏–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${audioPath}`);
      return audioPath;
    }

    const command = `ffmpeg -i "${videoPath}" -vn -acodec mp3 -ar 16000 -ac 1 "${audioPath}" -y`;
    await execAsync(command);

    if (!fs.existsSync(audioPath)) {
      throw new Error(`–§–∞–π–ª –∞—É–¥–∏–æ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω: ${audioPath}`);
    }

    console.log(`   ‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: ${audioPath}`);
    return audioPath;
  } catch (error) {
    console.error(`   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: ${error}`);
    throw error;
  }
}

async function transcribeAudio(audioPath: string): Promise<string> {
  if (!openai) {
    throw new Error("OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
  }

  try {
    console.log(`üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ...`);

    if (!fs.existsSync(audioPath)) {
      throw new Error(`–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${audioPath}`);
    }

    const stats = fs.statSync(audioPath);
    if (stats.size === 0) {
      throw new Error(`–ê—É–¥–∏–æ—Ñ–∞–π–ª –ø—É—Å—Ç–æ–π: ${audioPath}`);
    }

    const fileStream = fs.createReadStream(audioPath);
    const transcription = await openai.audio.transcriptions.create({
      file: fileStream,
      model: "whisper-1",
    });

    console.log(
      `   ‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ (${transcription.text.length} —Å–∏–º–≤–æ–ª–æ–≤)`
    );
    return transcription.text;
  } catch (error) {
    console.error(`   ‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: ${error}`);
    throw error;
  }
}

async function cleanupFiles(filePaths: string[]): Promise<void> {
  for (const filePath of filePaths) {
    try {
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
        console.log(`   üóëÔ∏è –£–¥–∞–ª–µ–Ω: ${path.basename(filePath)}`);
      }
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${filePath}: ${error}`);
    }
  }
}

async function transcribeNewReels(): Promise<void> {
  if (!openai) {
    console.log("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ - OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  console.log(`üé§ –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–Ø –ù–û–í–´–• REELS`);

  if (newlyAddedReels.length === 0) {
    console.log("üìù –ù–µ—Ç –Ω–æ–≤—ã—Ö reels –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏");
    return;
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º reels –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
  const reelsToTranscribe = newlyAddedReels
    .filter((reel) => reel.views >= minViews)
    .sort((a, b) => b.views - a.views)
    .slice(0, maxTranscribeReels);

  console.log(`üìù –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö reels: ${newlyAddedReels.length}`);
  console.log(
    `üéØ Reels –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ (${minViews.toLocaleString()}+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤): ${reelsToTranscribe.length}`
  );

  if (reelsToTranscribe.length === 0) {
    console.log("‚ÑπÔ∏è –ù–µ—Ç reels –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏");
    return;
  }

  let transcribedCount = 0;

  for (let i = 0; i < reelsToTranscribe.length; i++) {
    const reelInfo = reelsToTranscribe[i];

    console.log(
      `\nüéØ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º ${i + 1}/${reelsToTranscribe.length}: @${reelInfo.author}`
    );
    console.log(`   üìä –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${reelInfo.views.toLocaleString()}`);
    console.log(`   üîó URL: ${reelInfo.url}`);

    try {
      // –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –ø–æ URL –∏–∑ Instagram
      const videoPath = await downloadVideo(reelInfo.url);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
      const audioPath = await extractAudio(videoPath);

      // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
      const transcription = await transcribeAudio(audioPath);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await db
        .update(reelsTable)
        .set({
          transcript: transcription,
          updated_at: new Date(),
        })
        .where(eq(reelsTable.id, reelInfo.id));

      console.log(`   ‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î`);
      console.log(
        `   üìù –¢–µ–∫—Å—Ç: "${transcription.slice(0, 100)}${transcription.length > 100 ? "..." : ""}"`
      );
      transcribedCount++;

      // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      await cleanupFiles([audioPath]);

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
      if (i < reelsToTranscribe.length - 1) {
        console.log("   ‚è∏Ô∏è –ü–∞—É–∑–∞ 3 —Å–µ–∫...");
        await new Promise((resolve) => setTimeout(resolve, 3000));
      }
    } catch (error) {
      console.error(
        `   ‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ reel ID ${reelInfo.id}: ${error}`
      );
    }
  }

  console.log(
    `\nüéâ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${transcribedCount}/${reelsToTranscribe.length} —É—Å–ø–µ—à–Ω–æ`
  );
}

async function main() {
  console.log("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –°–¢–†–ê–¢–ï–ì–ò–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–•");
  console.log("=".repeat(50));
  console.log(`üìã –ü—Ä–æ–µ–∫—Ç ID: ${projectId}`);
  console.log(
    `üîë –¢–æ–∫–µ–Ω: ${apifyToken ? `${apifyToken.substring(0, 20)}...` : "–ù–ï –ù–ê–ô–î–ï–ù"}`
  );
  console.log(`ü§ñ –ü–∞—Ä—Å–µ—Ä: xMc5Ga1oCONPmWJIa (Instagram Reel Scraper)`);
  console.log("");

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î
    const competitors = await getCompetitorsFromDB();

    if (competitors.length === 0) {
      console.log("‚ùå –ù–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!");
      process.exit(1);
    }

    // 2. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ reels –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    await clearOldReelsForCompetitors();

    // 3. –ü–∞—Ä—Å–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ reels –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
    let totalScraped = 0;
    let totalSaved = 0;

    for (const competitor of competitors) {
      console.log(
        `\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: @${competitor.username} (ID: ${competitor.id})`
      );

      const reels = await scrapeCompetitorReels(competitor);
      totalScraped += reels.length;

      if (reels.length > 0) {
        const savedCount = await saveReelsToDB(reels, competitor.id);
        totalSaved += savedCount;
        console.log(`   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${savedCount} –Ω–æ–≤—ã—Ö reels —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
      await updateCompetitorTimestamp(competitor.id);

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏
      await new Promise((resolve) => setTimeout(resolve, 2000));
    }

    // 4. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –Ω–æ–≤—ã—Ö reels
    console.log("\n" + "=".repeat(50));
    await transcribeNewReels();

    // 5. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log("\nüéâ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:");
    console.log(`   üìä –í—Å–µ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${competitors.length}`);
    console.log(`   üé¨ –í—Å–µ–≥–æ reels –ø–æ–ª—É—á–µ–Ω–æ: ${totalScraped}`);
    console.log(`   üíæ –í—Å–µ–≥–æ reels —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${totalSaved}`);
    console.log(
      `   üåü –ì–æ—Ç–æ–≤–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ viral content (${minViews.toLocaleString()}+)!`
    );
    console.log("");
    console.log("‚úÖ –ü–æ–ª–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().catch(console.error);
