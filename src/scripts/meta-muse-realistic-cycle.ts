#!/usr/bin/env bun

/**
 * üê≠ Meta Muse Realistic Cycle - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
 * –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */

import { ApifyClient } from "apify-client";
import { db } from "../db/connection";
import {
  usersTable,
  projectsTable,
  hashtagsTable,
  reelsTable,
} from "../db/schema";
import { eq, and, gte, desc } from "drizzle-orm";
import { drizzle } from "drizzle-orm/neon-http";
import { neon } from "@neondatabase/serverless";

// üîß Configuration
const PROJECT_ID = 2;
const PROJECT_NAME = "Meta Muse";
const PROJECT_DESCRIPTION =
  "–ê–Ω–∏–º–µ –º—ã—à—å - AI-–∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä –ø—Ä–æ–µ–∫—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º 151 —Ö—ç—à—Ç–µ–≥–∞ –≤ 6 –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö";

// üéØ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –§–ò–õ–¨–¢–†–´
const MIN_VIEWS = 10000; // –ú–∏–Ω–∏–º—É–º 10K –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ)
const DAYS_BACK = 30; // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π (–±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
const MONTH_AGO = new Date(Date.now() - DAYS_BACK * 24 * 60 * 60 * 1000);

// ‚è±Ô∏è Timeouts and delays
const SCRAPING_TIMEOUT = 2 * 60 * 1000; // 2 minutes per hashtag
const HASHTAG_DELAY = 3000; // 3 seconds between hashtags
const BATCH_DELAY = 10000; // 10 seconds between batches
const MAX_RETRIES = 2;

// üåê Initialize services
const sql = neon(process.env.DATABASE_URL!);
const db = drizzle(sql);
const apifyClient = new ApifyClient({ token: process.env.APIFY_TOKEN! });

// üìä Statistics tracking
interface Stats {
  projectInitialized: boolean;
  hashtagsAdded: number;
  hashtagsSkipped: number;
  hashtagsScraped: number;
  hashtagsFailed: number;
  reelsFound: number;
  reelsFiltered: number;
  reelsSaved: number;
  videosTranscribed: number;
  errors: string[];
  timeouts: string[];
}

const stats: Stats = {
  projectInitialized: false,
  hashtagsAdded: 0,
  hashtagsSkipped: 0,
  hashtagsScraped: 0,
  hashtagsFailed: 0,
  reelsFound: 0,
  reelsFiltered: 0,
  reelsSaved: 0,
  videosTranscribed: 0,
  errors: [],
  timeouts: [],
};

// üè∑Ô∏è Meta Muse Hashtags (151 total) - —Ç–æ–ª—å–∫–æ —Ç–æ–ø —Ö—ç—à—Ç–µ–≥–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
const META_MUSE_HASHTAGS = {
  basic: ["#anime", "#future", "#AI"],
  ai_influencers: ["#AIInfluencer", "#VirtualInfluencer", "#AndroidInfluencer"],
  metaverse_tech: ["#metaverse", "#VR", "#blockchain"],
};

// üéØ Step 1: Initialize Project and Hashtags
async function initializeProject(): Promise<void> {
  console.log("\nüïâÔ∏è STEP 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ö—ç—à—Ç–µ–≥–æ–≤");
  console.log("‚ïê".repeat(50));

  try {
    // Get first user
    const [user] = await db.select().from(usersTable).limit(1);
    if (!user) {
      throw new Error("No users found in database");
    }

    // Check if project exists
    const [existingProject] = await db
      .select()
      .from(projectsTable)
      .where(eq(projectsTable.id, PROJECT_ID))
      .limit(1);

    if (!existingProject) {
      // Create project
      await db.insert(projectsTable).values({
        id: PROJECT_ID,
        user_id: user.id,
        name: PROJECT_NAME,
        description: PROJECT_DESCRIPTION,
        industry: "AI & Digital Influencers",
        is_active: true,
        created_at: new Date(),
        updated_at: new Date(),
      });
      console.log(`üìä –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç: ${PROJECT_NAME} (ID: ${PROJECT_ID})`);
      stats.projectInitialized = true;
    } else {
      console.log(
        `üìä –ü—Ä–æ–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${PROJECT_NAME} (ID: ${PROJECT_ID})`
      );
    }

    // Add hashtags
    console.log("\nüè∑Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:");

    for (const [category, hashtags] of Object.entries(META_MUSE_HASHTAGS)) {
      console.log(`\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category} (${hashtags.length} —Ö—ç—à—Ç–µ–≥–æ–≤)`);

      for (const hashtag of hashtags) {
        try {
          // Check if hashtag already exists
          const [existing] = await db
            .select()
            .from(hashtagsTable)
            .where(
              and(
                eq(hashtagsTable.project_id, PROJECT_ID),
                eq(hashtagsTable.tag_name, hashtag)
              )
            )
            .limit(1);

          if (!existing) {
            await db.insert(hashtagsTable).values({
              project_id: PROJECT_ID,
              tag_name: hashtag,
              notes: `Meta Muse category: ${category}`,
              is_active: true,
              created_at: new Date(),
              updated_at: new Date(),
            });
            stats.hashtagsAdded++;
          } else {
            stats.hashtagsSkipped++;
          }
        } catch (error) {
          const errorMsg = `–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö—ç—à—Ç–µ–≥–∞ ${hashtag}: ${error}`;
          console.error(`   ‚ùå ${errorMsg}`);
          stats.errors.push(errorMsg);
        }
      }
    }

    console.log(`\n‚úÖ –•—ç—à—Ç–µ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:`);
    console.log(`   üìä –î–æ–±–∞–≤–ª–µ–Ω–æ: ${stats.hashtagsAdded}`);
    console.log(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${stats.hashtagsSkipped}`);
  } catch (error) {
    const errorMsg = `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: ${error}`;
    console.error(`‚ùå ${errorMsg}`);
    stats.errors.push(errorMsg);
    throw error;
  }
}

// ‚è±Ô∏è Timeout wrapper
async function withTimeout<T>(
  promise: Promise<T>,
  timeoutMs: number,
  timeoutMessage: string
): Promise<T> {
  const timeoutPromise = new Promise<never>((_, reject) =>
    setTimeout(() => reject(new Error(`–¢–∞–π–º–∞—É—Ç: ${timeoutMessage}`)), timeoutMs)
  );
  return Promise.race([promise, timeoutPromise]);
}

// üéØ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
function passesRealisticFilter(item: any): boolean {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
  const views = (item.viewsCount as number) || 0;
  if (views > 0 && views < MIN_VIEWS) {
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (item.timestamp) {
    const postDate = new Date(item.timestamp as string);
    if (postDate < MONTH_AGO) {
      return false;
    }
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö, –Ω–æ –µ—Å—Ç—å –ª–∞–π–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
  const likes = (item.likesCount as number) || 0;
  if (views === 0 && likes > 0) {
    // –ü—Ä–∏–º–µ—Ä–Ω–æ 1 –ª–∞–π–∫ –Ω–∞ 100 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    const estimatedViews = likes * 100;
    return estimatedViews >= MIN_VIEWS;
  }

  // –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–ª—É—á—à–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å)
  return views === 0 && likes === 0;
}

// üîÑ Step 2: Realistic Instagram Scraping
async function realisticScrapeInstagram(): Promise<void> {
  console.log("\nüïâÔ∏è STEP 2: –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å–∫—Ä–µ–ø–∏–Ω–≥ Instagram");
  console.log("‚ïê".repeat(50));
  console.log(`üéØ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –§–ò–õ–¨–¢–†–´:`);
  console.log(
    `   üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${DAYS_BACK} –¥–Ω–µ–π (—Å ${MONTH_AGO.toLocaleDateString()})`
  );
  console.log(`   üëÄ –ú–∏–Ω–∏–º—É–º ${MIN_VIEWS.toLocaleString()} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`);

  try {
    // Get all active hashtags for this project
    const projectHashtags = await db
      .select()
      .from(hashtagsTable)
      .where(
        and(
          eq(hashtagsTable.project_id, PROJECT_ID),
          eq(hashtagsTable.is_active, true)
        )
      );

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${projectHashtags.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–æ–≤`);

    // Process hashtags in batches
    const BATCH_SIZE = 2; // –£–º–µ–Ω—å—à–∏–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const batches = [];
    for (let i = 0; i < projectHashtags.length; i += BATCH_SIZE) {
      batches.push(projectHashtags.slice(i, i + BATCH_SIZE));
    }

    console.log(
      `üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ ${batches.length} –±–∞—Ç—á–∞—Ö –ø–æ ${BATCH_SIZE} —Ö—ç—à—Ç–µ–≥–æ–≤`
    );

    for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {
      const batch = batches[batchIndex];
      console.log(`\nüì¶ –ë–∞—Ç—á ${batchIndex + 1}/${batches.length}`);

      for (const hashtag of batch) {
        let retryCount = 0;
        let success = false;

        while (retryCount <= MAX_RETRIES && !success) {
          try {
            const retryText =
              retryCount > 0 ? ` (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1})` : "";
            console.log(`\nüè∑Ô∏è –°–∫—Ä–µ–ø–∏–Ω–≥: ${hashtag.tag_name}${retryText}`);

            // Run Apify scraper with timeout
            const scrapePromise = apifyClient
              .actor("apify/instagram-hashtag-scraper")
              .call({
                hashtags: [hashtag.tag_name.replace("#", "")],
                resultsLimit: 30, // –£–≤–µ–ª–∏—á–∏–ª –¥–ª—è –ª—É—á—à–µ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                addParentData: false,
              });

            const run = await withTimeout(
              scrapePromise,
              SCRAPING_TIMEOUT,
              `–¢–∞–π–º–∞—É—Ç —Å–∫—Ä–µ–ø–∏–Ω–≥–∞ –¥–ª—è ${hashtag.tag_name}`
            );

            console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫—Ä–µ–ø–∏–Ω–≥–∞...`);

            // Get results with timeout
            const resultsPromise = apifyClient
              .dataset(run.defaultDatasetId)
              .listItems();

            const { items } = await withTimeout(
              resultsPromise,
              SCRAPING_TIMEOUT,
              `–¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è ${hashtag.tag_name}`
            );

            console.log(
              `üìä –ù–∞–π–¥–µ–Ω–æ ${items.length} –ø–æ—Å—Ç–æ–≤ –¥–ª—è ${hashtag.tag_name}`
            );
            stats.reelsFound += items.length;

            // üéØ APPLY REALISTIC FILTERS
            const filteredItems = items.filter(passesRealisticFilter);
            const filteredCount = items.length - filteredItems.length;
            stats.reelsFiltered += filteredCount;

            console.log(
              `üéØ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${filteredItems.length} –ø–æ—Å—Ç–æ–≤ (–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: ${filteredCount})`
            );

            if (filteredItems.length === 0) {
              console.log(`‚ö†Ô∏è –ù–µ—Ç –ø–æ—Å—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∫–∞—á–µ—Å—Ç–≤–∞`);
              stats.hashtagsScraped++;
              success = true;
              continue;
            }

            // Save filtered reels to database
            let savedCount = 0;
            for (const item of filteredItems) {
              try {
                // Check if reel already exists
                const [existing] = await db
                  .select()
                  .from(reelsTable)
                  .where(eq(reelsTable.reel_url, item.url as string))
                  .limit(1);

                if (!existing) {
                  await db.insert(reelsTable).values({
                    project_id: PROJECT_ID,
                    reel_url: item.url as string,
                    source_type: "hashtag",
                    source_identifier: hashtag.tag_name,
                    author_username: (item.ownerUsername as string) || "",
                    description: (item.caption as string) || "",
                    views_count: (item.viewsCount as number) || 0,
                    likes_count: (item.likesCount as number) || 0,
                    comments_count: (item.commentsCount as number) || 0,
                    published_at: item.timestamp
                      ? new Date(item.timestamp as string)
                      : null,
                    thumbnail_url: (item.displayUrl as string) || null,
                    video_download_url: (item.videoUrl as string) || null,
                    raw_data: item,
                    created_at: new Date(),
                    updated_at: new Date(),
                  });
                  savedCount++;
                }
              } catch (error) {
                const errorMsg = `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞ ${item.id}: ${error}`;
                console.error(`   ‚ùå ${errorMsg}`);
                stats.errors.push(errorMsg);
              }
            }

            console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedCount} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤`);
            stats.reelsSaved += savedCount;
            stats.hashtagsScraped++;

            // Update hashtag last scraped time
            await db
              .update(hashtagsTable)
              .set({
                last_scraped_at: new Date(),
                updated_at: new Date(),
              })
              .where(eq(hashtagsTable.id, hashtag.id));

            success = true;
          } catch (error) {
            retryCount++;
            const errorMsg = `–û—à–∏–±–∫–∞ —Å–∫—Ä–µ–ø–∏–Ω–≥–∞ ${hashtag.tag_name} (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount}): ${error}`;
            console.error(`‚ùå ${errorMsg}`);

            if ((error as Error).message.includes("–¢–∞–π–º–∞—É—Ç")) {
              stats.timeouts.push(hashtag.tag_name);
            }

            if (retryCount > MAX_RETRIES) {
              stats.errors.push(errorMsg);
              stats.hashtagsFailed++;
              console.error(
                `üí• –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è ${hashtag.tag_name}`
              );
            } else {
              console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...`);
              await new Promise((resolve) => setTimeout(resolve, 5000));
            }
          }
        }

        // Delay between hashtags
        if (success) {
          await new Promise((resolve) => setTimeout(resolve, HASHTAG_DELAY));
        }
      }

      // Longer delay between batches
      if (batchIndex < batches.length - 1) {
        console.log(`‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (${BATCH_DELAY / 1000} —Å–µ–∫)...`);
        await new Promise((resolve) => setTimeout(resolve, BATCH_DELAY));
      }
    }
  } catch (error) {
    const errorMsg = `–û—à–∏–±–∫–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Å–∫—Ä–µ–ø–∏–Ω–≥–∞: ${error}`;
    console.error(`‚ùå ${errorMsg}`);
    stats.errors.push(errorMsg);
    throw error;
  }
}

// üé§ Step 3: Transcribe Videos
async function transcribeVideos(): Promise<void> {
  console.log("\nüïâÔ∏è STEP 3: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ");
  console.log("‚ïê".repeat(50));

  try {
    // Get videos without transcription
    const videosToTranscribe = await db
      .select()
      .from(reelsTable)
      .where(
        and(
          eq(reelsTable.project_id, PROJECT_ID),
          isNull(reelsTable.transcript)
        )
      )
      .orderBy(desc(reelsTable.views_count))
      .limit(10); // –û–≥—Ä–∞–Ω–∏—á–∏–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    console.log(
      `üìä –ù–∞–π–¥–µ–Ω–æ ${videosToTranscribe.length} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏`
    );

    if (videosToTranscribe.length === 0) {
      console.log("‚úÖ –í—Å–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ —É–∂–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω—ã");
      return;
    }

    for (const video of videosToTranscribe) {
      try {
        console.log(`\nüé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è: ${video.author_username}`);
        console.log(`   üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${video.views_count?.toLocaleString()}`);
        console.log(`   üè∑Ô∏è –•—ç—à—Ç–µ–≥: ${video.source_identifier}`);

        // Simple transcription simulation
        const transcript = `[–ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô –ö–û–ù–¢–ï–ù–¢] –ê–≤—Ç–æ—Ä: ${video.author_username}. –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${video.views_count}. –û–ø–∏—Å–∞–Ω–∏–µ: ${video.description?.substring(0, 100)}...`;

        // Update with transcript
        await db
          .update(reelsTable)
          .set({
            transcript: transcript,
            updated_at: new Date(),
          })
          .where(eq(reelsTable.id, video.id));

        stats.videosTranscribed++;
        console.log(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ`);

        // Small delay
        await new Promise((resolve) => setTimeout(resolve, 1000));
      } catch (error) {
        const errorMsg = `–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤–∏–¥–µ–æ ${video.id}: ${error}`;
        console.error(`‚ùå ${errorMsg}`);
        stats.errors.push(errorMsg);
      }
    }
  } catch (error) {
    const errorMsg = `–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: ${error}`;
    console.error(`‚ùå ${errorMsg}`);
    stats.errors.push(errorMsg);
  }
}

// üìä Final Report
function printFinalReport(): void {
  console.log("\nüïâÔ∏è –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ Meta Muse Realistic Cycle");
  console.log("‚ïê".repeat(60));
  console.log(`üìÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${new Date().toLocaleString()}`);
  console.log(`üÜî Project ID: ${PROJECT_ID}`);

  console.log("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò:");
  console.log(
    `   üè∑Ô∏è –•—ç—à—Ç–µ–≥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.hashtagsScraped}/${stats.hashtagsScraped + stats.hashtagsFailed}`
  );
  console.log(`   üì± –ü–æ—Å—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${stats.reelsFound}`);
  console.log(`   üéØ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ (–Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ): ${stats.reelsFiltered}`);
  console.log(`   üíæ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${stats.reelsSaved}`);
  console.log(`   üé§ –í–∏–¥–µ–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ: ${stats.videosTranscribed}`);

  console.log("\nüéØ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –ö–†–ò–¢–ï–†–ò–ò:");
  console.log(`   üìÖ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${DAYS_BACK} –¥–Ω–µ–π`);
  console.log(`   üëÄ –ú–∏–Ω–∏–º—É–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${MIN_VIEWS.toLocaleString()}`);
  console.log(
    `   üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${stats.reelsFound > 0 ? Math.round((stats.reelsSaved / stats.reelsFound) * 100) : 0}%`
  );

  if (stats.timeouts.length > 0) {
    console.log(`\n‚è±Ô∏è –¢–ê–ô–ú–ê–£–¢–´ (${stats.timeouts.length}):`);
    stats.timeouts.forEach((hashtag) => console.log(`   ‚è∞ ${hashtag}`));
  }

  if (stats.errors.length > 0) {
    console.log(`\n‚ùå –û–®–ò–ë–ö–ò (${stats.errors.length}):`);
    stats.errors.slice(0, 3).forEach((error) => console.log(`   üí• ${error}`));
    if (stats.errors.length > 3) {
      console.log(`   ... –∏ –µ—â–µ ${stats.errors.length - 3} –æ—à–∏–±–æ–∫`);
    }
  }

  const successRate =
    (stats.hashtagsScraped / (stats.hashtagsScraped + stats.hashtagsFailed)) *
    100;
  console.log(`\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:`);
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round(successRate)}%`);
  console.log(`   üèÜ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: ${stats.reelsSaved} –ø–æ—Å—Ç–æ–≤`);
  console.log(`   üìà –ì–æ—Ç–æ–≤–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤!`);
}

// üöÄ Main execution
async function main(): Promise<void> {
  const startTime = Date.now();

  console.log("üê≠ Meta Muse Realistic Cycle - –ó–ê–ü–£–°–ö");
  console.log("‚ïê".repeat(60));
  console.log(`üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString()}`);
  console.log(
    `üéØ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: ${DAYS_BACK} –¥–Ω–µ–π + ${MIN_VIEWS.toLocaleString()} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`
  );

  try {
    await initializeProject();
    await realisticScrapeInstagram();
    await transcribeVideos();

    const duration = Math.round((Date.now() - startTime) / 1000 / 60);
    console.log(`\n‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} –º–∏–Ω—É—Ç`);

    printFinalReport();

    console.log("\nüéâ –£–°–ü–ï–®–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï!");
    console.log(
      "üê≠ Meta Muse —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!"
    );
  } catch (error) {
    console.error("\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:", error);
    printFinalReport();
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  main().catch(console.error);
}

export { main as runRealisticCycle };
