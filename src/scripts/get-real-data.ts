#!/usr/bin/env node

/**
 * üïâÔ∏è GET REAL DATA - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
 * 
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ —Ñ–µ–π–∫–æ–≤
 */

import { db } from '../db/connection';
import { instagramReels } from '../db/schema';
import { sql, desc, and, gte } from 'drizzle-orm';
import { logger } from '../logger';

interface RealDataSummary {
  totalPosts: number;
  viralPosts: number;
  avgViews: number;
  avgLikes: number;
  competitors: Array<{
    username: string;
    posts: number;
    topPost: {
      views: number;
      likes: number;
      description: string;
      date: string;
      url: string;
    };
    avgViews: number;
  }>;
  hashtags: Array<{
    tag: string;
    posts: number;
    avgViews: number;
    trend: 'up' | 'down' | 'stable';
  }>;
  dateRange: {
    from: string;
    to: string;
  };
}

async function getRealData(): Promise<RealDataSummary> {
  try {
    logger.info('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã...');

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü (2025 –≥–æ–¥)
    const oneMonthAgo = new Date();
    oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);
    
    const year2025Start = new Date('2025-01-01');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∑–∞ 2025 –≥–æ–¥
    const allPosts = await db
      .select()
      .from(instagramReels)
      .where(
        and(
          gte(instagramReels.createdAt, year2025Start),
          gte(instagramReels.viewCount, 1000) // –ú–∏–Ω–∏–º—É–º 1K –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        )
      )
      .orderBy(desc(instagramReels.viewCount));

    logger.info(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ: ${allPosts.length}`);

    if (allPosts.length === 0) {
      logger.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –∑–∞ 2025 –≥–æ–¥');
      return getEmptyData();
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∏—Ä—É—Å–Ω—ã–µ –ø–æ—Å—Ç—ã (50K+)
    const viralPosts = allPosts.filter(post => post.viewCount >= 50000);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const totalViews = allPosts.reduce((sum, post) => sum + post.viewCount, 0);
    const totalLikes = allPosts.reduce((sum, post) => sum + post.likeCount, 0);
    const avgViews = Math.round(totalViews / allPosts.length);
    const avgLikes = Math.round(totalLikes / allPosts.length);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const competitorData = await analyzeCompetitors(allPosts);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—ç—à—Ç–µ–≥–∏
    const hashtagData = await analyzeHashtags(allPosts);

    const result: RealDataSummary = {
      totalPosts: allPosts.length,
      viralPosts: viralPosts.length,
      avgViews,
      avgLikes,
      competitors: competitorData,
      hashtags: hashtagData,
      dateRange: {
        from: year2025Start.toISOString().split('T')[0],
        to: new Date().toISOString().split('T')[0]
      }
    };

    logger.info('‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    logger.info(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${result.totalPosts} –ø–æ—Å—Ç–æ–≤, ${result.viralPosts} –≤–∏—Ä—É—Å–Ω—ã—Ö, ${result.avgViews} —Å—Ä–µ–¥–Ω–∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`);

    return result;

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    return getEmptyData();
  }
}

async function analyzeCompetitors(posts: any[]): Promise<RealDataSummary['competitors']> {
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ username
  const competitorMap = new Map<string, any[]>();
  
  posts.forEach(post => {
    if (post.username) {
      if (!competitorMap.has(post.username)) {
        competitorMap.set(post.username, []);
      }
      competitorMap.get(post.username)!.push(post);
    }
  });

  const competitors: RealDataSummary['competitors'] = [];

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
  for (const [username, userPosts] of competitorMap.entries()) {
    if (userPosts.length >= 3) { // –ú–∏–Ω–∏–º—É–º 3 –ø–æ—Å—Ç–∞
      // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –ø–æ—Å—Ç
      const topPost = userPosts.reduce((best, current) => 
        current.viewCount > best.viewCount ? current : best
      );

      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
      const totalViews = userPosts.reduce((sum, post) => sum + post.viewCount, 0);
      const avgViews = Math.round(totalViews / userPosts.length);

      competitors.push({
        username,
        posts: userPosts.length,
        topPost: {
          views: topPost.viewCount,
          likes: topPost.likeCount,
          description: topPost.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
          date: topPost.createdAt.toLocaleDateString('ru-RU'),
          url: topPost.url || ''
        },
        avgViews
      });
    }
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
  competitors.sort((a, b) => b.avgViews - a.avgViews);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-5 –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
  return competitors.slice(0, 5);
}

async function analyzeHashtags(posts: any[]): Promise<RealDataSummary['hashtags']> {
  const hashtagMap = new Map<string, any[]>();

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö—ç—à—Ç–µ–≥–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π
  posts.forEach(post => {
    if (post.description) {
      const hashtags = post.description.match(/#[\w\u0400-\u04FF]+/g) || [];
      hashtags.forEach(tag => {
        const cleanTag = tag.toLowerCase().replace('#', '');
        if (!hashtagMap.has(cleanTag)) {
          hashtagMap.set(cleanTag, []);
        }
        hashtagMap.get(cleanTag)!.push(post);
      });
    }
  });

  const hashtags: RealDataSummary['hashtags'] = [];

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ö—ç—à—Ç–µ–≥
  for (const [tag, tagPosts] of hashtagMap.entries()) {
    if (tagPosts.length >= 2) { // –ú–∏–Ω–∏–º—É–º 2 –ø–æ—Å—Ç–∞
      const totalViews = tagPosts.reduce((sum, post) => sum + post.viewCount, 0);
      const avgViews = Math.round(totalViews / tagPosts.length);

      hashtags.push({
        tag,
        posts: tagPosts.length,
        avgViews,
        trend: avgViews > 50000 ? 'up' : avgViews > 20000 ? 'stable' : 'down'
      });
    }
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
  hashtags.sort((a, b) => b.avgViews - a.avgViews);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-10 —Ö—ç—à—Ç–µ–≥–æ–≤
  return hashtags.slice(0, 10);
}

function getEmptyData(): RealDataSummary {
  return {
    totalPosts: 0,
    viralPosts: 0,
    avgViews: 0,
    avgLikes: 0,
    competitors: [],
    hashtags: [],
    dateRange: {
      from: '2025-01-01',
      to: new Date().toISOString().split('T')[0]
    }
  };
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { getRealData, RealDataSummary };

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  getRealData().then(data => {
    console.log('\nüïâÔ∏è –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó –ë–ê–ó–´:');
    console.log(JSON.stringify(data, null, 2));
  }).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}
